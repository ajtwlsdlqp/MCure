
C:\Users\LDH\AppData\Local\Temp\arduino_build_293753/insulin_peb_revb.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 99 01 	jmp	0x332	; 0x332 <__ctors_end>
       4:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__vector_1>
       8:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_2>
       c:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__vector_3>
      10:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_4>
      14:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_5>
      18:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_6>
      1c:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_7>
      20:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_8>
      24:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      28:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      2c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      30:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      34:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__vector_13>
      38:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      3c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      40:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      44:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      4c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      50:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      54:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      58:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      5c:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_23>
      60:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      64:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__vector_25>
      68:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__vector_26>
      6c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      70:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      74:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      78:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      7c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      80:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      84:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      88:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      8c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      90:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_36>
      94:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_37>
      98:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      9c:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_39>
      a0:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      a4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      a8:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      ac:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      b0:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      b4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      b8:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      bc:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      c0:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      c4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      c8:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      cc:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      d0:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      d4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      d8:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      dc:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>
      e0:	0c 94 ca 01 	jmp	0x394	; 0x394 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <Melody_Proc()+0x18a>
      e8:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <Melody_Proc()+0xa2>
      ec:	0c 94 75 06 	jmp	0xcea	; 0xcea <updateLED()+0x186>
      f0:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <serialEventRun()>
      f4:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <attachInterrupt+0x64>
      f8:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <HardwareSerial::read()>
      fc:	0c 94 92 11 	jmp	0x2324	; 0x2324 <turnOffPWM+0x50>
     100:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <attachInterrupt+0xc0>
     104:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <updateLED()+0x1dc>
     108:	0c 94 cd 11 	jmp	0x239a	; 0x239a <turnOffPWM+0xc6>
     10c:	0c 94 a6 11 	jmp	0x234c	; 0x234c <turnOffPWM+0x78>
     110:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <TwoWire::write(unsigned char)>
     114:	0c 94 3f 09 	jmp	0x127e	; 0x127e <Melody_Proc()+0x136>
     118:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <attachInterrupt+0x7e>
     11c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <TwoWire::write(unsigned char const*, unsigned int)>
     120:	0c 94 96 11 	jmp	0x232c	; 0x232c <turnOffPWM+0x58>
     124:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <TwoWire::peek()>
     128:	0c 94 92 06 	jmp	0xd24	; 0xd24 <updateLED()+0x1c0>
     12c:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <turnOffPWM+0x64>
     130:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     134:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <turnOffPWM+0x9c>
     138:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <TwoWire::read()>
     13c:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <_GLOBAL__sub_I___vector_36>
     140:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_GLOBAL__sub_I_Key>
     144:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <attachInterrupt+0x4c>
     148:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <HardwareSerial::flush()>
     14c:	0c 94 28 09 	jmp	0x1250	; 0x1250 <Melody_Proc()+0x108>
     150:	0c 94 2d 14 	jmp	0x285a	; 0x285a <_GLOBAL__sub_I___vector_25>
     154:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <TwoWire::flush()>
     158:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <attachInterrupt+0xda>
     15c:	0c 94 92 12 	jmp	0x2524	; 0x2524 <HardwareSerial::availableForWrite()>
     160:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <HardwareSerial::available()>
     164:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <nothing>
     168:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <turnOffPWM+0x6c>
     16c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <updateLED()+0x1ac>
     170:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <attachInterrupt+0xa8>
     174:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <Serial1_available()>
     178:	0c 94 09 09 	jmp	0x1212	; 0x1212 <Melody_Proc()+0xca>
     17c:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <HardwareSerial::peek()>
     180:	0c 94 cc 01 	jmp	0x398	; 0x398 <A_CHANGE()>
     184:	0c 94 ce 11 	jmp	0x239c	; 0x239c <turnOffPWM+0xc8>
     188:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <Melody_Proc()+0xf0>
     18c:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <Melody_Proc()+0x19c>
     190:	0c 94 17 13 	jmp	0x262e	; 0x262e <HardwareSerial::write(unsigned char)>
     194:	0c 94 23 14 	jmp	0x2846	; 0x2846 <Serial0_available()>
     198:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <attachInterrupt+0x3c>
     19c:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <updateLED()+0x18e>
     1a0:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <turnOffPWM+0xb0>
     1a4:	0c 94 c6 11 	jmp	0x238c	; 0x238c <turnOffPWM+0xb8>
     1a8:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <Print::availableForWrite()>
     1ac:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <Print::write(unsigned char const*, unsigned int)>
     1b0:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <turnOffPWM+0xa4>
     1b4:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <turnOffPWM+0xc0>
     1b8:	0c 94 ae 11 	jmp	0x235c	; 0x235c <turnOffPWM+0x88>
     1bc:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <turnOffPWM+0x94>
     1c0:	0c 94 88 11 	jmp	0x2310	; 0x2310 <turnOffPWM+0x3c>
     1c4:	0c 94 8e 11 	jmp	0x231c	; 0x231c <turnOffPWM+0x48>
     1c8:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <TwoWire::available()>
     1cc:	0c 94 0f 09 	jmp	0x121e	; 0x121e <Melody_Proc()+0xd6>
     1d0:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <turnOffPWM+0x80>
     1d4:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <Melody_Proc()+0xb6>

000001d8 <__trampolines_end>:
__trampolines_end():
     1d8:	00 00       	nop
     1da:	0b 0c       	add	r0, r11
     1dc:	03 0a       	sbc	r0, r19
     1de:	0d 0e       	add	r0, r29
     1e0:	0f 09       	sbc	r16, r15
     1e2:	08 04       	cpc	r0, r8
     1e4:	05 02       	muls	r16, r21
	...
     202:	00 00       	nop
     204:	13 12       	cpse	r1, r19
     206:	11 00       	.word	0x0011	; ????
	...

0000022e <digital_pin_to_bit_mask_PGM>:
     22e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     23e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     24e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     25e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     26e:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
     27e:	04 08 10 20 40 80                                   ... @.

00000284 <digital_pin_to_port_PGM>:
     284:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     294:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2a4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     2b4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2c4:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
     2d4:	0a 0a 0a 0a 0a 0a                                   ......

000002da <port_to_input_PGM>:
     2da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000002f4 <port_to_output_PGM>:
     2f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     304:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000030e <port_to_mode_PGM>:
     30e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     31e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000328 <tone_pin_to_timer_PGM>:
     328:	02 00                                               ..

0000032a <__ctors_start>:
__ctors_start():
     32a:	a5 09       	sbc	r26, r5
     32c:	a7 0a       	sbc	r10, r23
     32e:	2d 14       	cp	r2, r13
     330:	c4 14       	cp	r12, r4

00000332 <__ctors_end>:
__dtors_end():
     332:	11 24       	eor	r1, r1
     334:	1f be       	out	0x3f, r1	; 63
     336:	cf ef       	ldi	r28, 0xFF	; 255
     338:	d1 e2       	ldi	r29, 0x21	; 33
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	0c bf       	out	0x3c, r16	; 60

00000342 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     342:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     344:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     346:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     348:	ee e5       	ldi	r30, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     34a:	f3 e3       	ldi	r31, 0x33	; 51
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     34c:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     34e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     350:	02 c0       	rjmp	.+4      	; 0x356 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     352:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     354:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     356:	aa 33       	cpi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     358:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     35a:	d9 f7       	brne	.-10     	; 0x352 <__do_copy_data+0x10>

0000035c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     35c:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     35e:	aa e3       	ldi	r26, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     360:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     362:	01 c0       	rjmp	.+2      	; 0x366 <.do_clear_bss_start>

00000364 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     364:	1d 92       	st	X+, r1

00000366 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     366:	a0 3d       	cpi	r26, 0xD0	; 208
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     368:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     36a:	e1 f7       	brne	.-8      	; 0x364 <.do_clear_bss_loop>

0000036c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     36c:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     36e:	c9 e9       	ldi	r28, 0x99	; 153
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     370:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     372:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     374:	06 c0       	rjmp	.+12     	; 0x382 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     376:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     378:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     37a:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     37c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     37e:	0e 94 75 19 	call	0x32ea	; 0x32ea <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     382:	c5 39       	cpi	r28, 0x95	; 149
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     384:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     386:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     388:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     38a:	a9 f7       	brne	.-22     	; 0x376 <__do_global_ctors+0xa>
     38c:	0e 94 24 19 	call	0x3248	; 0x3248 <main>
     390:	0c 94 ad 19 	jmp	0x335a	; 0x335a <_exit>

00000394 <__bad_interrupt>:
__vector_38():
     394:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000398 <A_CHANGE()>:
_Z8A_CHANGEv():
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:925
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	0e 94 3b 12 	call	0x2476	; 0x2476 <digitalRead>
     39e:	89 2b       	or	r24, r25
     3a0:	61 f4       	brne	.+24     	; 0x3ba <A_CHANGE()+0x22>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	0e 94 3b 12 	call	0x2476	; 0x2476 <digitalRead>
     3a8:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <pulses>
     3ac:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <pulses+0x1>
     3b0:	89 2b       	or	r24, r25
     3b2:	61 f4       	brne	.+24     	; 0x3cc <A_CHANGE()+0x34>
     3b4:	2f 5f       	subi	r18, 0xFF	; 255
     3b6:	3f 4f       	sbci	r19, 0xFF	; 255
     3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <A_CHANGE()+0x38>
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	0e 94 3b 12 	call	0x2476	; 0x2476 <digitalRead>
     3c0:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <pulses>
     3c4:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <pulses+0x1>
     3c8:	89 2b       	or	r24, r25
     3ca:	a1 f7       	brne	.-24     	; 0x3b4 <A_CHANGE()+0x1c>
     3cc:	21 50       	subi	r18, 0x01	; 1
     3ce:	31 09       	sbc	r19, r1
     3d0:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <pulses+0x1>
     3d4:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <pulses>
     3d8:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     3dc:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <pre_encodercheck_time>
     3e0:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <pre_encodercheck_time+0x1>
     3e4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <pre_encodercheck_time+0x2>
     3e8:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <pre_encodercheck_time+0x3>
     3ec:	08 95       	ret

000003ee <Key_Read()>:
_Z8Key_Readv():
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	1f 92       	push	r1
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	19 82       	std	Y+1, r1	; 0x01
     400:	1a 82       	std	Y+2, r1	; 0x02
     402:	8e 01       	movw	r16, r28
     404:	0f 5f       	subi	r16, 0xFF	; 255
     406:	1f 4f       	sbci	r17, 0xFF	; 255
     408:	22 e0       	ldi	r18, 0x02	; 2
     40a:	4a e2       	ldi	r20, 0x2A	; 42
     40c:	64 e2       	ldi	r22, 0x24	; 36
     40e:	8c e3       	ldi	r24, 0x3C	; 60
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)>
     416:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Key_Read()::pre_key>
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	9f 3f       	cpi	r25, 0xFF	; 255
     41e:	c9 f5       	brne	.+114    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     420:	81 11       	cpse	r24, r1
     422:	23 c0       	rjmp	.+70     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Key+0x1>
     42c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Key>
     430:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	71 f4       	brne	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     438:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mokup_motor_run_state>
     43c:	88 23       	and	r24, r24
     43e:	51 f0       	breq	.+20     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     440:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <mokup_motor_run_state>
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	88 e0       	ldi	r24, 0x08	; 8
     448:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	87 e0       	ldi	r24, 0x07	; 7
     450:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     454:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Key>
     458:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Key_Read()::pre_key>
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	08 95       	ret
     46a:	80 ff       	sbrs	r24, 0
     46c:	03 c0       	rjmp	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	13 c0       	rjmp	.+38     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     474:	81 ff       	sbrs	r24, 1
     476:	03 c0       	rjmp	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e c0       	rjmp	.+28     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     47e:	82 ff       	sbrs	r24, 2
     480:	03 c0       	rjmp	.+6      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	09 c0       	rjmp	.+18     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     488:	83 ff       	sbrs	r24, 3
     48a:	05 c0       	rjmp	.+10     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     48c:	88 e0       	ldi	r24, 0x08	; 8
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	04 c0       	rjmp	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	81 11       	cpse	r24, r1
     494:	07 c0       	rjmp	.+14     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Key+0x1>
     49e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Key>
     4a2:	d8 cf       	rjmp	.-80     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	19 f3       	breq	.-58     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	31 f3       	breq	.-52     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     4ac:	84 30       	cpi	r24, 0x04	; 4
     4ae:	49 f3       	breq	.-46     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     4b0:	88 30       	cpi	r24, 0x08	; 8
     4b2:	61 f3       	breq	.-40     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     4b4:	89 2f       	mov	r24, r25
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	f0 cf       	rjmp	.-32     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

000004ba <Key_Proc()>:
_Z8Key_Procv():
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <is_key_change>
     4c2:	88 23       	and	r24, r24
     4c4:	69 f0       	breq	.+26     	; 0x4e0 <Key_Proc()+0x26>
     4c6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <is_key_change>
     4ca:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Key>
     4ce:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Key+0x1>
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <Key_Proc()+0x20>
     4d8:	82 c0       	rjmp	.+260    	; 0x5de <Key_Proc()+0x124>
     4da:	2c f4       	brge	.+10     	; 0x4e6 <Key_Proc()+0x2c>
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	b9 f0       	breq	.+46     	; 0x50e <Key_Proc()+0x54>
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret
     4e6:	84 30       	cpi	r24, 0x04	; 4
     4e8:	91 05       	cpc	r25, r1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <Key_Proc()+0x34>
     4ec:	c2 c0       	rjmp	.+388    	; 0x672 <Key_Proc()+0x1b8>
     4ee:	08 97       	sbiw	r24, 0x08	; 8
     4f0:	b9 f7       	brne	.-18     	; 0x4e0 <Key_Proc()+0x26>
     4f2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     4f6:	88 23       	and	r24, r24
     4f8:	99 f3       	breq	.-26     	; 0x4e0 <Key_Proc()+0x26>
     4fa:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <f_ble_state>
     4fe:	81 11       	cpse	r24, r1
     500:	e1 c0       	rjmp	.+450    	; 0x6c4 <Key_Proc()+0x20a>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <f_ble_state>
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	8a e2       	ldi	r24, 0x2A	; 42
     50c:	8e c0       	rjmp	.+284    	; 0x62a <Key_Proc()+0x170>
     50e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     512:	81 11       	cpse	r24, r1
     514:	1c c0       	rjmp	.+56     	; 0x54e <Key_Proc()+0x94>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <f_power_state>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	89 e0       	ldi	r24, 0x09	; 9
     520:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     524:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <active_step>
     528:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <is_target_psi_set>
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
     538:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     53c:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
     540:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
     544:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
     548:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
     54c:	c9 cf       	rjmp	.-110    	; 0x4e0 <Key_Proc()+0x26>
     54e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <active_step>
     552:	81 11       	cpse	r24, r1
     554:	1b c0       	rjmp	.+54     	; 0x58c <Key_Proc()+0xd2>
     556:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <f_power_state>
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	87 e0       	ldi	r24, 0x07	; 7
     566:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	87 e1       	ldi	r24, 0x17	; 23
     56e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	89 e1       	ldi	r24, 0x19	; 25
     576:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	89 e0       	ldi	r24, 0x09	; 9
     57e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	d4 cf       	rjmp	.-88     	; 0x534 <Key_Proc()+0x7a>
     58c:	87 30       	cpi	r24, 0x07	; 7
     58e:	09 f4       	brne	.+2      	; 0x592 <Key_Proc()+0xd8>
     590:	a7 cf       	rjmp	.-178    	; 0x4e0 <Key_Proc()+0x26>
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	89 e1       	ldi	r24, 0x19	; 25
     596:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	87 e1       	ldi	r24, 0x17	; 23
     59e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     5a2:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     5a6:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <pre_valve_close_time>
     5aa:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <pre_valve_close_time+0x1>
     5ae:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <pre_valve_close_time+0x2>
     5b2:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <pre_valve_close_time+0x3>
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
     5c2:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     5c6:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
     5ca:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
     5ce:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
     5d2:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
     5d6:	87 e0       	ldi	r24, 0x07	; 7
     5d8:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <active_step>
     5dc:	81 cf       	rjmp	.-254    	; 0x4e0 <Key_Proc()+0x26>
     5de:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     5e2:	88 23       	and	r24, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <Key_Proc()+0x12e>
     5e6:	7c cf       	rjmp	.-264    	; 0x4e0 <Key_Proc()+0x26>
     5e8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mokup_motor_run_state>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	09 f1       	breq	.+66     	; 0x632 <Key_Proc()+0x178>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <mokup_motor_run_state>
     5f6:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     5fa:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <pre_encodercheck_time>
     5fe:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <pre_encodercheck_time+0x1>
     602:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <pre_encodercheck_time+0x2>
     606:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <pre_encodercheck_time+0x3>
     60a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     60e:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pre_user_motor_worktime>
     612:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pre_user_motor_worktime+0x1>
     616:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pre_user_motor_worktime+0x2>
     61a:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pre_user_motor_worktime+0x3>
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	88 e0       	ldi	r24, 0x08	; 8
     622:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	87 e0       	ldi	r24, 0x07	; 7
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <digitalWrite>
     632:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     636:	00 91 58 02 	lds	r16, 0x0258	; 0x800258 <pre_encodercheck_time>
     63a:	10 91 59 02 	lds	r17, 0x0259	; 0x800259 <pre_encodercheck_time+0x1>
     63e:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <pre_encodercheck_time+0x2>
     642:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <pre_encodercheck_time+0x3>
     646:	60 1b       	sub	r22, r16
     648:	71 0b       	sbc	r23, r17
     64a:	82 0b       	sbc	r24, r18
     64c:	93 0b       	sbc	r25, r19
     64e:	65 36       	cpi	r22, 0x65	; 101
     650:	71 05       	cpc	r23, r1
     652:	81 05       	cpc	r24, r1
     654:	91 05       	cpc	r25, r1
     656:	58 f1       	brcs	.+86     	; 0x6ae <Key_Proc()+0x1f4>
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	87 e0       	ldi	r24, 0x07	; 7
     664:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     668:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <pulses+0x1>
     66c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <pulses>
     670:	37 cf       	rjmp	.-402    	; 0x4e0 <Key_Proc()+0x26>
     672:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     676:	88 23       	and	r24, r24
     678:	09 f4       	brne	.+2      	; 0x67c <Key_Proc()+0x1c2>
     67a:	32 cf       	rjmp	.-412    	; 0x4e0 <Key_Proc()+0x26>
     67c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mokup_motor_run_state>
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	b9 f2       	breq	.-82     	; 0x632 <Key_Proc()+0x178>
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <mokup_motor_run_state>
     68a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     68e:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <pre_encodercheck_time>
     692:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <pre_encodercheck_time+0x1>
     696:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <pre_encodercheck_time+0x2>
     69a:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <pre_encodercheck_time+0x3>
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	88 e0       	ldi	r24, 0x08	; 8
     6a2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     6ae:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     6b2:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pre_user_motor_worktime>
     6b6:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pre_user_motor_worktime+0x1>
     6ba:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pre_user_motor_worktime+0x2>
     6be:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pre_user_motor_worktime+0x3>
     6c2:	0e cf       	rjmp	.-484    	; 0x4e0 <Key_Proc()+0x26>
     6c4:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <f_ble_state>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	1f cf       	rjmp	.-450    	; 0x50a <Key_Proc()+0x50>

000006cc <Key_Scan()>:
_Z8Key_Scanv():
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     6d4:	00 91 6c 02 	lds	r16, 0x026C	; 0x80026c <pre_key_readtime>
     6d8:	10 91 6d 02 	lds	r17, 0x026D	; 0x80026d <pre_key_readtime+0x1>
     6dc:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <pre_key_readtime+0x2>
     6e0:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <pre_key_readtime+0x3>
     6e4:	60 1b       	sub	r22, r16
     6e6:	71 0b       	sbc	r23, r17
     6e8:	82 0b       	sbc	r24, r18
     6ea:	93 0b       	sbc	r25, r19
     6ec:	62 30       	cpi	r22, 0x02	; 2
     6ee:	71 05       	cpc	r23, r1
     6f0:	81 05       	cpc	r24, r1
     6f2:	91 05       	cpc	r25, r1
     6f4:	f0 f1       	brcs	.+124    	; 0x772 <Key_Scan()+0xa6>
     6f6:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     6fa:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <pre_key_readtime>
     6fe:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <pre_key_readtime+0x1>
     702:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <pre_key_readtime+0x2>
     706:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <pre_key_readtime+0x3>
     70a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Key_Read()>
     70e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Key>
     712:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Key+0x1>
     716:	8f 3f       	cpi	r24, 0xFF	; 255
     718:	91 05       	cpc	r25, r1
     71a:	41 f1       	breq	.+80     	; 0x76c <Key_Scan()+0xa0>
     71c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     720:	28 17       	cp	r18, r24
     722:	19 06       	cpc	r1, r25
     724:	19 f5       	brne	.+70     	; 0x76c <Key_Scan()+0xa0>
     726:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <Key_Scan()::f_PressedKey>
     72a:	21 11       	cpse	r18, r1
     72c:	0e c0       	rjmp	.+28     	; 0x74a <Key_Scan()+0x7e>
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <is_key_change>
     734:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <Key_Scan()::f_PressedKey>
     738:	25 e0       	ldi	r18, 0x05	; 5
     73a:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <Key_Scan()::AutoKeyCount>
     73e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <Key_Proc()>
     74a:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <Key_Scan()::AutoKeyCount>
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <Key_Scan()::AutoKeyCount>
     754:	21 11       	cpse	r18, r1
     756:	f3 cf       	rjmp	.-26     	; 0x73e <Key_Scan()+0x72>
     758:	85 32       	cpi	r24, 0x25	; 37
     75a:	91 05       	cpc	r25, r1
     75c:	19 f0       	breq	.+6      	; 0x764 <Key_Scan()+0x98>
     75e:	88 32       	cpi	r24, 0x28	; 40
     760:	91 05       	cpc	r25, r1
     762:	69 f7       	brne	.-38     	; 0x73e <Key_Scan()+0x72>
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <is_key_change>
     76a:	e7 cf       	rjmp	.-50     	; 0x73a <Key_Scan()+0x6e>
     76c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Key_Scan()::f_PressedKey>
     770:	e6 cf       	rjmp	.-52     	; 0x73e <Key_Scan()+0x72>
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <updateTemperatrue()>:
_Z17updateTemperatruev():
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     780:	00 91 68 02 	lds	r16, 0x0268	; 0x800268 <pre_temp_readtime>
     784:	10 91 69 02 	lds	r17, 0x0269	; 0x800269 <pre_temp_readtime+0x1>
     788:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <pre_temp_readtime+0x2>
     78c:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <pre_temp_readtime+0x3>
     790:	60 1b       	sub	r22, r16
     792:	71 0b       	sbc	r23, r17
     794:	82 0b       	sbc	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	68 3c       	cpi	r22, 0xC8	; 200
     79a:	71 05       	cpc	r23, r1
     79c:	81 05       	cpc	r24, r1
     79e:	91 05       	cpc	r25, r1
     7a0:	48 f1       	brcs	.+82     	; 0x7f4 <updateTemperatrue()+0x7c>
     7a2:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     7a6:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <pre_temp_readtime>
     7aa:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <pre_temp_readtime+0x1>
     7ae:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pre_temp_readtime+0x2>
     7b2:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <pre_temp_readtime+0x3>
     7b6:	84 e4       	ldi	r24, 0x44	; 68
     7b8:	0e 94 44 11 	call	0x2288	; 0x2288 <analogRead>
     7bc:	83 3f       	cpi	r24, 0xF3	; 243
     7be:	22 e0       	ldi	r18, 0x02	; 2
     7c0:	92 07       	cpc	r25, r18
     7c2:	68 f4       	brcc	.+26     	; 0x7de <updateTemperatrue()+0x66>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <f_peltier_state>
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	8a e1       	ldi	r24, 0x1A	; 26
     7ce:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	88 e1       	ldi	r24, 0x18	; 24
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	0c 94 0d 12 	jmp	0x241a	; 0x241a <digitalWrite>
     7de:	83 30       	cpi	r24, 0x03	; 3
     7e0:	93 40       	sbci	r25, 0x03	; 3
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <updateTemperatrue()+0x7c>
     7e4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <f_peltier_state>
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8a e1       	ldi	r24, 0x1A	; 26
     7ec:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	f0 cf       	rjmp	.-32     	; 0x7d4 <updateTemperatrue()+0x5c>
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <updatePSI()>:
_Z9updatePSIv():
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     802:	88 23       	and	r24, r24
     804:	a9 f1       	breq	.+106    	; 0x870 <updatePSI()+0x76>
     806:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     80a:	00 91 64 02 	lds	r16, 0x0264	; 0x800264 <pre_psi_readtime>
     80e:	10 91 65 02 	lds	r17, 0x0265	; 0x800265 <pre_psi_readtime+0x1>
     812:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <pre_psi_readtime+0x2>
     816:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <pre_psi_readtime+0x3>
     81a:	60 1b       	sub	r22, r16
     81c:	71 0b       	sbc	r23, r17
     81e:	82 0b       	sbc	r24, r18
     820:	93 0b       	sbc	r25, r19
     822:	62 33       	cpi	r22, 0x32	; 50
     824:	71 05       	cpc	r23, r1
     826:	81 05       	cpc	r24, r1
     828:	91 05       	cpc	r25, r1
     82a:	10 f1       	brcs	.+68     	; 0x870 <updatePSI()+0x76>
     82c:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     830:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <pre_psi_readtime>
     834:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <pre_psi_readtime+0x1>
     838:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pre_psi_readtime+0x2>
     83c:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <pre_psi_readtime+0x3>
     840:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <active_step>
     844:	85 30       	cpi	r24, 0x05	; 5
     846:	70 f4       	brcc	.+28     	; 0x864 <updatePSI()+0x6a>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	a8 f0       	brcs	.+42     	; 0x876 <updatePSI()+0x7c>
     84c:	88 e3       	ldi	r24, 0x38	; 56
     84e:	0e 94 44 11 	call	0x2288	; 0x2288 <analogRead>
     852:	86 3c       	cpi	r24, 0xC6	; 198
     854:	91 05       	cpc	r25, r1
     856:	34 f5       	brge	.+76     	; 0x8a4 <updatePSI()+0xaa>
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	89 e1       	ldi	r24, 0x19	; 25
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	0c 94 0d 12 	jmp	0x241a	; 0x241a <digitalWrite>
     864:	86 30       	cpi	r24, 0x06	; 6
     866:	e1 f1       	breq	.+120    	; 0x8e0 <updatePSI()+0xe6>
     868:	28 f1       	brcs	.+74     	; 0x8b4 <updatePSI()+0xba>
     86a:	87 30       	cpi	r24, 0x07	; 7
     86c:	09 f4       	brne	.+2      	; 0x870 <updatePSI()+0x76>
     86e:	6b c0       	rjmp	.+214    	; 0x946 <updatePSI()+0x14c>
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret
     876:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <working_mode>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	81 f4       	brne	.+32     	; 0x89e <updatePSI()+0xa4>
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
     88a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     88e:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
     892:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
     896:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
     89a:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
     89e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <is_target_psi_set>
     8a2:	e6 cf       	rjmp	.-52     	; 0x870 <updatePSI()+0x76>
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	89 e1       	ldi	r24, 0x19	; 25
     8a8:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <is_target_psi_set>
     8b2:	de cf       	rjmp	.-68     	; 0x870 <updatePSI()+0x76>
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	89 e1       	ldi	r24, 0x19	; 25
     8b8:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	87 e1       	ldi	r24, 0x17	; 23
     8c0:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     8c4:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     8c8:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <pre_valve_close_time>
     8cc:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <pre_valve_close_time+0x1>
     8d0:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <pre_valve_close_time+0x2>
     8d4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <pre_valve_close_time+0x3>
     8d8:	86 e0       	ldi	r24, 0x06	; 6
     8da:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <active_step>
     8de:	c8 cf       	rjmp	.-112    	; 0x870 <updatePSI()+0x76>
     8e0:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     8e4:	00 91 60 02 	lds	r16, 0x0260	; 0x800260 <pre_valve_close_time>
     8e8:	10 91 61 02 	lds	r17, 0x0261	; 0x800261 <pre_valve_close_time+0x1>
     8ec:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <pre_valve_close_time+0x2>
     8f0:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <pre_valve_close_time+0x3>
     8f4:	60 1b       	sub	r22, r16
     8f6:	71 0b       	sbc	r23, r17
     8f8:	82 0b       	sbc	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	61 3d       	cpi	r22, 0xD1	; 209
     8fe:	77 40       	sbci	r23, 0x07	; 7
     900:	81 05       	cpc	r24, r1
     902:	91 05       	cpc	r25, r1
     904:	08 f4       	brcc	.+2      	; 0x908 <updatePSI()+0x10e>
     906:	b4 cf       	rjmp	.-152    	; 0x870 <updatePSI()+0x76>
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	87 e1       	ldi	r24, 0x17	; 23
     90c:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	89 e1       	ldi	r24, 0x19	; 25
     914:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	89 e0       	ldi	r24, 0x09	; 9
     91c:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     920:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <f_power_state>
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
     930:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     934:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
     938:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
     93c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
     940:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
     944:	95 cf       	rjmp	.-214    	; 0x870 <updatePSI()+0x76>
     946:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     94a:	00 91 60 02 	lds	r16, 0x0260	; 0x800260 <pre_valve_close_time>
     94e:	10 91 61 02 	lds	r17, 0x0261	; 0x800261 <pre_valve_close_time+0x1>
     952:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <pre_valve_close_time+0x2>
     956:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <pre_valve_close_time+0x3>
     95a:	60 1b       	sub	r22, r16
     95c:	71 0b       	sbc	r23, r17
     95e:	82 0b       	sbc	r24, r18
     960:	93 0b       	sbc	r25, r19
     962:	61 3d       	cpi	r22, 0xD1	; 209
     964:	77 40       	sbci	r23, 0x07	; 7
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	08 f4       	brcc	.+2      	; 0x96e <updatePSI()+0x174>
     96c:	81 cf       	rjmp	.-254    	; 0x870 <updatePSI()+0x76>
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	87 e1       	ldi	r24, 0x17	; 23
     972:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	89 e1       	ldi	r24, 0x19	; 25
     97a:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     97e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <active_step>
     982:	76 cf       	rjmp	.-276    	; 0x870 <updatePSI()+0x76>

00000984 <updateMotor()>:
_Z11updateMotorv():
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     990:	88 23       	and	r24, r24
     992:	59 f0       	breq	.+22     	; 0x9aa <updateMotor()+0x26>
     994:	c0 91 77 02 	lds	r28, 0x0277	; 0x800277 <active_step>
     998:	c3 30       	cpi	r28, 0x03	; 3
     99a:	09 f4       	brne	.+2      	; 0x99e <updateMotor()+0x1a>
     99c:	83 c0       	rjmp	.+262    	; 0xaa4 <updateMotor()+0x120>
     99e:	50 f4       	brcc	.+20     	; 0x9b4 <updateMotor()+0x30>
     9a0:	c1 30       	cpi	r28, 0x01	; 1
     9a2:	c9 f0       	breq	.+50     	; 0x9d6 <updateMotor()+0x52>
     9a4:	c2 30       	cpi	r28, 0x02	; 2
     9a6:	09 f4       	brne	.+2      	; 0x9aa <updateMotor()+0x26>
     9a8:	3f c0       	rjmp	.+126    	; 0xa28 <updateMotor()+0xa4>
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret
     9b4:	c4 30       	cpi	r28, 0x04	; 4
     9b6:	09 f4       	brne	.+2      	; 0x9ba <updateMotor()+0x36>
     9b8:	b7 c0       	rjmp	.+366    	; 0xb28 <updateMotor()+0x1a4>
     9ba:	c7 30       	cpi	r28, 0x07	; 7
     9bc:	b0 f7       	brcc	.-20     	; 0x9aa <updateMotor()+0x26>
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	87 e0       	ldi	r24, 0x07	; 7
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	0c 94 0d 12 	jmp	0x241a	; 0x241a <digitalWrite>
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	87 e0       	ldi	r24, 0x07	; 7
     9e2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     9e6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <is_target_psi_set>
     9ea:	88 23       	and	r24, r24
     9ec:	f1 f2       	breq	.-68     	; 0x9aa <updateMotor()+0x26>
     9ee:	c2 e0       	ldi	r28, 0x02	; 2
     9f0:	c0 93 73 02 	sts	0x0273, r28	; 0x800273 <Sound_Update>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
     9fa:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     9fe:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
     a02:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
     a06:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
     a0a:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
     a0e:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     a12:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <pre_motor_stop_time>
     a16:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <pre_motor_stop_time+0x1>
     a1a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <pre_motor_stop_time+0x2>
     a1e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <pre_motor_stop_time+0x3>
     a22:	c0 93 77 02 	sts	0x0277, r28	; 0x800277 <active_step>
     a26:	c1 cf       	rjmp	.-126    	; 0x9aa <updateMotor()+0x26>
     a28:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     a2c:	00 91 54 02 	lds	r16, 0x0254	; 0x800254 <pre_motor_stop_time>
     a30:	10 91 55 02 	lds	r17, 0x0255	; 0x800255 <pre_motor_stop_time+0x1>
     a34:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <pre_motor_stop_time+0x2>
     a38:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <pre_motor_stop_time+0x3>
     a3c:	60 1b       	sub	r22, r16
     a3e:	71 0b       	sbc	r23, r17
     a40:	82 0b       	sbc	r24, r18
     a42:	93 0b       	sbc	r25, r19
     a44:	6d 32       	cpi	r22, 0x2D	; 45
     a46:	71 40       	sbci	r23, 0x01	; 1
     a48:	81 05       	cpc	r24, r1
     a4a:	91 05       	cpc	r25, r1
     a4c:	08 f4       	brcc	.+2      	; 0xa50 <updateMotor()+0xcc>
     a4e:	ad cf       	rjmp	.-166    	; 0x9aa <updateMotor()+0x26>
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     a58:	d3 e0       	ldi	r29, 0x03	; 3
     a5a:	d0 93 77 02 	sts	0x0277, r29	; 0x800277 <active_step>
     a5e:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     a62:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <pre_encodercheck_time>
     a66:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <pre_encodercheck_time+0x1>
     a6a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <pre_encodercheck_time+0x2>
     a6e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <pre_encodercheck_time+0x3>
     a72:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     a76:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <pre_motor_stop_time>
     a7a:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <pre_motor_stop_time+0x1>
     a7e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <pre_motor_stop_time+0x2>
     a82:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <pre_motor_stop_time+0x3>
     a86:	c0 93 73 02 	sts	0x0273, r28	; 0x800273 <Sound_Update>
     a8a:	d0 93 74 02 	sts	0x0274, r29	; 0x800274 <Sound_Num>
     a8e:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     a92:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
     a96:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
     a9a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
     a9e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
     aa2:	83 cf       	rjmp	.-250    	; 0x9aa <updateMotor()+0x26>
     aa4:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     aa8:	00 91 54 02 	lds	r16, 0x0254	; 0x800254 <pre_motor_stop_time>
     aac:	10 91 55 02 	lds	r17, 0x0255	; 0x800255 <pre_motor_stop_time+0x1>
     ab0:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <pre_motor_stop_time+0x2>
     ab4:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <pre_motor_stop_time+0x3>
     ab8:	60 1b       	sub	r22, r16
     aba:	71 0b       	sbc	r23, r17
     abc:	82 0b       	sbc	r24, r18
     abe:	93 0b       	sbc	r25, r19
     ac0:	6d 32       	cpi	r22, 0x2D	; 45
     ac2:	71 40       	sbci	r23, 0x01	; 1
     ac4:	81 05       	cpc	r24, r1
     ac6:	91 05       	cpc	r25, r1
     ac8:	08 f4       	brcc	.+2      	; 0xacc <updateMotor()+0x148>
     aca:	6f cf       	rjmp	.-290    	; 0x9aa <updateMotor()+0x26>
     acc:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     ad0:	00 91 58 02 	lds	r16, 0x0258	; 0x800258 <pre_encodercheck_time>
     ad4:	10 91 59 02 	lds	r17, 0x0259	; 0x800259 <pre_encodercheck_time+0x1>
     ad8:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <pre_encodercheck_time+0x2>
     adc:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <pre_encodercheck_time+0x3>
     ae0:	60 1b       	sub	r22, r16
     ae2:	71 0b       	sbc	r23, r17
     ae4:	82 0b       	sbc	r24, r18
     ae6:	93 0b       	sbc	r25, r19
     ae8:	65 36       	cpi	r22, 0x65	; 101
     aea:	71 05       	cpc	r23, r1
     aec:	81 05       	cpc	r24, r1
     aee:	91 05       	cpc	r25, r1
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <updateMotor()+0x170>
     af2:	5b cf       	rjmp	.-330    	; 0x9aa <updateMotor()+0x26>
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	87 e0       	ldi	r24, 0x07	; 7
     b00:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     b04:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <pulses+0x1>
     b08:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <pulses>
     b0c:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     b10:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <pre_motor_stop_time>
     b14:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <pre_motor_stop_time+0x1>
     b18:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <pre_motor_stop_time+0x2>
     b1c:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <pre_motor_stop_time+0x3>
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <active_step>
     b26:	41 cf       	rjmp	.-382    	; 0x9aa <updateMotor()+0x26>
     b28:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     b2c:	00 91 54 02 	lds	r16, 0x0254	; 0x800254 <pre_motor_stop_time>
     b30:	10 91 55 02 	lds	r17, 0x0255	; 0x800255 <pre_motor_stop_time+0x1>
     b34:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <pre_motor_stop_time+0x2>
     b38:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <pre_motor_stop_time+0x3>
     b3c:	60 1b       	sub	r22, r16
     b3e:	71 0b       	sbc	r23, r17
     b40:	82 0b       	sbc	r24, r18
     b42:	93 0b       	sbc	r25, r19
     b44:	61 31       	cpi	r22, 0x11	; 17
     b46:	77 42       	sbci	r23, 0x27	; 39
     b48:	81 05       	cpc	r24, r1
     b4a:	91 05       	cpc	r25, r1
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <updateMotor()+0x1cc>
     b4e:	2d cf       	rjmp	.-422    	; 0x9aa <updateMotor()+0x26>
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <active_step>
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
     b62:	95 cf       	rjmp	.-214    	; 0xa8e <updateMotor()+0x10a>

00000b64 <updateLED()>:
_Z9updateLEDv():
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <updateLED()::led_timing>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	10 f0       	brcs	.+4      	; 0xb74 <updateLED()+0x10>
     b70:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <updateLED()::led_timing>
     b74:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <updateLED()::led_timing>
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <updateLED()+0x1a>
     b7c:	53 c0       	rjmp	.+166    	; 0xc24 <updateLED()+0xc0>
     b7e:	90 f1       	brcs	.+100    	; 0xbe4 <updateLED()+0x80>
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	09 f4       	brne	.+2      	; 0xb86 <updateLED()+0x22>
     b84:	96 c0       	rjmp	.+300    	; 0xcb2 <updateLED()+0x14e>
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	09 f4       	brne	.+2      	; 0xb8c <updateLED()+0x28>
     b8a:	ec c0       	rjmp	.+472    	; 0xd64 <updateLED()+0x200>
     b8c:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     b90:	00 91 50 02 	lds	r16, 0x0250	; 0x800250 <pre_led_flash_time>
     b94:	10 91 51 02 	lds	r17, 0x0251	; 0x800251 <pre_led_flash_time+0x1>
     b98:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <pre_led_flash_time+0x2>
     b9c:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <pre_led_flash_time+0x3>
     ba0:	60 1b       	sub	r22, r16
     ba2:	71 0b       	sbc	r23, r17
     ba4:	82 0b       	sbc	r24, r18
     ba6:	93 0b       	sbc	r25, r19
     ba8:	6d 32       	cpi	r22, 0x2D	; 45
     baa:	71 40       	sbci	r23, 0x01	; 1
     bac:	81 05       	cpc	r24, r1
     bae:	91 05       	cpc	r25, r1
     bb0:	88 f0       	brcs	.+34     	; 0xbd4 <updateLED()+0x70>
     bb2:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     bb6:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <pre_led_flash_time>
     bba:	70 93 51 02 	sts	0x0251, r23	; 0x800251 <pre_led_flash_time+0x1>
     bbe:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <pre_led_flash_time+0x2>
     bc2:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <pre_led_flash_time+0x3>
     bc6:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     bca:	81 11       	cpse	r24, r1
     bcc:	dc c0       	rjmp	.+440    	; 0xd86 <updateLED()+0x222>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <flash_statae>
     bd4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <updateLED()::led_timing>
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <updateLED()::led_timing>
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	08 95       	ret
     be4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     be8:	88 23       	and	r24, r24
     bea:	81 f2       	breq	.-96     	; 0xb8c <updateLED()+0x28>
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	84 e2       	ldi	r24, 0x24	; 36
     bf0:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	85 e2       	ldi	r24, 0x25	; 37
     bf8:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	88 e2       	ldi	r24, 0x28	; 40
     c00:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c04:	8c e2       	ldi	r24, 0x2C	; 44
     c06:	0e 94 3b 12 	call	0x2476	; 0x2476 <digitalRead>
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	29 f4       	brne	.+10     	; 0xc18 <updateLED()+0xb4>
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	89 e2       	ldi	r24, 0x29	; 41
     c12:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c16:	ba cf       	rjmp	.-140    	; 0xb8c <updateLED()+0x28>
     c18:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     c1c:	88 23       	and	r24, r24
     c1e:	b9 f3       	breq	.-18     	; 0xc0e <updateLED()+0xaa>
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	f6 cf       	rjmp	.-20     	; 0xc10 <updateLED()+0xac>
     c24:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <updateLED()+0xca>
     c2c:	af cf       	rjmp	.-162    	; 0xb8c <updateLED()+0x28>
     c2e:	8a e3       	ldi	r24, 0x3A	; 58
     c30:	0e 94 44 11 	call	0x2288	; 0x2288 <analogRead>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	92 40       	sbci	r25, 0x02	; 2
     c38:	2c f0       	brlt	.+10     	; 0xc44 <updateLED()+0xe0>
     c3a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	81 11       	cpse	r24, r1
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <updateLED()+0xe2>
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	82 e2       	ldi	r24, 0x22	; 34
     c48:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c4c:	86 e3       	ldi	r24, 0x36	; 54
     c4e:	0e 94 44 11 	call	0x2288	; 0x2288 <analogRead>
     c52:	8d 3e       	cpi	r24, 0xED	; 237
     c54:	92 40       	sbci	r25, 0x02	; 2
     c56:	5c f0       	brlt	.+22     	; 0xc6e <updateLED()+0x10a>
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	83 e2       	ldi	r24, 0x23	; 35
     c5c:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	81 e2       	ldi	r24, 0x21	; 33
     c64:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	d2 cf       	rjmp	.-92     	; 0xc12 <updateLED()+0xae>
     c6e:	86 e3       	ldi	r24, 0x36	; 54
     c70:	0e 94 44 11 	call	0x2288	; 0x2288 <analogRead>
     c74:	8d 33       	cpi	r24, 0x3D	; 61
     c76:	92 40       	sbci	r25, 0x02	; 2
     c78:	54 f0       	brlt	.+20     	; 0xc8e <updateLED()+0x12a>
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	83 e2       	ldi	r24, 0x23	; 35
     c7e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	81 e2       	ldi	r24, 0x21	; 33
     c86:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	ee cf       	rjmp	.-36     	; 0xc6a <updateLED()+0x106>
     c8e:	86 e3       	ldi	r24, 0x36	; 54
     c90:	0e 94 44 11 	call	0x2288	; 0x2288 <analogRead>
     c94:	8d 3d       	cpi	r24, 0xDD	; 221
     c96:	91 05       	cpc	r25, r1
     c98:	14 f0       	brlt	.+4      	; 0xc9e <updateLED()+0x13a>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <updateLED()+0x144>
     c9e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	88 23       	and	r24, r24
     ca6:	c9 f3       	breq	.-14     	; 0xc9a <updateLED()+0x136>
     ca8:	83 e2       	ldi	r24, 0x23	; 35
     caa:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	e9 cf       	rjmp	.-46     	; 0xc84 <updateLED()+0x120>
     cb2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <f_power_state>
     cb6:	88 23       	and	r24, r24
     cb8:	09 f4       	brne	.+2      	; 0xcbc <updateLED()+0x158>
     cba:	68 cf       	rjmp	.-304    	; 0xb8c <updateLED()+0x28>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	8e e0       	ldi	r24, 0x0E	; 14
     cc0:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     cc4:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <active_step>
     cc8:	e7 30       	cpi	r30, 0x07	; 7
     cca:	08 f0       	brcs	.+2      	; 0xcce <updateLED()+0x16a>
     ccc:	5f cf       	rjmp	.-322    	; 0xb8c <updateLED()+0x28>
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	88 27       	eor	r24, r24
     cd2:	e2 59       	subi	r30, 0x92	; 146
     cd4:	f9 4f       	sbci	r31, 0xF9	; 249
     cd6:	8f 4f       	sbci	r24, 0xFF	; 255
     cd8:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__tablejump2__>
     cdc:	79 06       	cpc	r7, r25
     cde:	75 06       	cpc	r7, r21
     ce0:	88 06       	cpc	r8, r24
     ce2:	88 06       	cpc	r8, r24
     ce4:	92 06       	cpc	r9, r18
     ce6:	a0 06       	cpc	r10, r16
     ce8:	a0 06       	cpc	r10, r16
     cea:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	81 11       	cpse	r24, r1
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	8f e1       	ldi	r24, 0x1F	; 31
     cf6:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	8e e1       	ldi	r24, 0x1E	; 30
     cfe:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	8f e0       	ldi	r24, 0x0F	; 15
     d06:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	87 e2       	ldi	r24, 0x27	; 39
     d0e:	81 cf       	rjmp	.-254    	; 0xc12 <updateLED()+0xae>
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	8f e1       	ldi	r24, 0x1F	; 31
     d14:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d18:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	88 23       	and	r24, r24
     d20:	69 f3       	breq	.-38     	; 0xcfc <updateLED()+0x198>
     d22:	eb cf       	rjmp	.-42     	; 0xcfa <updateLED()+0x196>
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	8f e1       	ldi	r24, 0x1F	; 31
     d28:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	8e e1       	ldi	r24, 0x1E	; 30
     d30:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d34:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	88 23       	and	r24, r24
     d3c:	19 f3       	breq	.-58     	; 0xd04 <updateLED()+0x1a0>
     d3e:	e1 cf       	rjmp	.-62     	; 0xd02 <updateLED()+0x19e>
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	8f e1       	ldi	r24, 0x1F	; 31
     d44:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	8e e1       	ldi	r24, 0x1E	; 30
     d4c:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	8f e0       	ldi	r24, 0x0F	; 15
     d54:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d58:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <flash_statae>
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	88 23       	and	r24, r24
     d60:	a9 f2       	breq	.-86     	; 0xd0c <updateLED()+0x1a8>
     d62:	d3 cf       	rjmp	.-90     	; 0xd0a <updateLED()+0x1a6>
     d64:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <f_peltier_state>
     d68:	88 23       	and	r24, r24
     d6a:	39 f0       	breq	.+14     	; 0xd7a <updateLED()+0x216>
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	8d e1       	ldi	r24, 0x1D	; 29
     d70:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	8c e1       	ldi	r24, 0x1C	; 28
     d78:	4c cf       	rjmp	.-360    	; 0xc12 <updateLED()+0xae>
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8d e1       	ldi	r24, 0x1D	; 29
     d7e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	f8 cf       	rjmp	.-16     	; 0xd76 <updateLED()+0x212>
     d86:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <flash_statae>
     d8a:	24 cf       	rjmp	.-440    	; 0xbd4 <updateLED()+0x70>

00000d8c <readEEPROM()>:
_Z10readEEPROMv():
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
_ZNK5EERefdeEv():
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 97 19 	call	0x332e	; 0x332e <eeprom_read_byte>
     d98:	c8 2f       	mov	r28, r24
_Z10readEEPROMv():
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 c5 10 	call	0x218a	; 0x218a <delay>
_ZNK5EERefdeEv():
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 97 19 	call	0x332e	; 0x332e <eeprom_read_byte>
     dae:	d8 2f       	mov	r29, r24
_Z10readEEPROMv():
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 c5 10 	call	0x218a	; 0x218a <delay>
     dbc:	cd 13       	cpse	r28, r29
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <readEEPROM()+0x3e>
     dc0:	c0 93 76 02 	sts	0x0276, r28	; 0x800276 <working_mode>
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <working_mode>
     dd0:	f9 cf       	rjmp	.-14     	; 0xdc4 <readEEPROM()+0x38>

00000dd2 <setup>:
setup():
     dd2:	8c e6       	ldi	r24, 0x6C	; 108
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	0e 94 b0 13 	call	0x2760	; 0x2760 <HardwareSerial::end()>
_ZN14HardwareSerial5beginEm():
     dda:	26 e0       	ldi	r18, 0x06	; 6
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	55 e2       	ldi	r21, 0x25	; 37
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	89 e0       	ldi	r24, 0x09	; 9
     de6:	94 e0       	ldi	r25, 0x04	; 4
     de8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	8c e2       	ldi	r24, 0x2C	; 44
     df0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	8b e2       	ldi	r24, 0x2B	; 43
     df8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	8b e2       	ldi	r24, 0x2B	; 43
     e00:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	8a e2       	ldi	r24, 0x2A	; 42
     e08:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	8a e2       	ldi	r24, 0x2A	; 42
     e10:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     e14:	8c e3       	ldi	r24, 0x3C	; 60
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 16 0c 	call	0x182c	; 0x182c <I2C::begin()>
     e1c:	60 ed       	ldi	r22, 0xD0	; 208
     e1e:	77 e0       	ldi	r23, 0x07	; 7
     e20:	8c e3       	ldi	r24, 0x3C	; 60
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	0e 94 27 0c 	call	0x184e	; 0x184e <I2C::timeOut(unsigned int)>
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	8c e3       	ldi	r24, 0x3C	; 60
     e2c:	93 e0       	ldi	r25, 0x03	; 3
     e2e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <I2C::pullup(unsigned char)>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	87 e0       	ldi	r24, 0x07	; 7
     e46:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	87 e0       	ldi	r24, 0x07	; 7
     e4e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	89 e0       	ldi	r24, 0x09	; 9
     e56:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	89 e0       	ldi	r24, 0x09	; 9
     e5e:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e72:	62 e0       	ldi	r22, 0x02	; 2
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	6c ec       	ldi	r22, 0xCC	; 204
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <attachInterrupt>
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	88 e1       	ldi	r24, 0x18	; 24
     e8c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	88 e1       	ldi	r24, 0x18	; 24
     e94:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	8a e1       	ldi	r24, 0x1A	; 26
     e9c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	8a e1       	ldi	r24, 0x1A	; 26
     ea4:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	87 e1       	ldi	r24, 0x17	; 23
     eac:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	87 e1       	ldi	r24, 0x17	; 23
     eb4:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	89 e1       	ldi	r24, 0x19	; 25
     ebc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	89 e1       	ldi	r24, 0x19	; 25
     ec4:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	8e e2       	ldi	r24, 0x2E	; 46
     ecc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     ed0:	8e e2       	ldi	r24, 0x2E	; 46
     ed2:	0e 94 ae 18 	call	0x315c	; 0x315c <noTone(unsigned char)>
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	8e e2       	ldi	r24, 0x2E	; 46
     eda:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	8d e2       	ldi	r24, 0x2D	; 45
     ee2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	8d e2       	ldi	r24, 0x2D	; 45
     eea:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	84 e2       	ldi	r24, 0x24	; 36
     ef2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	85 e2       	ldi	r24, 0x25	; 37
     efa:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	88 e2       	ldi	r24, 0x28	; 40
     f02:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	89 e2       	ldi	r24, 0x29	; 41
     f0a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	82 e2       	ldi	r24, 0x22	; 34
     f12:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	83 e2       	ldi	r24, 0x23	; 35
     f1a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	81 e2       	ldi	r24, 0x21	; 33
     f22:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	8e e0       	ldi	r24, 0x0E	; 14
     f32:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	8f e1       	ldi	r24, 0x1F	; 31
     f3a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	8e e1       	ldi	r24, 0x1E	; 30
     f42:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	8f e0       	ldi	r24, 0x0F	; 15
     f4a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	87 e2       	ldi	r24, 0x27	; 39
     f52:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	8d e1       	ldi	r24, 0x1D	; 29
     f5a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	8c e1       	ldi	r24, 0x1C	; 28
     f62:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	84 e2       	ldi	r24, 0x24	; 36
     f6a:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	85 e2       	ldi	r24, 0x25	; 37
     f72:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	88 e2       	ldi	r24, 0x28	; 40
     f7a:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	89 e2       	ldi	r24, 0x29	; 41
     f82:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	82 e2       	ldi	r24, 0x22	; 34
     f8a:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	83 e2       	ldi	r24, 0x23	; 35
     f92:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	81 e2       	ldi	r24, 0x21	; 33
     f9a:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	8e e0       	ldi	r24, 0x0E	; 14
     faa:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	8f e1       	ldi	r24, 0x1F	; 31
     fb2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	8e e1       	ldi	r24, 0x1E	; 30
     fba:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	8f e0       	ldi	r24, 0x0F	; 15
     fc2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	87 e2       	ldi	r24, 0x27	; 39
     fca:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	8d e1       	ldi	r24, 0x1D	; 29
     fd2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	8c e1       	ldi	r24, 0x1C	; 28
     fda:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
     fde:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <pulses+0x1>
     fe2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <pulses>
     fe6:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
     fea:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <pre_encodercheck_time>
     fee:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <pre_encodercheck_time+0x1>
     ff2:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <pre_encodercheck_time+0x2>
     ff6:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <pre_encodercheck_time+0x3>
     ffa:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <active_step>
     ffe:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <is_target_psi_set>
    1002:	0e 94 c6 06 	call	0xd8c	; 0xd8c <readEEPROM()>
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <working_mode>
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <Sound_Num>
    1018:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <is_touch_enable>
    101c:	08 95       	ret

0000101e <updateEEPROM()>:
_Z12updateEEPROMv():
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <is_update_infor>
    1026:	88 23       	and	r24, r24
    1028:	61 f1       	breq	.+88     	; 0x1082 <updateEEPROM()+0x64>
    102a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <is_update_infor>
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	c0 e0       	ldi	r28, 0x00	; 0
_ZN5EERefaSEh():
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 9f 19 	call	0x333e	; 0x333e <eeprom_write_byte>
_Z12updateEEPROMv():
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 c5 10 	call	0x218a	; 0x218a <delay>
    1046:	21 96       	adiw	r28, 0x01	; 1
    1048:	ca 30       	cpi	r28, 0x0A	; 10
    104a:	d1 05       	cpc	r29, r1
    104c:	91 f7       	brne	.-28     	; 0x1032 <updateEEPROM()+0x14>
    104e:	c0 91 76 02 	lds	r28, 0x0276	; 0x800276 <working_mode>
_ZN5EERefaSEh():
    1052:	6c 2f       	mov	r22, r28
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 9f 19 	call	0x333e	; 0x333e <eeprom_write_byte>
_Z12updateEEPROMv():
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 c5 10 	call	0x218a	; 0x218a <delay>
_ZN5EERefaSEh():
    1068:	6c 2f       	mov	r22, r28
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 9f 19 	call	0x333e	; 0x333e <eeprom_write_byte>
_Z12updateEEPROMv():
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	0c 94 c5 10 	jmp	0x218a	; 0x218a <delay>
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <enableTouch()>:
_Z11enableTouchv():
    1088:	20 e3       	ldi	r18, 0x30	; 48
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	49 e3       	ldi	r20, 0x39	; 57
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	64 e2       	ldi	r22, 0x24	; 36
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	8c e3       	ldi	r24, 0x3C	; 60
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    109c:	20 e3       	ldi	r18, 0x30	; 48
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a e3       	ldi	r20, 0x3A	; 58
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	64 e2       	ldi	r22, 0x24	; 36
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	8c e3       	ldi	r24, 0x3C	; 60
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    10b0:	20 e3       	ldi	r18, 0x30	; 48
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4b e3       	ldi	r20, 0x3B	; 59
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	64 e2       	ldi	r22, 0x24	; 36
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	8c e3       	ldi	r24, 0x3C	; 60
    10be:	93 e0       	ldi	r25, 0x03	; 3
    10c0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    10c4:	20 e3       	ldi	r18, 0x30	; 48
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4c e3       	ldi	r20, 0x3C	; 60
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	64 e2       	ldi	r22, 0x24	; 36
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	8c e3       	ldi	r24, 0x3C	; 60
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    10d8:	20 e3       	ldi	r18, 0x30	; 48
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	4d e3       	ldi	r20, 0x3D	; 61
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	64 e2       	ldi	r22, 0x24	; 36
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	8c e3       	ldi	r24, 0x3C	; 60
    10e6:	93 e0       	ldi	r25, 0x03	; 3
    10e8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    10ec:	20 e3       	ldi	r18, 0x30	; 48
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4e e3       	ldi	r20, 0x3E	; 62
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	64 e2       	ldi	r22, 0x24	; 36
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	8c e3       	ldi	r24, 0x3C	; 60
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    1100:	20 e3       	ldi	r18, 0x30	; 48
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4f e3       	ldi	r20, 0x3F	; 63
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	64 e2       	ldi	r22, 0x24	; 36
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	8c e3       	ldi	r24, 0x3C	; 60
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    1114:	20 e3       	ldi	r18, 0x30	; 48
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e4       	ldi	r20, 0x40	; 64
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	64 e2       	ldi	r22, 0x24	; 36
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	8c e3       	ldi	r24, 0x3C	; 60
    1122:	93 e0       	ldi	r25, 0x03	; 3
    1124:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <I2C::write(int, int, int)>
    1128:	64 e6       	ldi	r22, 0x64	; 100
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 c5 10 	call	0x218a	; 0x218a <delay>
    1134:	2f e0       	ldi	r18, 0x0F	; 15
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	64 e2       	ldi	r22, 0x24	; 36
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	8c e3       	ldi	r24, 0x3C	; 60
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <I2C::write(int, int, int)>

00001148 <Melody_Proc()>:
_Z11Melody_Procv():
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <Sound_Update>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <Melody_Proc()+0xe>
    1154:	71 c0       	rjmp	.+226    	; 0x1238 <Melody_Proc()+0xf0>
    1156:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    115a:	00 91 4c 02 	lds	r16, 0x024C	; 0x80024c <pre_buzzer_tic>
    115e:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <pre_buzzer_tic+0x1>
    1162:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <pre_buzzer_tic+0x2>
    1166:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <pre_buzzer_tic+0x3>
    116a:	60 1b       	sub	r22, r16
    116c:	71 0b       	sbc	r23, r17
    116e:	82 0b       	sbc	r24, r18
    1170:	93 0b       	sbc	r25, r19
    1172:	6a 30       	cpi	r22, 0x0A	; 10
    1174:	71 05       	cpc	r23, r1
    1176:	81 05       	cpc	r24, r1
    1178:	91 05       	cpc	r25, r1
    117a:	08 f4       	brcc	.+2      	; 0x117e <Melody_Proc()+0x36>
    117c:	5d c0       	rjmp	.+186    	; 0x1238 <Melody_Proc()+0xf0>
    117e:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1182:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
    1186:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
    118a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
    118e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
    1192:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <Sound_Update>
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	29 f4       	brne	.+10     	; 0x11a4 <Melody_Proc()+0x5c>
    119a:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__data_end>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <Sound_Update>
    11a4:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <__data_end>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	8e 0f       	add	r24, r30
    11ac:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <__data_end>
    11b0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <Sound_Num>
    11b4:	91 30       	cpi	r25, 0x01	; 1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <Melody_Proc()+0x72>
    11b8:	38 c0       	rjmp	.+112    	; 0x122a <Melody_Proc()+0xe2>
    11ba:	ee 30       	cpi	r30, 0x0E	; 14
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <Melody_Proc()+0x78>
    11be:	3c c0       	rjmp	.+120    	; 0x1238 <Melody_Proc()+0xf0>
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	88 27       	eor	r24, r24
    11c4:	e9 51       	subi	r30, 0x19	; 25
    11c6:	f7 4f       	sbci	r31, 0xF7	; 247
    11c8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ca:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__tablejump2__>
    11ce:	f5 08       	sbc	r15, r5
    11d0:	1c 09       	sbc	r17, r12
    11d2:	ff 08       	sbc	r15, r15
    11d4:	1c 09       	sbc	r17, r12
    11d6:	69 09       	sbc	r22, r9
    11d8:	1c 09       	sbc	r17, r12
    11da:	09 09       	sbc	r16, r9
    11dc:	1c 09       	sbc	r17, r12
    11de:	3f 09       	sbc	r19, r15
    11e0:	1c 09       	sbc	r17, r12
    11e2:	0f 09       	sbc	r16, r15
    11e4:	1c 09       	sbc	r17, r12
    11e6:	72 09       	sbc	r23, r2
    11e8:	28 09       	sbc	r18, r8
    11ea:	8e e2       	ldi	r24, 0x2E	; 46
    11ec:	0e 94 ae 18 	call	0x315c	; 0x315c <noTone(unsigned char)>
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8e e2       	ldi	r24, 0x2E	; 46
    11f4:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	8d e2       	ldi	r24, 0x2D	; 45
    11fc:	32 c0       	rjmp	.+100    	; 0x1262 <Melody_Proc()+0x11a>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	64 ee       	ldi	r22, 0xE4	; 228
    1206:	7c e0       	ldi	r23, 0x0C	; 12
    1208:	8e e2       	ldi	r24, 0x2E	; 46
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <tone(unsigned char, unsigned int, unsigned long)>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	60 ed       	ldi	r22, 0xD0	; 208
    121a:	77 e0       	ldi	r23, 0x07	; 7
    121c:	f5 cf       	rjmp	.-22     	; 0x1208 <Melody_Proc()+0xc0>
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	60 eb       	ldi	r22, 0xB0	; 176
    1226:	74 e0       	ldi	r23, 0x04	; 4
    1228:	ef cf       	rjmp	.-34     	; 0x1208 <Melody_Proc()+0xc0>
    122a:	92 30       	cpi	r25, 0x02	; 2
    122c:	f1 f4       	brne	.+60     	; 0x126a <Melody_Proc()+0x122>
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	81 f3       	breq	.-32     	; 0x1212 <Melody_Proc()+0xca>
    1232:	28 f4       	brcc	.+10     	; 0x123e <Melody_Proc()+0xf6>
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	c9 f2       	breq	.-78     	; 0x11ea <Melody_Proc()+0xa2>
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	08 95       	ret
    123e:	86 30       	cpi	r24, 0x06	; 6
    1240:	19 f0       	breq	.+6      	; 0x1248 <Melody_Proc()+0x100>
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	29 f0       	breq	.+10     	; 0x1250 <Melody_Proc()+0x108>
    1246:	f8 cf       	rjmp	.-16     	; 0x1238 <Melody_Proc()+0xf0>
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	8d e2       	ldi	r24, 0x2D	; 45
    124c:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
    1250:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Sound_Update>
    1254:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__data_end>
    1258:	8e e2       	ldi	r24, 0x2E	; 46
    125a:	0e 94 ae 18 	call	0x315c	; 0x315c <noTone(unsigned char)>
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	8e e2       	ldi	r24, 0x2E	; 46
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	0c 94 0d 12 	jmp	0x241a	; 0x241a <digitalWrite>
    126a:	93 30       	cpi	r25, 0x03	; 3
    126c:	41 f5       	brne	.+80     	; 0x12be <Melody_Proc()+0x176>
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	81 f1       	breq	.+96     	; 0x12d2 <Melody_Proc()+0x18a>
    1272:	58 f4       	brcc	.+22     	; 0x128a <Melody_Proc()+0x142>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	09 f4       	brne	.+2      	; 0x127a <Melody_Proc()+0x132>
    1278:	b8 cf       	rjmp	.-144    	; 0x11ea <Melody_Proc()+0xa2>
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	e9 f6       	brne	.-70     	; 0x1238 <Melody_Proc()+0xf0>
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	60 e4       	ldi	r22, 0x40	; 64
    1286:	76 e0       	ldi	r23, 0x06	; 6
    1288:	bf cf       	rjmp	.-130    	; 0x1208 <Melody_Proc()+0xc0>
    128a:	87 30       	cpi	r24, 0x07	; 7
    128c:	59 f1       	breq	.+86     	; 0x12e4 <Melody_Proc()+0x19c>
    128e:	88 30       	cpi	r24, 0x08	; 8
    1290:	99 f6       	brne	.-90     	; 0x1238 <Melody_Proc()+0xf0>
    1292:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <Sound_Update>
    1296:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__data_end>
    129a:	8e e2       	ldi	r24, 0x2E	; 46
    129c:	0e 94 ae 18 	call	0x315c	; 0x315c <noTone(unsigned char)>
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	8e e2       	ldi	r24, 0x2E	; 46
    12a4:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
    12a8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <is_touch_enable>
    12ac:	81 11       	cpse	r24, r1
    12ae:	c4 cf       	rjmp	.-120    	; 0x1238 <Melody_Proc()+0xf0>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <is_touch_enable>
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	0c 94 44 08 	jmp	0x1088	; 0x1088 <enableTouch()>
    12be:	94 30       	cpi	r25, 0x04	; 4
    12c0:	d9 f4       	brne	.+54     	; 0x12f8 <Melody_Proc()+0x1b0>
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	e1 f2       	breq	.-72     	; 0x127e <Melody_Proc()+0x136>
    12c6:	58 f4       	brcc	.+22     	; 0x12de <Melody_Proc()+0x196>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	71 f0       	breq	.+28     	; 0x12e8 <Melody_Proc()+0x1a0>
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <Melody_Proc()+0x18a>
    12d0:	b3 cf       	rjmp	.-154    	; 0x1238 <Melody_Proc()+0xf0>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	64 ec       	ldi	r22, 0xC4	; 196
    12da:	79 e0       	ldi	r23, 0x09	; 9
    12dc:	95 cf       	rjmp	.-214    	; 0x1208 <Melody_Proc()+0xc0>
    12de:	87 30       	cpi	r24, 0x07	; 7
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <Melody_Proc()+0x19c>
    12e2:	af cf       	rjmp	.-162    	; 0x1242 <Melody_Proc()+0xfa>
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	89 cf       	rjmp	.-238    	; 0x11fa <Melody_Proc()+0xb2>
    12e8:	8e e2       	ldi	r24, 0x2E	; 46
    12ea:	0e 94 ae 18 	call	0x315c	; 0x315c <noTone(unsigned char)>
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	8e e2       	ldi	r24, 0x2E	; 46
    12f2:	0e 94 0d 12 	call	0x241a	; 0x241a <digitalWrite>
    12f6:	f6 cf       	rjmp	.-20     	; 0x12e4 <Melody_Proc()+0x19c>
    12f8:	95 30       	cpi	r25, 0x05	; 5
    12fa:	09 f0       	breq	.+2      	; 0x12fe <Melody_Proc()+0x1b6>
    12fc:	9d cf       	rjmp	.-198    	; 0x1238 <Melody_Proc()+0xf0>
    12fe:	ee 30       	cpi	r30, 0x0E	; 14
    1300:	08 f0       	brcs	.+2      	; 0x1304 <Melody_Proc()+0x1bc>
    1302:	9a cf       	rjmp	.-204    	; 0x1238 <Melody_Proc()+0xf0>
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	88 27       	eor	r24, r24
    1308:	e7 57       	subi	r30, 0x77	; 119
    130a:	f6 4f       	sbci	r31, 0xF6	; 246
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__tablejump2__>
    1312:	f5 08       	sbc	r15, r5
    1314:	1c 09       	sbc	r17, r12
    1316:	0f 09       	sbc	r16, r15
    1318:	1c 09       	sbc	r17, r12
    131a:	3f 09       	sbc	r19, r15
    131c:	1c 09       	sbc	r17, r12
    131e:	09 09       	sbc	r16, r9
    1320:	1c 09       	sbc	r17, r12
    1322:	69 09       	sbc	r22, r9
    1324:	1c 09       	sbc	r17, r12
    1326:	ff 08       	sbc	r15, r15
    1328:	1c 09       	sbc	r17, r12
    132a:	72 09       	sbc	r23, r2
    132c:	28 09       	sbc	r18, r8

0000132e <loop>:
loop():
    132e:	0e 94 66 03 	call	0x6cc	; 0x6cc <Key_Scan()>
    1332:	0e 94 bc 03 	call	0x778	; 0x778 <updateTemperatrue()>
    1336:	0e 94 b2 05 	call	0xb64	; 0xb64 <updateLED()>
    133a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <updatePSI()>
    133e:	0e 94 c2 04 	call	0x984	; 0x984 <updateMotor()>
    1342:	0e 94 a4 08 	call	0x1148	; 0x1148 <Melody_Proc()>
    1346:	0c 94 0f 08 	jmp	0x101e	; 0x101e <updateEEPROM()>

0000134a <_GLOBAL__sub_I_Key>:
_GLOBAL__sub_I_Key():
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:29
    134a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    134e:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <pre_key_readtime>
    1352:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <pre_key_readtime+0x1>
    1356:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <pre_key_readtime+0x2>
    135a:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <pre_key_readtime+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:30
    135e:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1362:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <pre_temp_readtime>
    1366:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <pre_temp_readtime+0x1>
    136a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <pre_temp_readtime+0x2>
    136e:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <pre_temp_readtime+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:31
    1372:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1376:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <pre_psi_readtime>
    137a:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <pre_psi_readtime+0x1>
    137e:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pre_psi_readtime+0x2>
    1382:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <pre_psi_readtime+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:32
    1386:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    138a:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <pre_valve_close_time>
    138e:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <pre_valve_close_time+0x1>
    1392:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <pre_valve_close_time+0x2>
    1396:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <pre_valve_close_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:33
    139a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    139e:	60 93 5c 02 	sts	0x025C, r22	; 0x80025c <pre_eeprom_time>
    13a2:	70 93 5d 02 	sts	0x025D, r23	; 0x80025d <pre_eeprom_time+0x1>
    13a6:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <pre_eeprom_time+0x2>
    13aa:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <pre_eeprom_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:34
    13ae:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    13b2:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <pre_encodercheck_time>
    13b6:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <pre_encodercheck_time+0x1>
    13ba:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <pre_encodercheck_time+0x2>
    13be:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <pre_encodercheck_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:35
    13c2:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    13c6:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <pre_motor_stop_time>
    13ca:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <pre_motor_stop_time+0x1>
    13ce:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <pre_motor_stop_time+0x2>
    13d2:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <pre_motor_stop_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:36
    13d6:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    13da:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <pre_led_flash_time>
    13de:	70 93 51 02 	sts	0x0251, r23	; 0x800251 <pre_led_flash_time+0x1>
    13e2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <pre_led_flash_time+0x2>
    13e6:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <pre_led_flash_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:37
    13ea:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    13ee:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <pre_buzzer_tic>
    13f2:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <pre_buzzer_tic+0x1>
    13f6:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <pre_buzzer_tic+0x2>
    13fa:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <pre_buzzer_tic+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:38
    13fe:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1402:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pre_user_motor_worktime>
    1406:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pre_user_motor_worktime+0x1>
    140a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pre_user_motor_worktime+0x2>
    140e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pre_user_motor_worktime+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:40
    1412:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1416:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <pre_touch_stabil_time>
    141a:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <pre_touch_stabil_time+0x1>
    141e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pre_touch_stabil_time+0x2>
    1422:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <pre_touch_stabil_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:43
    1426:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    142a:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <pre_led_update_time>
    142e:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <pre_led_update_time+0x1>
    1432:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <pre_led_update_time+0x2>
    1436:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <pre_led_update_time+0x3>
E:\이동훈_개인\M_Cure\code\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:926
    143a:	08 95       	ret

0000143c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:331

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	08 95       	ret

00001442 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    1442:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <TwoWire::rxBufferLength>
    1446:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <TwoWire::rxBufferIndex>
    144a:	89 1b       	sub	r24, r25
    144c:	99 0b       	sbc	r25, r25
    144e:	08 95       	ret

00001450 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1450:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <TwoWire::rxBufferIndex>
    1454:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <TwoWire::rxBufferLength>
    1458:	2f ef       	ldi	r18, 0xFF	; 255
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	98 17       	cp	r25, r24
    145e:	48 f4       	brcc	.+18     	; 0x1472 <TwoWire::read()+0x22>
    1460:	e9 2f       	mov	r30, r25
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	e2 55       	subi	r30, 0x52	; 82
    1466:	fd 4f       	sbci	r31, 0xFD	; 253
    1468:	20 81       	ld	r18, Z
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	9f 5f       	subi	r25, 0xFF	; 255
    146e:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <TwoWire::rxBufferIndex>
    1472:	c9 01       	movw	r24, r18
    1474:	08 95       	ret

00001476 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1476:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <TwoWire::rxBufferIndex>
    147a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <TwoWire::rxBufferLength>
    147e:	e8 17       	cp	r30, r24
    1480:	30 f4       	brcc	.+12     	; 0x148e <TwoWire::peek()+0x18>
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	e2 55       	subi	r30, 0x52	; 82
    1486:	fd 4f       	sbci	r31, 0xFD	; 253
    1488:	80 81       	ld	r24, Z
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 95       	ret
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	9f ef       	ldi	r25, 0xFF	; 255
    1492:	08 95       	ret

00001494 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1494:	08 95       	ret

00001496 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	1f 92       	push	r1
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	69 83       	std	Y+1, r22	; 0x01
    14a2:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <TwoWire::transmitting>
    14a6:	22 23       	and	r18, r18
    14a8:	f9 f0       	breq	.+62     	; 0x14e8 <TwoWire::write(unsigned char)+0x52>
    14aa:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <TwoWire::txBufferLength>
    14ae:	20 32       	cpi	r18, 0x20	; 32
    14b0:	58 f0       	brcs	.+22     	; 0x14c8 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    14b2:	21 e0       	ldi	r18, 0x01	; 1
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	fc 01       	movw	r30, r24
    14b8:	33 83       	std	Z+3, r19	; 0x03
    14ba:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0f 90       	pop	r0
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret
    14c8:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <TwoWire::txBufferIndex>
    14cc:	e8 2f       	mov	r30, r24
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	e4 57       	subi	r30, 0x74	; 116
    14d2:	fd 4f       	sbci	r31, 0xFD	; 253
    14d4:	99 81       	ldd	r25, Y+1	; 0x01
    14d6:	90 83       	st	Z, r25
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <TwoWire::txBufferIndex>
    14de:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <TwoWire::txBufferLength>
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	ec cf       	rjmp	.-40     	; 0x14c0 <TwoWire::write(unsigned char)+0x2a>
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 b8 0a 	call	0x1570	; 0x1570 <twi_transmit>
    14f2:	f7 cf       	rjmp	.-18     	; 0x14e2 <TwoWire::write(unsigned char)+0x4c>

000014f4 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	7c 01       	movw	r14, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8a 01       	movw	r16, r20
    150a:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <TwoWire::transmitting>
    150e:	22 23       	and	r18, r18
    1510:	89 f0       	breq	.+34     	; 0x1534 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1512:	eb 01       	movw	r28, r22
    1514:	6b 01       	movw	r12, r22
    1516:	c4 0e       	add	r12, r20
    1518:	d5 1e       	adc	r13, r21
    151a:	cc 15       	cp	r28, r12
    151c:	dd 05       	cpc	r29, r13
    151e:	69 f0       	breq	.+26     	; 0x153a <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1520:	69 91       	ld	r22, Y+
    1522:	d7 01       	movw	r26, r14
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	01 90       	ld	r0, Z+
    152a:	f0 81       	ld	r31, Z
    152c:	e0 2d       	mov	r30, r0
    152e:	c7 01       	movw	r24, r14
    1530:	19 95       	eicall
    1532:	f3 cf       	rjmp	.-26     	; 0x151a <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1534:	64 2f       	mov	r22, r20
    1536:	0e 94 b8 0a 	call	0x1570	; 0x1570 <twi_transmit>
    153a:	c8 01       	movw	r24, r16
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	08 95       	ret

0000154e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    154e:	ed e7       	ldi	r30, 0x7D	; 125
    1550:	f2 e0       	ldi	r31, 0x02	; 2
    1552:	13 82       	std	Z+3, r1	; 0x03
    1554:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1556:	88 ee       	ldi	r24, 0xE8	; 232
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	84 83       	std	Z+4, r24	; 0x04
    1560:	95 83       	std	Z+5, r25	; 0x05
    1562:	a6 83       	std	Z+6, r26	; 0x06
    1564:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:54
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1566:	8a e1       	ldi	r24, 0x1A	; 26
    1568:	92 e0       	ldi	r25, 0x02	; 2
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:335
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    156e:	08 95       	ret

00001570 <twi_transmit>:
twi_transmit():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1570:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <twi_txBufferLength>
    1574:	26 0f       	add	r18, r22
    1576:	33 27       	eor	r19, r19
    1578:	33 1f       	adc	r19, r19
    157a:	21 32       	cpi	r18, 0x21	; 33
    157c:	31 05       	cpc	r19, r1
    157e:	ec f4       	brge	.+58     	; 0x15ba <twi_transmit+0x4a>
    1580:	20 91 3b 03 	lds	r18, 0x033B	; 0x80033b <twi_state>
    1584:	fc 01       	movw	r30, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	24 30       	cpi	r18, 0x04	; 4
    158c:	69 f0       	breq	.+26     	; 0x15a8 <twi_transmit+0x38>
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	08 95       	ret
    1592:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <twi_txBufferLength>
    1596:	21 91       	ld	r18, Z+
    1598:	ac 01       	movw	r20, r24
    159a:	4e 50       	subi	r20, 0x0E	; 14
    159c:	5d 4f       	sbci	r21, 0xFD	; 253
    159e:	a4 0f       	add	r26, r20
    15a0:	b5 2f       	mov	r27, r21
    15a2:	b1 1d       	adc	r27, r1
    15a4:	2c 93       	st	X, r18
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	86 17       	cp	r24, r22
    15aa:	98 f3       	brcs	.-26     	; 0x1592 <twi_transmit+0x22>
    15ac:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_txBufferLength>
    15b0:	68 0f       	add	r22, r24
    15b2:	60 93 f0 02 	sts	0x02F0, r22	; 0x8002f0 <twi_txBufferLength>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	08 95       	ret
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	08 95       	ret

000015be <twi_stop>:
twi_stop():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:368
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    15be:	85 ed       	ldi	r24, 0xD5	; 213
    15c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:372

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    15c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    15c8:	84 fd       	sbrc	r24, 4
    15ca:	fc cf       	rjmp	.-8      	; 0x15c4 <twi_stop+0x6>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:377
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    15cc:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <twi_state>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:378
}
    15d0:	08 95       	ret

000015d2 <twi_releaseBus>:
twi_releaseBus():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:389
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    15d2:	85 ec       	ldi	r24, 0xC5	; 197
    15d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:392

  // update twi state
  twi_state = TWI_READY;
    15d8:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <twi_state>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:393
}
    15dc:	08 95       	ret

000015de <__vector_39>:
__vector_39():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:396

ISR(TWI_vect)
{
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	11 24       	eor	r1, r1
    15e8:	0b b6       	in	r0, 0x3b	; 59
    15ea:	0f 92       	push	r0
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  switch(TW_STATUS){
    1604:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1608:	88 7f       	andi	r24, 0xF8	; 248
    160a:	80 36       	cpi	r24, 0x60	; 96
    160c:	09 f4       	brne	.+2      	; 0x1610 <__vector_39+0x32>
    160e:	4e c0       	rjmp	.+156    	; 0x16ac <__vector_39+0xce>
    1610:	08 f0       	brcs	.+2      	; 0x1614 <__vector_39+0x36>
    1612:	41 c0       	rjmp	.+130    	; 0x1696 <__vector_39+0xb8>
    1614:	88 32       	cpi	r24, 0x28	; 40
    1616:	09 f4       	brne	.+2      	; 0x161a <__vector_39+0x3c>
    1618:	aa c0       	rjmp	.+340    	; 0x176e <__vector_39+0x190>
    161a:	28 f5       	brcc	.+74     	; 0x1666 <__vector_39+0x88>
    161c:	80 31       	cpi	r24, 0x10	; 16
    161e:	09 f4       	brne	.+2      	; 0x1622 <__vector_39+0x44>
    1620:	9e c0       	rjmp	.+316    	; 0x175e <__vector_39+0x180>
    1622:	c8 f4       	brcc	.+50     	; 0x1656 <__vector_39+0x78>
    1624:	88 23       	and	r24, r24
    1626:	09 f4       	brne	.+2      	; 0x162a <__vector_39+0x4c>
    1628:	fb c0       	rjmp	.+502    	; 0x1820 <__vector_39+0x242>
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	09 f4       	brne	.+2      	; 0x1630 <__vector_39+0x52>
    162e:	97 c0       	rjmp	.+302    	; 0x175e <__vector_39+0x180>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1656:	88 31       	cpi	r24, 0x18	; 24
    1658:	09 f4       	brne	.+2      	; 0x165c <__vector_39+0x7e>
    165a:	89 c0       	rjmp	.+274    	; 0x176e <__vector_39+0x190>
    165c:	80 32       	cpi	r24, 0x20	; 32
    165e:	41 f7       	brne	.-48     	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:432
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1660:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <twi_error>
    1664:	15 c0       	rjmp	.+42     	; 0x1690 <__vector_39+0xb2>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1666:	80 34       	cpi	r24, 0x40	; 64
    1668:	09 f4       	brne	.+2      	; 0x166c <__vector_39+0x8e>
    166a:	9e c0       	rjmp	.+316    	; 0x17a8 <__vector_39+0x1ca>
    166c:	48 f4       	brcc	.+18     	; 0x1680 <__vector_39+0xa2>
    166e:	80 33       	cpi	r24, 0x30	; 48
    1670:	b9 f3       	breq	.-18     	; 0x1660 <__vector_39+0x82>
    1672:	88 33       	cpi	r24, 0x38	; 56
    1674:	e9 f6       	brne	.-70     	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:436
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1676:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <twi_error>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:437
      twi_releaseBus();
    167a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <twi_releaseBus>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:438
      break;
    167e:	d8 cf       	rjmp	.-80     	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1680:	80 35       	cpi	r24, 0x50	; 80
    1682:	09 f4       	brne	.+2      	; 0x1686 <__vector_39+0xa8>
    1684:	85 c0       	rjmp	.+266    	; 0x1790 <__vector_39+0x1b2>
    1686:	88 35       	cpi	r24, 0x58	; 88
    1688:	09 f4       	brne	.+2      	; 0x168c <__vector_39+0xae>
    168a:	96 c0       	rjmp	.+300    	; 0x17b8 <__vector_39+0x1da>
    168c:	88 34       	cpi	r24, 0x48	; 72
    168e:	81 f6       	brne	.-96     	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:555
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1690:	0e 94 df 0a 	call	0x15be	; 0x15be <twi_stop>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
      break;
  }
}
    1694:	cd cf       	rjmp	.-102    	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1696:	88 39       	cpi	r24, 0x98	; 152
    1698:	09 f4       	brne	.+2      	; 0x169c <__vector_39+0xbe>
    169a:	8c c0       	rjmp	.+280    	; 0x17b4 <__vector_39+0x1d6>
    169c:	38 f5       	brcc	.+78     	; 0x16ec <__vector_39+0x10e>
    169e:	88 37       	cpi	r24, 0x78	; 120
    16a0:	29 f0       	breq	.+10     	; 0x16ac <__vector_39+0xce>
    16a2:	50 f4       	brcc	.+20     	; 0x16b8 <__vector_39+0xda>
    16a4:	88 36       	cpi	r24, 0x68	; 104
    16a6:	11 f0       	breq	.+4      	; 0x16ac <__vector_39+0xce>
    16a8:	80 37       	cpi	r24, 0x70	; 112
    16aa:	11 f6       	brne	.-124    	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:478
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <twi_state>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:480
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    16b2:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <twi_rxBufferIndex>
    16b6:	57 c0       	rjmp	.+174    	; 0x1766 <__vector_39+0x188>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16b8:	88 38       	cpi	r24, 0x88	; 136
    16ba:	09 f4       	brne	.+2      	; 0x16be <__vector_39+0xe0>
    16bc:	7b c0       	rjmp	.+246    	; 0x17b4 <__vector_39+0x1d6>
    16be:	80 39       	cpi	r24, 0x90	; 144
    16c0:	19 f0       	breq	.+6      	; 0x16c8 <__vector_39+0xea>
    16c2:	80 38       	cpi	r24, 0x80	; 128
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <__vector_39+0xea>
    16c6:	b4 cf       	rjmp	.-152    	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:486
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    16c8:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <twi_rxBufferIndex>
    16cc:	80 32       	cpi	r24, 0x20	; 32
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <__vector_39+0xf4>
    16d0:	71 c0       	rjmp	.+226    	; 0x17b4 <__vector_39+0x1d6>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:488
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    16d2:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <twi_rxBufferIndex>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	8e 0f       	add	r24, r30
    16da:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <twi_rxBufferIndex>
    16de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	e0 53       	subi	r30, 0x30	; 48
    16e6:	fd 4f       	sbci	r31, 0xFD	; 253
    16e8:	80 83       	st	Z, r24
    16ea:	3d c0       	rjmp	.+122    	; 0x1766 <__vector_39+0x188>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16ec:	80 3b       	cpi	r24, 0xB0	; 176
    16ee:	39 f0       	breq	.+14     	; 0x16fe <__vector_39+0x120>
    16f0:	e0 f4       	brcc	.+56     	; 0x172a <__vector_39+0x14c>
    16f2:	80 3a       	cpi	r24, 0xA0	; 160
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <__vector_39+0x11a>
    16f6:	79 c0       	rjmp	.+242    	; 0x17ea <__vector_39+0x20c>
    16f8:	88 3a       	cpi	r24, 0xA8	; 168
    16fa:	09 f0       	breq	.+2      	; 0x16fe <__vector_39+0x120>
    16fc:	99 cf       	rjmp	.-206    	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:517

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <twi_state>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:519
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1704:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <twi_txBufferIndex>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:521
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1708:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <twi_txBufferLength>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:524
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    170c:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <twi_onSlaveTransmit>
    1710:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <twi_onSlaveTransmit+0x1>
    1714:	19 95       	eicall
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:526
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1716:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_txBufferLength>
    171a:	81 11       	cpse	r24, r1
    171c:	0f c0       	rjmp	.+30     	; 0x173c <__vector_39+0x15e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:527
        twi_txBufferLength = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <twi_txBufferLength>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:528
        twi_txBuffer[0] = 0x00;
    1724:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <twi_txBuffer>
    1728:	09 c0       	rjmp	.+18     	; 0x173c <__vector_39+0x15e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    172a:	80 3c       	cpi	r24, 0xC0	; 192
    172c:	09 f4       	brne	.+2      	; 0x1730 <__vector_39+0x152>
    172e:	76 c0       	rjmp	.+236    	; 0x181c <__vector_39+0x23e>
    1730:	88 3c       	cpi	r24, 0xC8	; 200
    1732:	09 f4       	brne	.+2      	; 0x1736 <__vector_39+0x158>
    1734:	73 c0       	rjmp	.+230    	; 0x181c <__vector_39+0x23e>
    1736:	88 3b       	cpi	r24, 0xB8	; 184
    1738:	09 f0       	breq	.+2      	; 0x173c <__vector_39+0x15e>
    173a:	7a cf       	rjmp	.-268    	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:534
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    173c:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <twi_txBufferIndex>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	8e 0f       	add	r24, r30
    1744:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <twi_txBufferIndex>
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	ee 50       	subi	r30, 0x0E	; 14
    174c:	fd 4f       	sbci	r31, 0xFD	; 253
    174e:	80 81       	ld	r24, Z
    1750:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1754:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <twi_txBufferIndex>
    1758:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <twi_txBufferLength>
    175c:	29 c0       	rjmp	.+82     	; 0x17b0 <__vector_39+0x1d2>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:402
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    175e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <twi_slarw>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1762:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1766:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    176c:	61 cf       	rjmp	.-318    	; 0x1630 <__vector_39+0x52>
__vector_39():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:410

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    176e:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <twi_masterBufferIndex>
    1772:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <twi_masterBufferLength>
    1776:	98 17       	cp	r25, r24
    1778:	58 f5       	brcc	.+86     	; 0x17d0 <__vector_39+0x1f2>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    177a:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <twi_masterBufferIndex>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8e 0f       	add	r24, r30
    1782:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <twi_masterBufferIndex>
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	ec 5e       	subi	r30, 0xEC	; 236
    178a:	fc 4f       	sbci	r31, 0xFC	; 252
    178c:	80 81       	ld	r24, Z
    178e:	e9 cf       	rjmp	.-46     	; 0x1762 <__vector_39+0x184>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:443
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1790:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <twi_masterBufferIndex>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	8e 0f       	add	r24, r30
    1798:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <twi_masterBufferIndex>
    179c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	ec 5e       	subi	r30, 0xEC	; 236
    17a4:	fc 4f       	sbci	r31, 0xFC	; 252
    17a6:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:447
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    17a8:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <twi_masterBufferIndex>
    17ac:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <twi_masterBufferLength>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17b0:	98 17       	cp	r25, r24
    17b2:	c8 f2       	brcs	.-78     	; 0x1766 <__vector_39+0x188>
twi_reply():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17b4:	85 e8       	ldi	r24, 0x85	; 133
    17b6:	d8 cf       	rjmp	.-80     	; 0x1768 <__vector_39+0x18a>
__vector_39():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:455
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    17b8:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <twi_masterBufferIndex>
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	8e 0f       	add	r24, r30
    17c0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <twi_masterBufferIndex>
    17c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	ec 5e       	subi	r30, 0xEC	; 236
    17cc:	fc 4f       	sbci	r31, 0xFC	; 252
    17ce:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:456
  if (twi_sendStop)
    17d0:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <twi_sendStop>
    17d4:	81 11       	cpse	r24, r1
    17d6:	5c cf       	rjmp	.-328    	; 0x1690 <__vector_39+0xb2>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:459
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <twi_inRepStart>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:463
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    17de:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:547
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    17e4:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <twi_state>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:548
      break;
    17e8:	23 cf       	rjmp	.-442    	; 0x1630 <__vector_39+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:497
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    17ea:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <twi_releaseBus>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:499
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    17ee:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <twi_rxBufferIndex>
    17f2:	80 32       	cpi	r24, 0x20	; 32
    17f4:	30 f4       	brcc	.+12     	; 0x1802 <__vector_39+0x224>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:500
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    17f6:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <twi_rxBufferIndex>
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	e0 53       	subi	r30, 0x30	; 48
    17fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1800:	10 82       	st	Z, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:503
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1802:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <twi_rxBufferIndex>
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <twi_onSlaveReceive>
    180c:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <twi_onSlaveReceive+0x1>
    1810:	80 ed       	ldi	r24, 0xD0	; 208
    1812:	92 e0       	ldi	r25, 0x02	; 2
    1814:	19 95       	eicall
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:505
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1816:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <twi_rxBufferIndex>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:506
      break;
    181a:	0a cf       	rjmp	.-492    	; 0x1630 <__vector_39+0x52>
twi_reply():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    181c:	85 ec       	ldi	r24, 0xC5	; 197
    181e:	e0 cf       	rjmp	.-64     	; 0x17e0 <__vector_39+0x202>
__vector_39():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:554

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1820:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <twi_error>
    1824:	35 cf       	rjmp	.-406    	; 0x1690 <__vector_39+0xb2>

00001826 <I2C::pullup(unsigned char) [clone .part.1]>:
_ZN3I2C6pullupEh():
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:822
  return (returnStatus);
}

uint8_t I2C::read(int address, int registerAddress, int numberBytes)
{
  return (read((uint8_t)address, (uint8_t)registerAddress, (uint8_t)numberBytes));
    1826:	58 9a       	sbi	0x0b, 0	; 11
    1828:	59 9a       	sbi	0x0b, 1	; 11
    182a:	08 95       	ret

0000182c <I2C::begin()>:
    182c:	0e 94 13 0c 	call	0x1826	; 0x1826 <I2C::pullup(unsigned char) [clone .part.1]>
_ZN3I2C5beginEv():
    1830:	e9 eb       	ldi	r30, 0xB9	; 185
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8e 7f       	andi	r24, 0xFE	; 254
    1838:	80 83       	st	Z, r24
    183a:	80 81       	ld	r24, Z
    183c:	8d 7f       	andi	r24, 0xFD	; 253
    183e:	80 83       	st	Z, r24
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1846:	84 e4       	ldi	r24, 0x44	; 68
    1848:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    184c:	08 95       	ret

0000184e <I2C::timeOut(unsigned int)>:
_ZN3I2C7timeOutEj():
    184e:	70 93 5f 03 	sts	0x035F, r23	; 0x80035f <I2C::timeOutDelay+0x1>
    1852:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <I2C::timeOutDelay>
    1856:	08 95       	ret

00001858 <I2C::pullup(unsigned char)>:
_ZN3I2C6pullupEh():
    1858:	61 11       	cpse	r22, r1
    185a:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <I2C::pullup(unsigned char) [clone .part.1]>
    185e:	58 98       	cbi	0x0b, 0	; 11
    1860:	59 98       	cbi	0x0b, 1	; 11
    1862:	08 95       	ret

00001864 <I2C::_start()>:
_ZN3I2C6_startEv():
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1870:	6b 01       	movw	r12, r22
    1872:	7c 01       	movw	r14, r24
    1874:	84 ea       	ldi	r24, 0xA4	; 164
    1876:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    187a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    187e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    1882:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1886:	27 fd       	sbrc	r18, 7
    1888:	20 c0       	rjmp	.+64     	; 0x18ca <I2C::_start()+0x66>
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	d1 f3       	breq	.-12     	; 0x1882 <I2C::_start()+0x1e>
    188e:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1892:	ab 01       	movw	r20, r22
    1894:	bc 01       	movw	r22, r24
    1896:	4c 19       	sub	r20, r12
    1898:	5d 09       	sbc	r21, r13
    189a:	6e 09       	sbc	r22, r14
    189c:	7f 09       	sbc	r23, r15
    189e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    18a2:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	48 17       	cp	r20, r24
    18ac:	59 07       	cpc	r21, r25
    18ae:	6a 07       	cpc	r22, r26
    18b0:	7b 07       	cpc	r23, r27
    18b2:	18 f3       	brcs	.-58     	; 0x187a <I2C::_start()+0x16>
_ZN3I2C6lockUpEv():
    18b4:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    18b8:	84 e4       	ldi	r24, 0x44	; 68
    18ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C6_startEv():
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	ff 90       	pop	r15
    18c2:	ef 90       	pop	r14
    18c4:	df 90       	pop	r13
    18c6:	cf 90       	pop	r12
    18c8:	08 95       	ret
    18ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    18ce:	88 7f       	andi	r24, 0xF8	; 248
    18d0:	88 30       	cpi	r24, 0x08	; 8
    18d2:	b9 f0       	breq	.+46     	; 0x1902 <I2C::_start()+0x9e>
    18d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    18d8:	88 7f       	andi	r24, 0xF8	; 248
    18da:	80 31       	cpi	r24, 0x10	; 16
    18dc:	91 f0       	breq	.+36     	; 0x1902 <I2C::_start()+0x9e>
    18de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    18e2:	88 7f       	andi	r24, 0xF8	; 248
    18e4:	88 33       	cpi	r24, 0x38	; 56
    18e6:	49 f4       	brne	.+18     	; 0x18fa <I2C::_start()+0x96>
    18e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    18ec:	88 7f       	andi	r24, 0xF8	; 248
_ZN3I2C6lockUpEv():
    18ee:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    18f2:	94 e4       	ldi	r25, 0x44	; 68
    18f4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    18f8:	e3 cf       	rjmp	.-58     	; 0x18c0 <I2C::_start()+0x5c>
_ZN3I2C6_startEv():
    18fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    18fe:	88 7f       	andi	r24, 0xF8	; 248
    1900:	df cf       	rjmp	.-66     	; 0x18c0 <I2C::_start()+0x5c>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	dd cf       	rjmp	.-70     	; 0x18c0 <I2C::_start()+0x5c>

00001906 <I2C::_receiveByte(unsigned char)>:
_ZN3I2C12_receiveByteEh():
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	cf 93       	push	r28
    1910:	c6 2f       	mov	r28, r22
    1912:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1916:	6b 01       	movw	r12, r22
    1918:	7c 01       	movw	r14, r24
    191a:	84 ec       	ldi	r24, 0xC4	; 196
    191c:	c1 11       	cpse	r28, r1
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <I2C::_receiveByte(unsigned char)+0x1c>
    1920:	84 e8       	ldi	r24, 0x84	; 132
    1922:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1926:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    192a:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    192e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1932:	27 fd       	sbrc	r18, 7
    1934:	21 c0       	rjmp	.+66     	; 0x1978 <I2C::_receiveByte(unsigned char)+0x72>
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	d1 f3       	breq	.-12     	; 0x192e <I2C::_receiveByte(unsigned char)+0x28>
    193a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    193e:	ab 01       	movw	r20, r22
    1940:	bc 01       	movw	r22, r24
    1942:	4c 19       	sub	r20, r12
    1944:	5d 09       	sbc	r21, r13
    1946:	6e 09       	sbc	r22, r14
    1948:	7f 09       	sbc	r23, r15
    194a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    194e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	a0 e0       	ldi	r26, 0x00	; 0
    1956:	48 17       	cp	r20, r24
    1958:	59 07       	cpc	r21, r25
    195a:	6a 07       	cpc	r22, r26
    195c:	7b 07       	cpc	r23, r27
    195e:	18 f3       	brcs	.-58     	; 0x1926 <I2C::_receiveByte(unsigned char)+0x20>
_ZN3I2C6lockUpEv():
    1960:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1964:	84 e4       	ldi	r24, 0x44	; 68
    1966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C12_receiveByteEh():
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	cf 91       	pop	r28
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	08 95       	ret
    1978:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    197c:	88 7f       	andi	r24, 0xF8	; 248
    197e:	88 33       	cpi	r24, 0x38	; 56
    1980:	49 f4       	brne	.+18     	; 0x1994 <I2C::_receiveByte(unsigned char)+0x8e>
    1982:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1986:	88 7f       	andi	r24, 0xF8	; 248
_ZN3I2C6lockUpEv():
    1988:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    198c:	94 e4       	ldi	r25, 0x44	; 68
    198e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1992:	ec cf       	rjmp	.-40     	; 0x196c <I2C::_receiveByte(unsigned char)+0x66>
_ZN3I2C12_receiveByteEh():
    1994:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1998:	88 7f       	andi	r24, 0xF8	; 248
    199a:	e8 cf       	rjmp	.-48     	; 0x196c <I2C::_receiveByte(unsigned char)+0x66>

0000199c <I2C::_stop()>:
_ZN3I2C5_stopEv():
    199c:	cf 92       	push	r12
    199e:	df 92       	push	r13
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	84 e9       	ldi	r24, 0x94	; 148
    19ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    19b2:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    19b6:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    19ba:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    19be:	24 ff       	sbrs	r18, 4
    19c0:	20 c0       	rjmp	.+64     	; 0x1a02 <I2C::_stop()+0x66>
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	d1 f3       	breq	.-12     	; 0x19ba <I2C::_stop()+0x1e>
    19c6:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    19ca:	ab 01       	movw	r20, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	4c 19       	sub	r20, r12
    19d0:	5d 09       	sbc	r21, r13
    19d2:	6e 09       	sbc	r22, r14
    19d4:	7f 09       	sbc	r23, r15
    19d6:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    19da:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	a0 e0       	ldi	r26, 0x00	; 0
    19e2:	48 17       	cp	r20, r24
    19e4:	59 07       	cpc	r21, r25
    19e6:	6a 07       	cpc	r22, r26
    19e8:	7b 07       	cpc	r23, r27
    19ea:	18 f3       	brcs	.-58     	; 0x19b2 <I2C::_stop()+0x16>
_ZN3I2C6lockUpEv():
    19ec:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    19f0:	84 e4       	ldi	r24, 0x44	; 68
    19f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C5_stopEv():
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	08 95       	ret
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	f9 cf       	rjmp	.-14     	; 0x19f8 <I2C::_stop()+0x5c>

00001a06 <I2C::_sendAddress(unsigned char)>:
_ZN3I2C12_sendAddressEh():
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	8c 01       	movw	r16, r24
    1a16:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1a1a:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1a1e:	6b 01       	movw	r12, r22
    1a20:	7c 01       	movw	r14, r24
    1a22:	84 e8       	ldi	r24, 0x84	; 132
    1a24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a28:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    1a2c:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    1a30:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a34:	27 fd       	sbrc	r18, 7
    1a36:	24 c0       	rjmp	.+72     	; 0x1a80 <I2C::_sendAddress(unsigned char)+0x7a>
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	d1 f3       	breq	.-12     	; 0x1a30 <I2C::_sendAddress(unsigned char)+0x2a>
    1a3c:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1a40:	ab 01       	movw	r20, r22
    1a42:	bc 01       	movw	r22, r24
    1a44:	4c 19       	sub	r20, r12
    1a46:	5d 09       	sbc	r21, r13
    1a48:	6e 09       	sbc	r22, r14
    1a4a:	7f 09       	sbc	r23, r15
    1a4c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    1a50:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	a0 e0       	ldi	r26, 0x00	; 0
    1a58:	48 17       	cp	r20, r24
    1a5a:	59 07       	cpc	r21, r25
    1a5c:	6a 07       	cpc	r22, r26
    1a5e:	7b 07       	cpc	r23, r27
    1a60:	18 f3       	brcs	.-58     	; 0x1a28 <I2C::_sendAddress(unsigned char)+0x22>
_ZN3I2C6lockUpEv():
    1a62:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a66:	84 e4       	ldi	r24, 0x44	; 68
    1a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C12_sendAddressEh():
    1a6c:	c1 e0       	ldi	r28, 0x01	; 1
    1a6e:	8c 2f       	mov	r24, r28
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	ef 90       	pop	r14
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
    1a7e:	08 95       	ret
    1a80:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a84:	88 7f       	andi	r24, 0xF8	; 248
    1a86:	88 31       	cpi	r24, 0x18	; 24
    1a88:	e1 f0       	breq	.+56     	; 0x1ac2 <I2C::_sendAddress(unsigned char)+0xbc>
    1a8a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a8e:	88 7f       	andi	r24, 0xF8	; 248
    1a90:	80 34       	cpi	r24, 0x40	; 64
    1a92:	b9 f0       	breq	.+46     	; 0x1ac2 <I2C::_sendAddress(unsigned char)+0xbc>
    1a94:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a98:	c8 7f       	andi	r28, 0xF8	; 248
    1a9a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a9e:	88 7f       	andi	r24, 0xF8	; 248
    1aa0:	80 32       	cpi	r24, 0x20	; 32
    1aa2:	59 f0       	breq	.+22     	; 0x1aba <I2C::_sendAddress(unsigned char)+0xb4>
    1aa4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1aa8:	88 7f       	andi	r24, 0xF8	; 248
    1aaa:	88 34       	cpi	r24, 0x48	; 72
    1aac:	31 f0       	breq	.+12     	; 0x1aba <I2C::_sendAddress(unsigned char)+0xb4>
_ZN3I2C6lockUpEv():
    1aae:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ab2:	84 e4       	ldi	r24, 0x44	; 68
    1ab4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ab8:	da cf       	rjmp	.-76     	; 0x1a6e <I2C::_sendAddress(unsigned char)+0x68>
_ZN3I2C12_sendAddressEh():
    1aba:	c8 01       	movw	r24, r16
    1abc:	0e 94 ce 0c 	call	0x199c	; 0x199c <I2C::_stop()>
    1ac0:	d6 cf       	rjmp	.-84     	; 0x1a6e <I2C::_sendAddress(unsigned char)+0x68>
    1ac2:	c0 e0       	ldi	r28, 0x00	; 0
    1ac4:	d4 cf       	rjmp	.-88     	; 0x1a6e <I2C::_sendAddress(unsigned char)+0x68>

00001ac6 <I2C::_sendByte(unsigned char)>:
_ZN3I2C9_sendByteEh():
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	8c 01       	movw	r16, r24
    1ad6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1ada:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1ade:	6b 01       	movw	r12, r22
    1ae0:	7c 01       	movw	r14, r24
    1ae2:	84 e8       	ldi	r24, 0x84	; 132
    1ae4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ae8:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    1aec:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    1af0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1af4:	27 fd       	sbrc	r18, 7
    1af6:	24 c0       	rjmp	.+72     	; 0x1b40 <I2C::_sendByte(unsigned char)+0x7a>
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	d1 f3       	breq	.-12     	; 0x1af0 <I2C::_sendByte(unsigned char)+0x2a>
    1afc:	0e 94 94 10 	call	0x2128	; 0x2128 <millis>
    1b00:	ab 01       	movw	r20, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	4c 19       	sub	r20, r12
    1b06:	5d 09       	sbc	r21, r13
    1b08:	6e 09       	sbc	r22, r14
    1b0a:	7f 09       	sbc	r23, r15
    1b0c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <I2C::timeOutDelay>
    1b10:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <I2C::timeOutDelay+0x1>
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	48 17       	cp	r20, r24
    1b1a:	59 07       	cpc	r21, r25
    1b1c:	6a 07       	cpc	r22, r26
    1b1e:	7b 07       	cpc	r23, r27
    1b20:	18 f3       	brcs	.-58     	; 0x1ae8 <I2C::_sendByte(unsigned char)+0x22>
_ZN3I2C6lockUpEv():
    1b22:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b26:	84 e4       	ldi	r24, 0x44	; 68
    1b28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C9_sendByteEh():
    1b2c:	c1 e0       	ldi	r28, 0x01	; 1
    1b2e:	8c 2f       	mov	r24, r28
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	08 95       	ret
    1b40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1b44:	88 7f       	andi	r24, 0xF8	; 248
    1b46:	c0 e0       	ldi	r28, 0x00	; 0
    1b48:	88 32       	cpi	r24, 0x28	; 40
    1b4a:	89 f3       	breq	.-30     	; 0x1b2e <I2C::_sendByte(unsigned char)+0x68>
    1b4c:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1b50:	c8 7f       	andi	r28, 0xF8	; 248
    1b52:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1b56:	88 7f       	andi	r24, 0xF8	; 248
    1b58:	80 33       	cpi	r24, 0x30	; 48
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <I2C::_sendByte(unsigned char)+0x9e>
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	0e 94 ce 0c 	call	0x199c	; 0x199c <I2C::_stop()>
    1b62:	e5 cf       	rjmp	.-54     	; 0x1b2e <I2C::_sendByte(unsigned char)+0x68>
_ZN3I2C6lockUpEv():
    1b64:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b68:	84 e4       	ldi	r24, 0x44	; 68
    1b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b6e:	df cf       	rjmp	.-66     	; 0x1b2e <I2C::_sendByte(unsigned char)+0x68>

00001b70 <I2C::write(unsigned char, unsigned char, unsigned char)>:
_ZN3I2C5writeEhhh():
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
    1b7c:	16 2f       	mov	r17, r22
    1b7e:	f4 2e       	mov	r15, r20
    1b80:	02 2f       	mov	r16, r18
    1b82:	18 82       	st	Y, r1
    1b84:	0e 94 32 0c 	call	0x1864	; 0x1864 <I2C::_start()>
    1b88:	88 83       	st	Y, r24
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	16 c0       	rjmp	.+44     	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1b8e:	61 2f       	mov	r22, r17
    1b90:	66 0f       	add	r22, r22
    1b92:	ce 01       	movw	r24, r28
    1b94:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <I2C::_sendAddress(unsigned char)>
    1b98:	88 83       	st	Y, r24
    1b9a:	88 23       	and	r24, r24
    1b9c:	21 f0       	breq	.+8      	; 0x1ba6 <I2C::write(unsigned char, unsigned char, unsigned char)+0x36>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	61 f4       	brne	.+24     	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	0a c0       	rjmp	.+20     	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1ba6:	6f 2d       	mov	r22, r15
    1ba8:	ce 01       	movw	r24, r28
    1baa:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <I2C::_sendByte(unsigned char)>
    1bae:	88 83       	st	Y, r24
    1bb0:	88 23       	and	r24, r24
    1bb2:	49 f0       	breq	.+18     	; 0x1bc6 <I2C::write(unsigned char, unsigned char, unsigned char)+0x56>
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	08 95       	ret
    1bc6:	60 2f       	mov	r22, r16
    1bc8:	ce 01       	movw	r24, r28
    1bca:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <I2C::_sendByte(unsigned char)>
    1bce:	88 83       	st	Y, r24
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	f0 cf       	rjmp	.-32     	; 0x1bb4 <I2C::write(unsigned char, unsigned char, unsigned char)+0x44>
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	0e 94 ce 0c 	call	0x199c	; 0x199c <I2C::_stop()>
    1bda:	88 83       	st	Y, r24
    1bdc:	88 23       	and	r24, r24
    1bde:	69 f3       	breq	.-38     	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	59 f7       	brne	.-42     	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1be4:	87 e0       	ldi	r24, 0x07	; 7
    1be6:	e9 cf       	rjmp	.-46     	; 0x1bba <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>

00001be8 <I2C::write(int, int, int)>:
_ZN3I2C5writeEiii():
    1be8:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <I2C::write(unsigned char, unsigned char, unsigned char)>

00001bec <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)>:
_ZN3I2C4readEhhhPh():
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1017
 *          NOTE: Unlike the Wire library the read operation will not return the
 *          number of bytes read, instead it will return the error code which
 *          can be used for debugging.
 */
uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes, uint8_t *dataBuffer)
{
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	f6 2e       	mov	r15, r22
    1bfe:	e4 2e       	mov	r14, r20
    1c00:	d2 2e       	mov	r13, r18
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1018
  bytesAvailable = 0;
    1c02:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <I2C::bytesAvailable>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1019
  bufferIndex = 0;
    1c06:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <I2C::bufferIndex>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1020
  if (numberBytes == 0)
    1c0a:	21 11       	cpse	r18, r1
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x26>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1022
  {
    numberBytes++;
    1c0e:	dd 24       	eor	r13, r13
    1c10:	d3 94       	inc	r13
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1024
  }
  nack = numberBytes - 1;
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	8d 0d       	add	r24, r13
    1c16:	89 83       	std	Y+1, r24	; 0x01
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1025
  returnStatus = 0;
    1c18:	18 82       	st	Y, r1
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1026
  returnStatus = _start();
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	0e 94 32 0c 	call	0x1864	; 0x1864 <I2C::_start()>
    1c20:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1027
  if (returnStatus)
    1c22:	81 11       	cpse	r24, r1
    1c24:	3a c0       	rjmp	.+116    	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1031
  {
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_W(address));
    1c26:	ff 0c       	add	r15, r15
    1c28:	6f 2d       	mov	r22, r15
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <I2C::_sendAddress(unsigned char)>
    1c30:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1032
  if (returnStatus)
    1c32:	88 23       	and	r24, r24
    1c34:	21 f0       	breq	.+8      	; 0x1c3e <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x52>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1034
  {
    if (returnStatus == 1)
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	81 f5       	brne	.+96     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1036
    {
      return (2);
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	2e c0       	rjmp	.+92     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1040
    }
    return (returnStatus);
  }
  returnStatus = _sendByte(registerAddress);
    1c3e:	6e 2d       	mov	r22, r14
    1c40:	ce 01       	movw	r24, r28
    1c42:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <I2C::_sendByte(unsigned char)>
    1c46:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1041
  if (returnStatus)
    1c48:	88 23       	and	r24, r24
    1c4a:	21 f0       	breq	.+8      	; 0x1c54 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x68>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1043
  {
    if (returnStatus == 1)
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	29 f5       	brne	.+74     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1045
    {
      return (3);
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	23 c0       	rjmp	.+70     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1049
    }
    return (returnStatus);
  }
  returnStatus = _start();
    1c54:	ce 01       	movw	r24, r28
    1c56:	0e 94 32 0c 	call	0x1864	; 0x1864 <I2C::_start()>
    1c5a:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1050
  if (returnStatus)
    1c5c:	88 23       	and	r24, r24
    1c5e:	21 f0       	breq	.+8      	; 0x1c68 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x7c>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1052
  {
    if (returnStatus == 1)
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	d9 f4       	brne	.+54     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1054
    {
      return (4);
    1c64:	84 e0       	ldi	r24, 0x04	; 4
    1c66:	19 c0       	rjmp	.+50     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1058
    }
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_R(address));
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	6f 0d       	add	r22, r15
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <I2C::_sendAddress(unsigned char)>
    1c72:	88 83       	st	Y, r24
    1c74:	78 01       	movw	r14, r16
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1067
    {
      return (5);
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
    1c76:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1059
      return (4);
    }
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_R(address));
  if (returnStatus)
    1c78:	88 23       	and	r24, r24
    1c7a:	21 f0       	breq	.+8      	; 0x1c84 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x98>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1061
  {
    if (returnStatus == 1)
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	69 f4       	brne	.+26     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1063
    {
      return (5);
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1069
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
  {
    if (i == nack)
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	81 13       	cpse	r24, r17
    1c88:	28 c0       	rjmp	.+80     	; 0x1cda <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xee>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1071
    {
      returnStatus = _receiveByte(0);
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	0e 94 83 0c 	call	0x1906	; 0x1906 <I2C::_receiveByte(unsigned char)>
    1c92:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1072
      if (returnStatus == 1)
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	49 f4       	brne	.+18     	; 0x1caa <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xbe>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1074
      {
        return (6);
    1c98:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1107
      return (7);
    }
    return (returnStatus);
  }
  return (returnStatus);
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	08 95       	ret
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1076
      returnStatus = _receiveByte(0);
      if (returnStatus == 1)
      {
        return (6);
      }
      if (returnStatus != MR_DATA_NACK)
    1caa:	88 35       	cpi	r24, 0x58	; 88
    1cac:	b1 f7       	brne	.-20     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1093
      if (returnStatus != MR_DATA_ACK)
      {
        return (returnStatus);
      }
    }
    dataBuffer[i] = TWDR;
    1cae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1cb2:	f7 01       	movw	r30, r14
    1cb4:	81 93       	st	Z+, r24
    1cb6:	7f 01       	movw	r14, r30
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1094
    bytesAvailable = i + 1;
    1cb8:	1f 5f       	subi	r17, 0xFF	; 255
    1cba:	10 93 62 03 	sts	0x0362, r17	; 0x800362 <I2C::bytesAvailable>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1095
    totalBytes = i + 1;
    1cbe:	10 93 60 03 	sts	0x0360, r17	; 0x800360 <I2C::totalBytes>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1067
    {
      return (5);
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
    1cc2:	1d 11       	cpse	r17, r13
    1cc4:	df cf       	rjmp	.-66     	; 0x1c84 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x98>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1097
    }
    dataBuffer[i] = TWDR;
    bytesAvailable = i + 1;
    totalBytes = i + 1;
  }
  returnStatus = _stop();
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	0e 94 ce 0c 	call	0x199c	; 0x199c <I2C::_stop()>
    1ccc:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1098
  if (returnStatus)
    1cce:	88 23       	and	r24, r24
    1cd0:	21 f3       	breq	.-56     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1100
  {
    if (returnStatus == 1)
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	11 f7       	brne	.-60     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1102
    {
      return (7);
    1cd6:	87 e0       	ldi	r24, 0x07	; 7
    1cd8:	e0 cf       	rjmp	.-64     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1083
        return (returnStatus);
      }
    }
    else
    {
      returnStatus = _receiveByte(1);
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	ce 01       	movw	r24, r28
    1cde:	0e 94 83 0c 	call	0x1906	; 0x1906 <I2C::_receiveByte(unsigned char)>
    1ce2:	88 83       	st	Y, r24
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1084
      if (returnStatus == 1)
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	c1 f2       	breq	.-80     	; 0x1c98 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xac>
C:\Users\LDH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1088
      {
        return (6);
      }
      if (returnStatus != MR_DATA_ACK)
    1ce8:	80 35       	cpi	r24, 0x50	; 80
    1cea:	09 f3       	breq	.-62     	; 0x1cae <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xc2>
    1cec:	d6 cf       	rjmp	.-84     	; 0x1c9a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>

00001cee <nothing>:
nothing():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:323
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
          break;
    1cee:	08 95       	ret

00001cf0 <attachInterrupt>:
attachInterrupt():
    1cf0:	88 30       	cpi	r24, 0x08	; 8
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <attachInterrupt+0x6>
    1cf4:	76 c0       	rjmp	.+236    	; 0x1de2 <attachInterrupt+0xf2>
    1cf6:	e8 2f       	mov	r30, r24
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	ec 5f       	subi	r30, 0xFC	; 252
    1d00:	fd 4f       	sbci	r31, 0xFD	; 253
    1d02:	71 83       	std	Z+1, r23	; 0x01
    1d04:	60 83       	st	Z, r22
    1d06:	81 50       	subi	r24, 0x01	; 1
    1d08:	87 30       	cpi	r24, 0x07	; 7
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <attachInterrupt+0x1e>
    1d0c:	3d c0       	rjmp	.+122    	; 0x1d88 <attachInterrupt+0x98>
    1d0e:	e8 2f       	mov	r30, r24
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	88 27       	eor	r24, r24
    1d14:	e1 57       	subi	r30, 0x71	; 113
    1d16:	f1 4f       	sbci	r31, 0xF1	; 241
    1d18:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1a:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__tablejump2__>
    1d1e:	cc 0e       	add	r12, r28
    1d20:	96 0e       	add	r9, r22
    1d22:	9e 0e       	add	r9, r30
    1d24:	aa 0e       	add	r10, r26
    1d26:	b7 0e       	add	r11, r23
    1d28:	d8 0e       	add	r13, r24
    1d2a:	e5 0e       	add	r14, r21
    1d2c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d30:	8c 7f       	andi	r24, 0xFC	; 252
    1d32:	48 2b       	or	r20, r24
    1d34:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d38:	e8 9a       	sbi	0x1d, 0	; 29
    1d3a:	08 95       	ret
    1d3c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d40:	83 7f       	andi	r24, 0xF3	; 243
    1d42:	44 0f       	add	r20, r20
    1d44:	55 1f       	adc	r21, r21
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	48 2b       	or	r20, r24
    1d4c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d50:	e9 9a       	sbi	0x1d, 1	; 29
    1d52:	08 95       	ret
    1d54:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d58:	8f 7c       	andi	r24, 0xCF	; 207
    1d5a:	74 e0       	ldi	r23, 0x04	; 4
    1d5c:	44 0f       	add	r20, r20
    1d5e:	55 1f       	adc	r21, r21
    1d60:	7a 95       	dec	r23
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <attachInterrupt+0x6c>
    1d64:	48 2b       	or	r20, r24
    1d66:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d6a:	ea 9a       	sbi	0x1d, 2	; 29
    1d6c:	08 95       	ret
    1d6e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d72:	8f 73       	andi	r24, 0x3F	; 63
    1d74:	66 e0       	ldi	r22, 0x06	; 6
    1d76:	44 0f       	add	r20, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	6a 95       	dec	r22
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <attachInterrupt+0x86>
    1d7e:	48 2b       	or	r20, r24
    1d80:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    1d84:	eb 9a       	sbi	0x1d, 3	; 29
    1d86:	08 95       	ret
    1d88:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1d8c:	8c 7f       	andi	r24, 0xFC	; 252
    1d8e:	48 2b       	or	r20, r24
    1d90:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1d94:	ec 9a       	sbi	0x1d, 4	; 29
    1d96:	08 95       	ret
    1d98:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1d9c:	83 7f       	andi	r24, 0xF3	; 243
    1d9e:	44 0f       	add	r20, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	44 0f       	add	r20, r20
    1da4:	55 1f       	adc	r21, r21
    1da6:	48 2b       	or	r20, r24
    1da8:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1dac:	ed 9a       	sbi	0x1d, 5	; 29
    1dae:	08 95       	ret
    1db0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1db4:	8f 7c       	andi	r24, 0xCF	; 207
    1db6:	24 e0       	ldi	r18, 0x04	; 4
    1db8:	44 0f       	add	r20, r20
    1dba:	55 1f       	adc	r21, r21
    1dbc:	2a 95       	dec	r18
    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <attachInterrupt+0xc8>
    1dc0:	48 2b       	or	r20, r24
    1dc2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1dc6:	ee 9a       	sbi	0x1d, 6	; 29
    1dc8:	08 95       	ret
    1dca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1dce:	8f 73       	andi	r24, 0x3F	; 63
    1dd0:	96 e0       	ldi	r25, 0x06	; 6
    1dd2:	44 0f       	add	r20, r20
    1dd4:	55 1f       	adc	r21, r21
    1dd6:	9a 95       	dec	r25
    1dd8:	e1 f7       	brne	.-8      	; 0x1dd2 <attachInterrupt+0xe2>
    1dda:	48 2b       	or	r20, r24
    1ddc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    1de0:	ef 9a       	sbi	0x1d, 7	; 29
    1de2:	08 95       	ret

00001de4 <__vector_1>:
__vector_1():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:438
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega640, ATmega1280, ATmega2560 - Arduino MEGA compatible pinout
#elif defined(MEGACORE_100_PIN_MEGA_PINOUT) && (defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__))
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    1de4:	1f 92       	push	r1
    1de6:	0f 92       	push	r0
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	0b b6       	in	r0, 0x3b	; 59
    1df0:	0f 92       	push	r0
    1df2:	2f 93       	push	r18
    1df4:	3f 93       	push	r19
    1df6:	4f 93       	push	r20
    1df8:	5f 93       	push	r21
    1dfa:	6f 93       	push	r22
    1dfc:	7f 93       	push	r23
    1dfe:	8f 93       	push	r24
    1e00:	9f 93       	push	r25
    1e02:	af 93       	push	r26
    1e04:	bf 93       	push	r27
    1e06:	ef 93       	push	r30
    1e08:	ff 93       	push	r31
    1e0a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x4>
    1e0e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x5>
    1e12:	19 95       	eicall
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	bf 91       	pop	r27
    1e1a:	af 91       	pop	r26
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	7f 91       	pop	r23
    1e22:	6f 91       	pop	r22
    1e24:	5f 91       	pop	r21
    1e26:	4f 91       	pop	r20
    1e28:	3f 91       	pop	r19
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0b be       	out	0x3b, r0	; 59
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <__vector_2>:
__vector_2():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:439
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	11 24       	eor	r1, r1
    1e44:	0b b6       	in	r0, 0x3b	; 59
    1e46:	0f 92       	push	r0
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	5f 93       	push	r21
    1e50:	6f 93       	push	r22
    1e52:	7f 93       	push	r23
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
    1e60:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x6>
    1e64:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x7>
    1e68:	19 95       	eicall
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0b be       	out	0x3b, r0	; 59
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

00001e90 <__vector_3>:
__vector_3():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:440
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    1e90:	1f 92       	push	r1
    1e92:	0f 92       	push	r0
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	0f 92       	push	r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	5f 93       	push	r21
    1ea6:	6f 93       	push	r22
    1ea8:	7f 93       	push	r23
    1eaa:	8f 93       	push	r24
    1eac:	9f 93       	push	r25
    1eae:	af 93       	push	r26
    1eb0:	bf 93       	push	r27
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
    1eb6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x8>
    1eba:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x9>
    1ebe:	19 95       	eicall
    1ec0:	ff 91       	pop	r31
    1ec2:	ef 91       	pop	r30
    1ec4:	bf 91       	pop	r27
    1ec6:	af 91       	pop	r26
    1ec8:	9f 91       	pop	r25
    1eca:	8f 91       	pop	r24
    1ecc:	7f 91       	pop	r23
    1ece:	6f 91       	pop	r22
    1ed0:	5f 91       	pop	r21
    1ed2:	4f 91       	pop	r20
    1ed4:	3f 91       	pop	r19
    1ed6:	2f 91       	pop	r18
    1ed8:	0f 90       	pop	r0
    1eda:	0b be       	out	0x3b, r0	; 59
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_4>:
__vector_4():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:441
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	0b b6       	in	r0, 0x3b	; 59
    1ef2:	0f 92       	push	r0
    1ef4:	2f 93       	push	r18
    1ef6:	3f 93       	push	r19
    1ef8:	4f 93       	push	r20
    1efa:	5f 93       	push	r21
    1efc:	6f 93       	push	r22
    1efe:	7f 93       	push	r23
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	af 93       	push	r26
    1f06:	bf 93       	push	r27
    1f08:	ef 93       	push	r30
    1f0a:	ff 93       	push	r31
    1f0c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0xa>
    1f10:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0xb>
    1f14:	19 95       	eicall
    1f16:	ff 91       	pop	r31
    1f18:	ef 91       	pop	r30
    1f1a:	bf 91       	pop	r27
    1f1c:	af 91       	pop	r26
    1f1e:	9f 91       	pop	r25
    1f20:	8f 91       	pop	r24
    1f22:	7f 91       	pop	r23
    1f24:	6f 91       	pop	r22
    1f26:	5f 91       	pop	r21
    1f28:	4f 91       	pop	r20
    1f2a:	3f 91       	pop	r19
    1f2c:	2f 91       	pop	r18
    1f2e:	0f 90       	pop	r0
    1f30:	0b be       	out	0x3b, r0	; 59
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <__vector_5>:
__vector_5():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:442
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	0b b6       	in	r0, 0x3b	; 59
    1f48:	0f 92       	push	r0
    1f4a:	2f 93       	push	r18
    1f4c:	3f 93       	push	r19
    1f4e:	4f 93       	push	r20
    1f50:	5f 93       	push	r21
    1f52:	6f 93       	push	r22
    1f54:	7f 93       	push	r23
    1f56:	8f 93       	push	r24
    1f58:	9f 93       	push	r25
    1f5a:	af 93       	push	r26
    1f5c:	bf 93       	push	r27
    1f5e:	ef 93       	push	r30
    1f60:	ff 93       	push	r31
    1f62:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <intFunc>
    1f66:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <intFunc+0x1>
    1f6a:	19 95       	eicall
    1f6c:	ff 91       	pop	r31
    1f6e:	ef 91       	pop	r30
    1f70:	bf 91       	pop	r27
    1f72:	af 91       	pop	r26
    1f74:	9f 91       	pop	r25
    1f76:	8f 91       	pop	r24
    1f78:	7f 91       	pop	r23
    1f7a:	6f 91       	pop	r22
    1f7c:	5f 91       	pop	r21
    1f7e:	4f 91       	pop	r20
    1f80:	3f 91       	pop	r19
    1f82:	2f 91       	pop	r18
    1f84:	0f 90       	pop	r0
    1f86:	0b be       	out	0x3b, r0	; 59
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_6>:
__vector_6():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:443
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	0b b6       	in	r0, 0x3b	; 59
    1f9e:	0f 92       	push	r0
    1fa0:	2f 93       	push	r18
    1fa2:	3f 93       	push	r19
    1fa4:	4f 93       	push	r20
    1fa6:	5f 93       	push	r21
    1fa8:	6f 93       	push	r22
    1faa:	7f 93       	push	r23
    1fac:	8f 93       	push	r24
    1fae:	9f 93       	push	r25
    1fb0:	af 93       	push	r26
    1fb2:	bf 93       	push	r27
    1fb4:	ef 93       	push	r30
    1fb6:	ff 93       	push	r31
    1fb8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc+0x2>
    1fbc:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x3>
    1fc0:	19 95       	eicall
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0b be       	out	0x3b, r0	; 59
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	0f 90       	pop	r0
    1fe4:	1f 90       	pop	r1
    1fe6:	18 95       	reti

00001fe8 <__vector_7>:
__vector_7():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:444
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1fe8:	1f 92       	push	r1
    1fea:	0f 92       	push	r0
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	0f 92       	push	r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	0b b6       	in	r0, 0x3b	; 59
    1ff4:	0f 92       	push	r0
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
    200e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xc>
    2012:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xd>
    2016:	19 95       	eicall
    2018:	ff 91       	pop	r31
    201a:	ef 91       	pop	r30
    201c:	bf 91       	pop	r27
    201e:	af 91       	pop	r26
    2020:	9f 91       	pop	r25
    2022:	8f 91       	pop	r24
    2024:	7f 91       	pop	r23
    2026:	6f 91       	pop	r22
    2028:	5f 91       	pop	r21
    202a:	4f 91       	pop	r20
    202c:	3f 91       	pop	r19
    202e:	2f 91       	pop	r18
    2030:	0f 90       	pop	r0
    2032:	0b be       	out	0x3b, r0	; 59
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti

0000203e <__vector_8>:
__vector_8():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:445
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	0b b6       	in	r0, 0x3b	; 59
    204a:	0f 92       	push	r0
    204c:	2f 93       	push	r18
    204e:	3f 93       	push	r19
    2050:	4f 93       	push	r20
    2052:	5f 93       	push	r21
    2054:	6f 93       	push	r22
    2056:	7f 93       	push	r23
    2058:	8f 93       	push	r24
    205a:	9f 93       	push	r25
    205c:	af 93       	push	r26
    205e:	bf 93       	push	r27
    2060:	ef 93       	push	r30
    2062:	ff 93       	push	r31
    2064:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xe>
    2068:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xf>
    206c:	19 95       	eicall
    206e:	ff 91       	pop	r31
    2070:	ef 91       	pop	r30
    2072:	bf 91       	pop	r27
    2074:	af 91       	pop	r26
    2076:	9f 91       	pop	r25
    2078:	8f 91       	pop	r24
    207a:	7f 91       	pop	r23
    207c:	6f 91       	pop	r22
    207e:	5f 91       	pop	r21
    2080:	4f 91       	pop	r20
    2082:	3f 91       	pop	r19
    2084:	2f 91       	pop	r18
    2086:	0f 90       	pop	r0
    2088:	0b be       	out	0x3b, r0	; 59
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	0f 90       	pop	r0
    2090:	1f 90       	pop	r1
    2092:	18 95       	reti

00002094 <__vector_23>:
__vector_23():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	af 93       	push	r26
    20a8:	bf 93       	push	r27
    20aa:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <timer0_millis>
    20ae:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <timer0_millis+0x1>
    20b2:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <timer0_millis+0x2>
    20b6:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <timer0_millis+0x3>
    20ba:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <timer0_fract>
    20be:	26 e0       	ldi	r18, 0x06	; 6
    20c0:	23 0f       	add	r18, r19
    20c2:	2d 37       	cpi	r18, 0x7D	; 125
    20c4:	68 f1       	brcs	.+90     	; 0x2120 <__vector_23+0x8c>
    20c6:	29 e8       	ldi	r18, 0x89	; 137
    20c8:	23 0f       	add	r18, r19
    20ca:	03 96       	adiw	r24, 0x03	; 3
    20cc:	a1 1d       	adc	r26, r1
    20ce:	b1 1d       	adc	r27, r1
    20d0:	20 93 67 03 	sts	0x0367, r18	; 0x800367 <timer0_fract>
    20d4:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <timer0_millis>
    20d8:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <timer0_millis+0x1>
    20dc:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <timer0_millis+0x2>
    20e0:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <timer0_millis+0x3>
    20e4:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <timer0_overflow_count>
    20e8:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <timer0_overflow_count+0x1>
    20ec:	a0 91 65 03 	lds	r26, 0x0365	; 0x800365 <timer0_overflow_count+0x2>
    20f0:	b0 91 66 03 	lds	r27, 0x0366	; 0x800366 <timer0_overflow_count+0x3>
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	a1 1d       	adc	r26, r1
    20f8:	b1 1d       	adc	r27, r1
    20fa:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <timer0_overflow_count>
    20fe:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <timer0_overflow_count+0x1>
    2102:	a0 93 65 03 	sts	0x0365, r26	; 0x800365 <timer0_overflow_count+0x2>
    2106:	b0 93 66 03 	sts	0x0366, r27	; 0x800366 <timer0_overflow_count+0x3>
    210a:	bf 91       	pop	r27
    210c:	af 91       	pop	r26
    210e:	9f 91       	pop	r25
    2110:	8f 91       	pop	r24
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti
    2120:	02 96       	adiw	r24, 0x02	; 2
    2122:	a1 1d       	adc	r26, r1
    2124:	b1 1d       	adc	r27, r1
    2126:	d4 cf       	rjmp	.-88     	; 0x20d0 <__vector_23+0x3c>

00002128 <millis>:
millis():
    2128:	2f b7       	in	r18, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	60 91 68 03 	lds	r22, 0x0368	; 0x800368 <timer0_millis>
    2130:	70 91 69 03 	lds	r23, 0x0369	; 0x800369 <timer0_millis+0x1>
    2134:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <timer0_millis+0x2>
    2138:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <timer0_millis+0x3>
    213c:	2f bf       	out	0x3f, r18	; 63
    213e:	08 95       	ret

00002140 <micros>:
micros():
    2140:	3f b7       	in	r19, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <timer0_overflow_count>
    2148:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <timer0_overflow_count+0x1>
    214c:	a0 91 65 03 	lds	r26, 0x0365	; 0x800365 <timer0_overflow_count+0x2>
    2150:	b0 91 66 03 	lds	r27, 0x0366	; 0x800366 <timer0_overflow_count+0x3>
    2154:	26 b5       	in	r18, 0x26	; 38
    2156:	a8 9b       	sbis	0x15, 0	; 21
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <micros+0x24>
    215a:	2f 3f       	cpi	r18, 0xFF	; 255
    215c:	19 f0       	breq	.+6      	; 0x2164 <micros+0x24>
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	a1 1d       	adc	r26, r1
    2162:	b1 1d       	adc	r27, r1
    2164:	3f bf       	out	0x3f, r19	; 63
    2166:	ba 2f       	mov	r27, r26
    2168:	a9 2f       	mov	r26, r25
    216a:	98 2f       	mov	r25, r24
    216c:	88 27       	eor	r24, r24
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	62 0f       	add	r22, r18
    2174:	71 1d       	adc	r23, r1
    2176:	81 1d       	adc	r24, r1
    2178:	91 1d       	adc	r25, r1
    217a:	43 e0       	ldi	r20, 0x03	; 3
    217c:	66 0f       	add	r22, r22
    217e:	77 1f       	adc	r23, r23
    2180:	88 1f       	adc	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	4a 95       	dec	r20
    2186:	d1 f7       	brne	.-12     	; 0x217c <micros+0x3c>
    2188:	08 95       	ret

0000218a <delay>:
delay():
    218a:	8f 92       	push	r8
    218c:	9f 92       	push	r9
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	6b 01       	movw	r12, r22
    219c:	7c 01       	movw	r14, r24
    219e:	0e 94 a0 10 	call	0x2140	; 0x2140 <micros>
    21a2:	4b 01       	movw	r8, r22
    21a4:	5c 01       	movw	r10, r24
    21a6:	c1 14       	cp	r12, r1
    21a8:	d1 04       	cpc	r13, r1
    21aa:	e1 04       	cpc	r14, r1
    21ac:	f1 04       	cpc	r15, r1
    21ae:	e9 f0       	breq	.+58     	; 0x21ea <delay+0x60>
    21b0:	0e 94 33 19 	call	0x3266	; 0x3266 <yield>
    21b4:	0e 94 a0 10 	call	0x2140	; 0x2140 <micros>
    21b8:	68 19       	sub	r22, r8
    21ba:	79 09       	sbc	r23, r9
    21bc:	8a 09       	sbc	r24, r10
    21be:	9b 09       	sbc	r25, r11
    21c0:	68 3e       	cpi	r22, 0xE8	; 232
    21c2:	73 40       	sbci	r23, 0x03	; 3
    21c4:	81 05       	cpc	r24, r1
    21c6:	91 05       	cpc	r25, r1
    21c8:	70 f3       	brcs	.-36     	; 0x21a6 <delay+0x1c>
    21ca:	21 e0       	ldi	r18, 0x01	; 1
    21cc:	c2 1a       	sub	r12, r18
    21ce:	d1 08       	sbc	r13, r1
    21d0:	e1 08       	sbc	r14, r1
    21d2:	f1 08       	sbc	r15, r1
    21d4:	88 ee       	ldi	r24, 0xE8	; 232
    21d6:	88 0e       	add	r8, r24
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	98 1e       	adc	r9, r24
    21dc:	a1 1c       	adc	r10, r1
    21de:	b1 1c       	adc	r11, r1
    21e0:	c1 14       	cp	r12, r1
    21e2:	d1 04       	cpc	r13, r1
    21e4:	e1 04       	cpc	r14, r1
    21e6:	f1 04       	cpc	r15, r1
    21e8:	29 f7       	brne	.-54     	; 0x21b4 <delay+0x2a>
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
    21f2:	bf 90       	pop	r11
    21f4:	af 90       	pop	r10
    21f6:	9f 90       	pop	r9
    21f8:	8f 90       	pop	r8
    21fa:	08 95       	ret

000021fc <init>:
init():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    21fc:	78 94       	sei
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    21fe:	84 b5       	in	r24, 0x24	; 36
    2200:	83 60       	ori	r24, 0x03	; 3
    2202:	84 bd       	out	0x24, r24	; 36
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2204:	85 b5       	in	r24, 0x25	; 37
    2206:	83 60       	ori	r24, 0x03	; 3
    2208:	85 bd       	out	0x25, r24	; 37
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    220a:	ee e6       	ldi	r30, 0x6E	; 110
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	81 60       	ori	r24, 0x01	; 1
    2212:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2214:	e1 e8       	ldi	r30, 0x81	; 129
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    221c:	80 81       	ld	r24, Z
    221e:	81 60       	ori	r24, 0x01	; 1
    2220:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2222:	e0 e8       	ldi	r30, 0x80	; 128
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	81 60       	ori	r24, 0x01	; 1
    222a:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    222c:	e1 eb       	ldi	r30, 0xB1	; 177
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	84 60       	ori	r24, 0x04	; 4
    2234:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2236:	e0 eb       	ldi	r30, 0xB0	; 176
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	81 60       	ori	r24, 0x01	; 1
    223e:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2240:	e1 e9       	ldi	r30, 0x91	; 145
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	83 60       	ori	r24, 0x03	; 3
    2248:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    224a:	e0 e9       	ldi	r30, 0x90	; 144
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	81 60       	ori	r24, 0x01	; 1
    2252:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    2254:	e1 ea       	ldi	r30, 0xA1	; 161
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	83 60       	ori	r24, 0x03	; 3
    225c:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    225e:	e0 ea       	ldi	r30, 0xA0	; 160
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	81 60       	ori	r24, 0x01	; 1
    2266:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    2268:	e1 e2       	ldi	r30, 0x21	; 33
    226a:	f1 e0       	ldi	r31, 0x01	; 1
    226c:	80 81       	ld	r24, Z
    226e:	83 60       	ori	r24, 0x03	; 3
    2270:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    2272:	e0 e2       	ldi	r30, 0x20	; 32
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    227c:	86 e8       	ldi	r24, 0x86	; 134
    227e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2282:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    2286:	08 95       	ret

00002288 <analogRead>:
analogRead():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    2288:	80 31       	cpi	r24, 0x10	; 16
    228a:	20 f0       	brcs	.+8      	; 0x2294 <analogRead+0xc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    228c:	85 33       	cpi	r24, 0x35	; 53
    228e:	08 f4       	brcc	.+2      	; 0x2292 <analogRead+0xa>
    2290:	85 e3       	ldi	r24, 0x35	; 53
    2292:	86 53       	subi	r24, 0x36	; 54
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:62 (discriminator 4)
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2294:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    2298:	98 2f       	mov	r25, r24
    229a:	98 70       	andi	r25, 0x08	; 8
    229c:	27 7f       	andi	r18, 0xF7	; 247
    229e:	92 2b       	or	r25, r18
    22a0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    22a4:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <analog_reference>
    22a8:	90 e4       	ldi	r25, 0x40	; 64
    22aa:	29 9f       	mul	r18, r25
    22ac:	90 01       	movw	r18, r0
    22ae:	11 24       	eor	r1, r1
    22b0:	87 70       	andi	r24, 0x07	; 7
    22b2:	82 2b       	or	r24, r18
    22b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    22b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    22bc:	80 64       	ori	r24, 0x40	; 64
    22be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    22c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    22c6:	86 fd       	sbrc	r24, 6
    22c8:	fc cf       	rjmp	.-8      	; 0x22c2 <analogRead+0x3a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    22ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    22ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    22d2:	08 95       	ret

000022d4 <turnOffPWM>:
turnOffPWM():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    22d4:	82 50       	subi	r24, 0x02	; 2
    22d6:	82 31       	cpi	r24, 0x12	; 18
    22d8:	08 f0       	brcs	.+2      	; 0x22dc <turnOffPWM+0x8>
    22da:	5f c0       	rjmp	.+190    	; 0x239a <turnOffPWM+0xc6>
    22dc:	e8 2f       	mov	r30, r24
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	88 27       	eor	r24, r24
    22e2:	ea 58       	subi	r30, 0x8A	; 138
    22e4:	fe 4e       	sbci	r31, 0xEE	; 238
    22e6:	8f 4f       	sbci	r24, 0xFF	; 255
    22e8:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__tablejump2__>
    22ec:	ca 11       	cpse	r28, r10
    22ee:	ce 11       	cpse	r28, r14
    22f0:	88 11       	cpse	r24, r8
    22f2:	8e 11       	cpse	r24, r14
    22f4:	92 11       	cpse	r25, r2
    22f6:	cd 11       	cpse	r28, r13
    22f8:	96 11       	cpse	r25, r6
    22fa:	9c 11       	cpse	r25, r12
    22fc:	a0 11       	cpse	r26, r0
    22fe:	a6 11       	cpse	r26, r6
    2300:	aa 11       	cpse	r26, r10
    2302:	ae 11       	cpse	r26, r14
    2304:	b4 11       	cpse	r27, r4
    2306:	b8 11       	cpse	r27, r8
    2308:	cd 11       	cpse	r28, r13
    230a:	bc 11       	cpse	r27, r12
    230c:	c2 11       	cpse	r28, r2
    230e:	c6 11       	cpse	r28, r6
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2310:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2314:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2316:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    231a:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    231c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2320:	8f 7d       	andi	r24, 0xDF	; 223
    2322:	f9 cf       	rjmp	.-14     	; 0x2316 <turnOffPWM+0x42>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    2324:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2328:	87 7f       	andi	r24, 0xF7	; 247
    232a:	f5 cf       	rjmp	.-22     	; 0x2316 <turnOffPWM+0x42>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    232c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2330:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2332:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    2336:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2338:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    233c:	8f 7d       	andi	r24, 0xDF	; 223
    233e:	f9 cf       	rjmp	.-14     	; 0x2332 <turnOffPWM+0x5e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2340:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2344:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    2346:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    234a:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    234c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2350:	8f 7d       	andi	r24, 0xDF	; 223
    2352:	f9 cf       	rjmp	.-14     	; 0x2346 <turnOffPWM+0x72>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    2354:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2358:	87 7f       	andi	r24, 0xF7	; 247
    235a:	f5 cf       	rjmp	.-22     	; 0x2346 <turnOffPWM+0x72>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    235c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2360:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2362:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    2366:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    2368:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    236c:	8f 7d       	andi	r24, 0xDF	; 223
    236e:	f9 cf       	rjmp	.-14     	; 0x2362 <turnOffPWM+0x8e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    2370:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    2374:	87 7f       	andi	r24, 0xF7	; 247
    2376:	f5 cf       	rjmp	.-22     	; 0x2362 <turnOffPWM+0x8e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    2378:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    237c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    237e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    2382:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    2384:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2388:	8f 7d       	andi	r24, 0xDF	; 223
    238a:	f9 cf       	rjmp	.-14     	; 0x237e <turnOffPWM+0xaa>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    238c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2390:	87 7f       	andi	r24, 0xF7	; 247
    2392:	f5 cf       	rjmp	.-22     	; 0x237e <turnOffPWM+0xaa>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2394:	84 b5       	in	r24, 0x24	; 36
    2396:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2398:	84 bd       	out	0x24, r24	; 36
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    239a:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    239c:	84 b5       	in	r24, 0x24	; 36
    239e:	8f 7d       	andi	r24, 0xDF	; 223
    23a0:	fb cf       	rjmp	.-10     	; 0x2398 <turnOffPWM+0xc4>

000023a2 <pinMode>:
pinMode():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	fc 01       	movw	r30, r24
    23aa:	e2 5d       	subi	r30, 0xD2	; 210
    23ac:	fd 4f       	sbci	r31, 0xFD	; 253
    23ae:	24 91       	lpm	r18, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    23b0:	8c 57       	subi	r24, 0x7C	; 124
    23b2:	9d 4f       	sbci	r25, 0xFD	; 253
    23b4:	fc 01       	movw	r30, r24
    23b6:	84 91       	lpm	r24, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    23b8:	88 23       	and	r24, r24
    23ba:	c9 f0       	breq	.+50     	; 0x23ee <pinMode+0x4c>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 5f       	subi	r30, 0xF2	; 242
    23c6:	fc 4f       	sbci	r31, 0xFC	; 252
    23c8:	a5 91       	lpm	r26, Z+
    23ca:	b4 91       	lpm	r27, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    23cc:	fc 01       	movw	r30, r24
    23ce:	ec 50       	subi	r30, 0x0C	; 12
    23d0:	fd 4f       	sbci	r31, 0xFD	; 253
    23d2:	c5 91       	lpm	r28, Z+
    23d4:	d4 91       	lpm	r29, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    23d6:	61 11       	cpse	r22, r1
    23d8:	0d c0       	rjmp	.+26     	; 0x23f4 <pinMode+0x52>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    23da:	9f b7       	in	r25, 0x3f	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    23dc:	f8 94       	cli
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    23de:	8c 91       	ld	r24, X
    23e0:	20 95       	com	r18
    23e2:	82 23       	and	r24, r18
    23e4:	8c 93       	st	X, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    23e6:	88 81       	ld	r24, Y
    23e8:	28 23       	and	r18, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    23ea:	28 83       	st	Y, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    23ec:	9f bf       	out	0x3f, r25	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    23f4:	62 30       	cpi	r22, 0x02	; 2
    23f6:	51 f4       	brne	.+20     	; 0x240c <pinMode+0x6a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    23f8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    23fa:	f8 94       	cli
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    23fc:	3c 91       	ld	r19, X
    23fe:	82 2f       	mov	r24, r18
    2400:	80 95       	com	r24
    2402:	83 23       	and	r24, r19
    2404:	8c 93       	st	X, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2406:	e8 81       	ld	r30, Y
    2408:	2e 2b       	or	r18, r30
    240a:	ef cf       	rjmp	.-34     	; 0x23ea <pinMode+0x48>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    240c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    240e:	f8 94       	cli
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2410:	ec 91       	ld	r30, X
    2412:	2e 2b       	or	r18, r30
    2414:	2c 93       	st	X, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2416:	8f bf       	out	0x3f, r24	; 63
    2418:	ea cf       	rjmp	.-44     	; 0x23ee <pinMode+0x4c>

0000241a <digitalWrite>:
digitalWrite():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	f9 01       	movw	r30, r18
    2426:	e8 52       	subi	r30, 0x28	; 40
    2428:	fe 4f       	sbci	r31, 0xFE	; 254
    242a:	84 91       	lpm	r24, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    242c:	f9 01       	movw	r30, r18
    242e:	e2 5d       	subi	r30, 0xD2	; 210
    2430:	fd 4f       	sbci	r31, 0xFD	; 253
    2432:	d4 91       	lpm	r29, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2434:	f9 01       	movw	r30, r18
    2436:	ec 57       	subi	r30, 0x7C	; 124
    2438:	fd 4f       	sbci	r31, 0xFD	; 253
    243a:	c4 91       	lpm	r28, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    243c:	cc 23       	and	r28, r28
    243e:	a9 f0       	breq	.+42     	; 0x246a <digitalWrite+0x50>
    2440:	16 2f       	mov	r17, r22
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2442:	81 11       	cpse	r24, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2444:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <turnOffPWM>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2448:	ec 2f       	mov	r30, r28
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ec 50       	subi	r30, 0x0C	; 12
    2452:	fd 4f       	sbci	r31, 0xFD	; 253
    2454:	a5 91       	lpm	r26, Z+
    2456:	b4 91       	lpm	r27, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2458:	8f b7       	in	r24, 0x3f	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    245a:	f8 94       	cli
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    245c:	ec 91       	ld	r30, X
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    245e:	11 11       	cpse	r17, r1
    2460:	08 c0       	rjmp	.+16     	; 0x2472 <digitalWrite+0x58>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2462:	d0 95       	com	r29
    2464:	de 23       	and	r29, r30
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2466:	dc 93       	st	X, r29
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2468:	8f bf       	out	0x3f, r24	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2472:	de 2b       	or	r29, r30
    2474:	f8 cf       	rjmp	.-16     	; 0x2466 <digitalWrite+0x4c>

00002476 <digitalRead>:
digitalRead():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	f9 01       	movw	r30, r18
    2480:	e8 52       	subi	r30, 0x28	; 40
    2482:	fe 4f       	sbci	r31, 0xFE	; 254
    2484:	84 91       	lpm	r24, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    2486:	f9 01       	movw	r30, r18
    2488:	e2 5d       	subi	r30, 0xD2	; 210
    248a:	fd 4f       	sbci	r31, 0xFD	; 253
    248c:	d4 91       	lpm	r29, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    248e:	f9 01       	movw	r30, r18
    2490:	ec 57       	subi	r30, 0x7C	; 124
    2492:	fd 4f       	sbci	r31, 0xFD	; 253
    2494:	c4 91       	lpm	r28, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    2496:	cc 23       	and	r28, r28
    2498:	a1 f0       	breq	.+40     	; 0x24c2 <digitalRead+0x4c>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    249a:	81 11       	cpse	r24, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    249c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <turnOffPWM>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    24a0:	ec 2f       	mov	r30, r28
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	e6 52       	subi	r30, 0x26	; 38
    24aa:	fd 4f       	sbci	r31, 0xFD	; 253
    24ac:	a5 91       	lpm	r26, Z+
    24ae:	b4 91       	lpm	r27, Z
    24b0:	ec 91       	ld	r30, X
    24b2:	ed 23       	and	r30, r29
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	09 f4       	brne	.+2      	; 0x24bc <digitalRead+0x46>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	fa cf       	rjmp	.-12     	; 0x24bc <digitalRead+0x46>

000024c8 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    24c8:	fc 01       	movw	r30, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    24ca:	91 8d       	ldd	r25, Z+25	; 0x19
    24cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    24ce:	89 2f       	mov	r24, r25
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	80 5c       	subi	r24, 0xC0	; 192
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	82 1b       	sub	r24, r18
    24d8:	91 09       	sbc	r25, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    24da:	8f 73       	andi	r24, 0x3F	; 63
    24dc:	99 27       	eor	r25, r25
    24de:	08 95       	ret

000024e0 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    24e0:	fc 01       	movw	r30, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    24e2:	91 8d       	ldd	r25, Z+25	; 0x19
    24e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    24e6:	98 17       	cp	r25, r24
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <HardwareSerial::peek()+0x16>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    24ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ec:	e8 0f       	add	r30, r24
    24ee:	f1 1d       	adc	r31, r1
    24f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    24fa:	08 95       	ret

000024fc <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    24fc:	fc 01       	movw	r30, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    24fe:	91 8d       	ldd	r25, Z+25	; 0x19
    2500:	82 8d       	ldd	r24, Z+26	; 0x1a
    2502:	98 17       	cp	r25, r24
    2504:	61 f0       	breq	.+24     	; 0x251e <HardwareSerial::read()+0x22>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2506:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2508:	ae 0f       	add	r26, r30
    250a:	bf 2f       	mov	r27, r31
    250c:	b1 1d       	adc	r27, r1
    250e:	5d 96       	adiw	r26, 0x1d	; 29
    2510:	8c 91       	ld	r24, X
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2512:	92 8d       	ldd	r25, Z+26	; 0x1a
    2514:	9f 5f       	subi	r25, 0xFF	; 255
    2516:	9f 73       	andi	r25, 0x3F	; 63
    2518:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    251e:	8f ef       	ldi	r24, 0xFF	; 255
    2520:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2522:	08 95       	ret

00002524 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    2524:	fc 01       	movw	r30, r24
    2526:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    2528:	44 8d       	ldd	r20, Z+28	; 0x1c
    252a:	25 2f       	mov	r18, r21
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	84 2f       	mov	r24, r20
    2530:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2532:	82 1b       	sub	r24, r18
    2534:	93 0b       	sbc	r25, r19
    2536:	54 17       	cp	r21, r20
    2538:	10 f0       	brcs	.+4      	; 0x253e <HardwareSerial::availableForWrite()+0x1a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    253a:	cf 96       	adiw	r24, 0x3f	; 63
    253c:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    253e:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    2540:	08 95       	ret

00002542 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2542:	83 e2       	ldi	r24, 0x23	; 35
    2544:	94 e1       	ldi	r25, 0x14	; 20
    2546:	89 2b       	or	r24, r25
    2548:	49 f0       	breq	.+18     	; 0x255c <serialEventRun()+0x1a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	89 2b       	or	r24, r25
    2550:	29 f0       	breq	.+10     	; 0x255c <serialEventRun()+0x1a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    2552:	0e 94 23 14 	call	0x2846	; 0x2846 <Serial0_available()>
    2556:	81 11       	cpse	r24, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    2558:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    255c:	8a eb       	ldi	r24, 0xBA	; 186
    255e:	94 e1       	ldi	r25, 0x14	; 20
    2560:	89 2b       	or	r24, r25
    2562:	49 f0       	breq	.+18     	; 0x2576 <serialEventRun()+0x34>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	89 2b       	or	r24, r25
    256a:	29 f0       	breq	.+10     	; 0x2576 <serialEventRun()+0x34>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    256c:	0e 94 ba 14 	call	0x2974	; 0x2974 <Serial1_available()>
    2570:	81 11       	cpse	r24, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    2572:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:72
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	89 2b       	or	r24, r25
    257c:	49 f0       	breq	.+18     	; 0x2590 <serialEventRun()+0x4e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:72 (discriminator 1)
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	89 2b       	or	r24, r25
    2584:	29 f0       	breq	.+10     	; 0x2590 <serialEventRun()+0x4e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:72 (discriminator 3)
    2586:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    258a:	81 11       	cpse	r24, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:72
    258c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:75
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	89 2b       	or	r24, r25
    2596:	49 f0       	breq	.+18     	; 0x25aa <serialEventRun()+0x68>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:75 (discriminator 1)
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	89 2b       	or	r24, r25
    259e:	29 f0       	breq	.+10     	; 0x25aa <serialEventRun()+0x68>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:75 (discriminator 3)
    25a0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25a4:	81 11       	cpse	r24, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:75
    25a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:77
#endif
}
    25aa:	08 95       	ret

000025ac <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    25ac:	fc 01       	movw	r30, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    25ae:	a4 8d       	ldd	r26, Z+28	; 0x1c
    25b0:	a8 0f       	add	r26, r24
    25b2:	b9 2f       	mov	r27, r25
    25b4:	b1 1d       	adc	r27, r1
    25b6:	a3 5a       	subi	r26, 0xA3	; 163
    25b8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ba:	2c 91       	ld	r18, X
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    25bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	8f 73       	andi	r24, 0x3F	; 63
    25c4:	99 27       	eor	r25, r25
    25c6:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    25c8:	a6 89       	ldd	r26, Z+22	; 0x16
    25ca:	b7 89       	ldd	r27, Z+23	; 0x17
    25cc:	2c 93       	st	X, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    25ce:	a0 89       	ldd	r26, Z+16	; 0x10
    25d0:	b1 89       	ldd	r27, Z+17	; 0x11
    25d2:	8c 91       	ld	r24, X
    25d4:	80 64       	ori	r24, 0x40	; 64
    25d6:	8c 93       	st	X, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    25d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    25da:	84 8d       	ldd	r24, Z+28	; 0x1c
    25dc:	98 13       	cpse	r25, r24
    25de:	06 c0       	rjmp	.+12     	; 0x25ec <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    25e0:	02 88       	ldd	r0, Z+18	; 0x12
    25e2:	f3 89       	ldd	r31, Z+19	; 0x13
    25e4:	e0 2d       	mov	r30, r0
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 7d       	andi	r24, 0xDF	; 223
    25ea:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    25ec:	08 95       	ret

000025ee <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	ec 01       	movw	r28, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    25f4:	88 8d       	ldd	r24, Y+24	; 0x18
    25f6:	88 23       	and	r24, r24
    25f8:	b9 f0       	breq	.+46     	; 0x2628 <HardwareSerial::flush()+0x3a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    25fa:	aa 89       	ldd	r26, Y+18	; 0x12
    25fc:	bb 89       	ldd	r27, Y+19	; 0x13
    25fe:	e8 89       	ldd	r30, Y+16	; 0x10
    2600:	f9 89       	ldd	r31, Y+17	; 0x11
    2602:	8c 91       	ld	r24, X
    2604:	85 fd       	sbrc	r24, 5
    2606:	03 c0       	rjmp	.+6      	; 0x260e <HardwareSerial::flush()+0x20>
    2608:	80 81       	ld	r24, Z
    260a:	86 fd       	sbrc	r24, 6
    260c:	0d c0       	rjmp	.+26     	; 0x2628 <HardwareSerial::flush()+0x3a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	07 fc       	sbrc	r0, 7
    2612:	f7 cf       	rjmp	.-18     	; 0x2602 <HardwareSerial::flush()+0x14>
    2614:	8c 91       	ld	r24, X
    2616:	85 ff       	sbrs	r24, 5
    2618:	f2 cf       	rjmp	.-28     	; 0x25fe <HardwareSerial::flush()+0x10>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    261a:	80 81       	ld	r24, Z
    261c:	85 ff       	sbrs	r24, 5
    261e:	ed cf       	rjmp	.-38     	; 0x25fa <HardwareSerial::flush()+0xc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    2620:	ce 01       	movw	r24, r28
    2622:	0e 94 d6 12 	call	0x25ac	; 0x25ac <HardwareSerial::_tx_udr_empty_irq()>
    2626:	e9 cf       	rjmp	.-46     	; 0x25fa <HardwareSerial::flush()+0xc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	08 95       	ret

0000262e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	ec 01       	movw	r28, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2640:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2642:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2644:	98 13       	cpse	r25, r24
    2646:	16 c0       	rjmp	.+44     	; 0x2674 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    2648:	e8 89       	ldd	r30, Y+16	; 0x10
    264a:	f9 89       	ldd	r31, Y+17	; 0x11
    264c:	80 81       	ld	r24, Z
    264e:	85 ff       	sbrs	r24, 5
    2650:	11 c0       	rjmp	.+34     	; 0x2674 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    2652:	ee 89       	ldd	r30, Y+22	; 0x16
    2654:	ff 89       	ldd	r31, Y+23	; 0x17
    2656:	60 83       	st	Z, r22
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    2658:	e8 89       	ldd	r30, Y+16	; 0x10
    265a:	f9 89       	ldd	r31, Y+17	; 0x11
    265c:	80 81       	ld	r24, Z
    265e:	80 64       	ori	r24, 0x40	; 64
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    2660:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	08 95       	ret
    2674:	f6 2e       	mov	r15, r22
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2676:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	0f 5f       	subi	r16, 0xFF	; 255
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
    267e:	0f 73       	andi	r16, 0x3F	; 63
    2680:	11 27       	eor	r17, r17
    2682:	e0 2e       	mov	r14, r16
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2684:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2686:	8e 11       	cpse	r24, r14
    2688:	0c c0       	rjmp	.+24     	; 0x26a2 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	07 fc       	sbrc	r0, 7
    268e:	fa cf       	rjmp	.-12     	; 0x2684 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2690:	e8 89       	ldd	r30, Y+16	; 0x10
    2692:	f9 89       	ldd	r31, Y+17	; 0x11
    2694:	80 81       	ld	r24, Z
    2696:	85 ff       	sbrs	r24, 5
    2698:	f5 cf       	rjmp	.-22     	; 0x2684 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    269a:	ce 01       	movw	r24, r28
    269c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <HardwareSerial::_tx_udr_empty_irq()>
    26a0:	f1 cf       	rjmp	.-30     	; 0x2684 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    26a2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    26a4:	ec 0f       	add	r30, r28
    26a6:	fd 2f       	mov	r31, r29
    26a8:	f1 1d       	adc	r31, r1
    26aa:	e3 5a       	subi	r30, 0xA3	; 163
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	f0 82       	st	Z, r15
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    26b0:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    26b2:	ea 89       	ldd	r30, Y+18	; 0x12
    26b4:	fb 89       	ldd	r31, Y+19	; 0x13
    26b6:	80 81       	ld	r24, Z
    26b8:	80 62       	ori	r24, 0x20	; 32
    26ba:	d2 cf       	rjmp	.-92     	; 0x2660 <HardwareSerial::write(unsigned char)+0x32>

000026bc <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	1f 93       	push	r17
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	ec 01       	movw	r28, r24
    26cc:	6a 01       	movw	r12, r20
    26ce:	7b 01       	movw	r14, r22
    26d0:	12 2f       	mov	r17, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    26d2:	60 e8       	ldi	r22, 0x80	; 128
    26d4:	74 e8       	ldi	r23, 0x84	; 132
    26d6:	8e e1       	ldi	r24, 0x1E	; 30
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a7 01       	movw	r20, r14
    26dc:	96 01       	movw	r18, r12
    26de:	0e 94 34 19 	call	0x3268	; 0x3268 <__udivmodsi4>
    26e2:	21 50       	subi	r18, 0x01	; 1
    26e4:	31 09       	sbc	r19, r1
    26e6:	41 09       	sbc	r20, r1
    26e8:	51 09       	sbc	r21, r1
    26ea:	56 95       	lsr	r21
    26ec:	47 95       	ror	r20
    26ee:	37 95       	ror	r19
    26f0:	27 95       	ror	r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    26f2:	e8 89       	ldd	r30, Y+16	; 0x10
    26f4:	f9 89       	ldd	r31, Y+17	; 0x11
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    26fa:	21 15       	cp	r18, r1
    26fc:	80 e1       	ldi	r24, 0x10	; 16
    26fe:	38 07       	cpc	r19, r24
    2700:	98 f0       	brcs	.+38     	; 0x2728 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    2702:	e8 89       	ldd	r30, Y+16	; 0x10
    2704:	f9 89       	ldd	r31, Y+17	; 0x11
    2706:	10 82       	st	Z, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2708:	60 e4       	ldi	r22, 0x40	; 64
    270a:	72 e4       	ldi	r23, 0x42	; 66
    270c:	8f e0       	ldi	r24, 0x0F	; 15
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a7 01       	movw	r20, r14
    2712:	96 01       	movw	r18, r12
    2714:	0e 94 34 19 	call	0x3268	; 0x3268 <__udivmodsi4>
    2718:	21 50       	subi	r18, 0x01	; 1
    271a:	31 09       	sbc	r19, r1
    271c:	41 09       	sbc	r20, r1
    271e:	51 09       	sbc	r21, r1
    2720:	56 95       	lsr	r21
    2722:	47 95       	ror	r20
    2724:	37 95       	ror	r19
    2726:	27 95       	ror	r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2728:	ec 85       	ldd	r30, Y+12	; 0x0c
    272a:	fd 85       	ldd	r31, Y+13	; 0x0d
    272c:	30 83       	st	Z, r19
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    272e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2730:	ff 85       	ldd	r31, Y+15	; 0x0f
    2732:	20 83       	st	Z, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    2734:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2736:	ec 89       	ldd	r30, Y+20	; 0x14
    2738:	fd 89       	ldd	r31, Y+21	; 0x15
    273a:	10 83       	st	Z, r17
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    273c:	ea 89       	ldd	r30, Y+18	; 0x12
    273e:	fb 89       	ldd	r31, Y+19	; 0x13
    2740:	80 81       	ld	r24, Z
    2742:	88 69       	ori	r24, 0x98	; 152
    2744:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    2746:	ea 89       	ldd	r30, Y+18	; 0x12
    2748:	fb 89       	ldd	r31, Y+19	; 0x13
    274a:	80 81       	ld	r24, Z
    274c:	8f 7d       	andi	r24, 0xDF	; 223
    274e:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	08 95       	ret

00002760 <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	ec 01       	movw	r28, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    2766:	e8 81       	ld	r30, Y
    2768:	f9 81       	ldd	r31, Y+1	; 0x01
    276a:	06 80       	ldd	r0, Z+6	; 0x06
    276c:	f7 81       	ldd	r31, Z+7	; 0x07
    276e:	e0 2d       	mov	r30, r0
    2770:	19 95       	eicall
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    2772:	ea 89       	ldd	r30, Y+18	; 0x12
    2774:	fb 89       	ldd	r31, Y+19	; 0x13
    2776:	80 81       	ld	r24, Z
    2778:	87 74       	andi	r24, 0x47	; 71
    277a:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    277c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    277e:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

00002786 <__vector_25>:
__vector_25():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	0f 92       	push	r0
    278e:	11 24       	eor	r1, r1
    2790:	0b b6       	in	r0, 0x3b	; 59
    2792:	0f 92       	push	r0
    2794:	2f 93       	push	r18
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	ef 93       	push	r30
    279c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    279e:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <Serial+0x10>
    27a2:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <Serial+0x11>
    27a6:	80 81       	ld	r24, Z
    27a8:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <Serial+0x16>
    27ac:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <Serial+0x17>
    27b0:	82 fd       	sbrc	r24, 2
    27b2:	1d c0       	rjmp	.+58     	; 0x27ee <__vector_25+0x68>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    27b4:	90 81       	ld	r25, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    27b6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <Serial+0x19>
    27ba:	8f 5f       	subi	r24, 0xFF	; 255
    27bc:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    27be:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <Serial+0x1a>
    27c2:	82 17       	cp	r24, r18
    27c4:	41 f0       	breq	.+16     	; 0x27d6 <__vector_25+0x50>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    27c6:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <Serial+0x19>
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	e4 59       	subi	r30, 0x94	; 148
    27ce:	fc 4f       	sbci	r31, 0xFC	; 252
    27d0:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    27d2:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <Serial+0x19>
__vector_25():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    27d6:	ff 91       	pop	r31
    27d8:	ef 91       	pop	r30
    27da:	9f 91       	pop	r25
    27dc:	8f 91       	pop	r24
    27de:	2f 91       	pop	r18
    27e0:	0f 90       	pop	r0
    27e2:	0b be       	out	0x3b, r0	; 59
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	0f 90       	pop	r0
    27ea:	1f 90       	pop	r1
    27ec:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    27ee:	80 81       	ld	r24, Z
__vector_25():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    27f0:	f2 cf       	rjmp	.-28     	; 0x27d6 <__vector_25+0x50>

000027f2 <__vector_26>:
__vector_26():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    27f2:	1f 92       	push	r1
    27f4:	0f 92       	push	r0
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	0f 92       	push	r0
    27fa:	11 24       	eor	r1, r1
    27fc:	0b b6       	in	r0, 0x3b	; 59
    27fe:	0f 92       	push	r0
    2800:	2f 93       	push	r18
    2802:	3f 93       	push	r19
    2804:	4f 93       	push	r20
    2806:	5f 93       	push	r21
    2808:	6f 93       	push	r22
    280a:	7f 93       	push	r23
    280c:	8f 93       	push	r24
    280e:	9f 93       	push	r25
    2810:	af 93       	push	r26
    2812:	bf 93       	push	r27
    2814:	ef 93       	push	r30
    2816:	ff 93       	push	r31
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2818:	8c e6       	ldi	r24, 0x6C	; 108
    281a:	93 e0       	ldi	r25, 0x03	; 3
    281c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2820:	ff 91       	pop	r31
    2822:	ef 91       	pop	r30
    2824:	bf 91       	pop	r27
    2826:	af 91       	pop	r26
    2828:	9f 91       	pop	r25
    282a:	8f 91       	pop	r24
    282c:	7f 91       	pop	r23
    282e:	6f 91       	pop	r22
    2830:	5f 91       	pop	r21
    2832:	4f 91       	pop	r20
    2834:	3f 91       	pop	r19
    2836:	2f 91       	pop	r18
    2838:	0f 90       	pop	r0
    283a:	0b be       	out	0x3b, r0	; 59
    283c:	0f 90       	pop	r0
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	0f 90       	pop	r0
    2842:	1f 90       	pop	r1
    2844:	18 95       	reti

00002846 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2846:	8c e6       	ldi	r24, 0x6C	; 108
    2848:	93 e0       	ldi	r25, 0x03	; 3
    284a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <HardwareSerial::available()>
    284e:	21 e0       	ldi	r18, 0x01	; 1
    2850:	89 2b       	or	r24, r25
    2852:	09 f4       	brne	.+2      	; 0x2856 <Serial0_available()+0x10>
    2854:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2856:	82 2f       	mov	r24, r18
    2858:	08 95       	ret

0000285a <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    285a:	ec e6       	ldi	r30, 0x6C	; 108
    285c:	f3 e0       	ldi	r31, 0x03	; 3
    285e:	13 82       	std	Z+3, r1	; 0x03
    2860:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    2862:	88 ee       	ldi	r24, 0xE8	; 232
    2864:	93 e0       	ldi	r25, 0x03	; 3
    2866:	a0 e0       	ldi	r26, 0x00	; 0
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	84 83       	std	Z+4, r24	; 0x04
    286c:	95 83       	std	Z+5, r25	; 0x05
    286e:	a6 83       	std	Z+6, r26	; 0x06
    2870:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2872:	8c e2       	ldi	r24, 0x2C	; 44
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
    287a:	85 ec       	ldi	r24, 0xC5	; 197
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	95 87       	std	Z+13, r25	; 0x0d
    2880:	84 87       	std	Z+12, r24	; 0x0c
    2882:	84 ec       	ldi	r24, 0xC4	; 196
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	97 87       	std	Z+15, r25	; 0x0f
    2888:	86 87       	std	Z+14, r24	; 0x0e
    288a:	80 ec       	ldi	r24, 0xC0	; 192
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	91 8b       	std	Z+17, r25	; 0x11
    2890:	80 8b       	std	Z+16, r24	; 0x10
    2892:	81 ec       	ldi	r24, 0xC1	; 193
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	93 8b       	std	Z+19, r25	; 0x13
    2898:	82 8b       	std	Z+18, r24	; 0x12
    289a:	82 ec       	ldi	r24, 0xC2	; 194
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	95 8b       	std	Z+21, r25	; 0x15
    28a0:	84 8b       	std	Z+20, r24	; 0x14
    28a2:	86 ec       	ldi	r24, 0xC6	; 198
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	97 8b       	std	Z+23, r25	; 0x17
    28a8:	86 8b       	std	Z+22, r24	; 0x16
    28aa:	11 8e       	std	Z+25, r1	; 0x19
    28ac:	12 8e       	std	Z+26, r1	; 0x1a
    28ae:	13 8e       	std	Z+27, r1	; 0x1b
    28b0:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    28b2:	08 95       	ret

000028b4 <__vector_36>:
__vector_36():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    28b4:	1f 92       	push	r1
    28b6:	0f 92       	push	r0
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	0f 92       	push	r0
    28bc:	11 24       	eor	r1, r1
    28be:	0b b6       	in	r0, 0x3b	; 59
    28c0:	0f 92       	push	r0
    28c2:	2f 93       	push	r18
    28c4:	8f 93       	push	r24
    28c6:	9f 93       	push	r25
    28c8:	ef 93       	push	r30
    28ca:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    28cc:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <Serial1+0x10>
    28d0:	f0 91 1a 04 	lds	r31, 0x041A	; 0x80041a <Serial1+0x11>
    28d4:	80 81       	ld	r24, Z
    28d6:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <Serial1+0x16>
    28da:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <Serial1+0x17>
    28de:	82 fd       	sbrc	r24, 2
    28e0:	1d c0       	rjmp	.+58     	; 0x291c <__vector_36+0x68>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    28e2:	90 81       	ld	r25, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    28e4:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Serial1+0x19>
    28e8:	8f 5f       	subi	r24, 0xFF	; 255
    28ea:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    28ec:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <Serial1+0x1a>
    28f0:	82 17       	cp	r24, r18
    28f2:	41 f0       	breq	.+16     	; 0x2904 <__vector_36+0x50>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    28f4:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <Serial1+0x19>
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	e7 5f       	subi	r30, 0xF7	; 247
    28fc:	fb 4f       	sbci	r31, 0xFB	; 251
    28fe:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2900:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Serial1+0x19>
__vector_36():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    2904:	ff 91       	pop	r31
    2906:	ef 91       	pop	r30
    2908:	9f 91       	pop	r25
    290a:	8f 91       	pop	r24
    290c:	2f 91       	pop	r18
    290e:	0f 90       	pop	r0
    2910:	0b be       	out	0x3b, r0	; 59
    2912:	0f 90       	pop	r0
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	0f 90       	pop	r0
    2918:	1f 90       	pop	r1
    291a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    291c:	80 81       	ld	r24, Z
__vector_36():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    291e:	f2 cf       	rjmp	.-28     	; 0x2904 <__vector_36+0x50>

00002920 <__vector_37>:
__vector_37():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	0b b6       	in	r0, 0x3b	; 59
    292c:	0f 92       	push	r0
    292e:	2f 93       	push	r18
    2930:	3f 93       	push	r19
    2932:	4f 93       	push	r20
    2934:	5f 93       	push	r21
    2936:	6f 93       	push	r22
    2938:	7f 93       	push	r23
    293a:	8f 93       	push	r24
    293c:	9f 93       	push	r25
    293e:	af 93       	push	r26
    2940:	bf 93       	push	r27
    2942:	ef 93       	push	r30
    2944:	ff 93       	push	r31
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    2946:	89 e0       	ldi	r24, 0x09	; 9
    2948:	94 e0       	ldi	r25, 0x04	; 4
    294a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    294e:	ff 91       	pop	r31
    2950:	ef 91       	pop	r30
    2952:	bf 91       	pop	r27
    2954:	af 91       	pop	r26
    2956:	9f 91       	pop	r25
    2958:	8f 91       	pop	r24
    295a:	7f 91       	pop	r23
    295c:	6f 91       	pop	r22
    295e:	5f 91       	pop	r21
    2960:	4f 91       	pop	r20
    2962:	3f 91       	pop	r19
    2964:	2f 91       	pop	r18
    2966:	0f 90       	pop	r0
    2968:	0b be       	out	0x3b, r0	; 59
    296a:	0f 90       	pop	r0
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	0f 90       	pop	r0
    2970:	1f 90       	pop	r1
    2972:	18 95       	reti

00002974 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2974:	89 e0       	ldi	r24, 0x09	; 9
    2976:	94 e0       	ldi	r25, 0x04	; 4
    2978:	0e 94 64 12 	call	0x24c8	; 0x24c8 <HardwareSerial::available()>
    297c:	21 e0       	ldi	r18, 0x01	; 1
    297e:	89 2b       	or	r24, r25
    2980:	09 f4       	brne	.+2      	; 0x2984 <Serial1_available()+0x10>
    2982:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    2984:	82 2f       	mov	r24, r18
    2986:	08 95       	ret

00002988 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    2988:	e9 e0       	ldi	r30, 0x09	; 9
    298a:	f4 e0       	ldi	r31, 0x04	; 4
    298c:	13 82       	std	Z+3, r1	; 0x03
    298e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    2990:	88 ee       	ldi	r24, 0xE8	; 232
    2992:	93 e0       	ldi	r25, 0x03	; 3
    2994:	a0 e0       	ldi	r26, 0x00	; 0
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	84 83       	std	Z+4, r24	; 0x04
    299a:	95 83       	std	Z+5, r25	; 0x05
    299c:	a6 83       	std	Z+6, r26	; 0x06
    299e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    29a0:	8c e2       	ldi	r24, 0x2C	; 44
    29a2:	92 e0       	ldi	r25, 0x02	; 2
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
    29a8:	8d ec       	ldi	r24, 0xCD	; 205
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	95 87       	std	Z+13, r25	; 0x0d
    29ae:	84 87       	std	Z+12, r24	; 0x0c
    29b0:	8c ec       	ldi	r24, 0xCC	; 204
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	97 87       	std	Z+15, r25	; 0x0f
    29b6:	86 87       	std	Z+14, r24	; 0x0e
    29b8:	88 ec       	ldi	r24, 0xC8	; 200
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	91 8b       	std	Z+17, r25	; 0x11
    29be:	80 8b       	std	Z+16, r24	; 0x10
    29c0:	89 ec       	ldi	r24, 0xC9	; 201
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	93 8b       	std	Z+19, r25	; 0x13
    29c6:	82 8b       	std	Z+18, r24	; 0x12
    29c8:	8a ec       	ldi	r24, 0xCA	; 202
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	95 8b       	std	Z+21, r25	; 0x15
    29ce:	84 8b       	std	Z+20, r24	; 0x14
    29d0:	8e ec       	ldi	r24, 0xCE	; 206
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	97 8b       	std	Z+23, r25	; 0x17
    29d6:	86 8b       	std	Z+22, r24	; 0x16
    29d8:	11 8e       	std	Z+25, r1	; 0x19
    29da:	12 8e       	std	Z+26, r1	; 0x1a
    29dc:	13 8e       	std	Z+27, r1	; 0x1b
    29de:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    29e0:	08 95       	ret

000029e2 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    29e2:	af 92       	push	r10
    29e4:	bf 92       	push	r11
    29e6:	cf 92       	push	r12
    29e8:	df 92       	push	r13
    29ea:	ef 92       	push	r14
    29ec:	ff 92       	push	r15
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	6c 01       	movw	r12, r24
    29f8:	7b 01       	movw	r14, r22
    29fa:	8b 01       	movw	r16, r22
    29fc:	04 0f       	add	r16, r20
    29fe:	15 1f       	adc	r17, r21
    2a00:	eb 01       	movw	r28, r22
    2a02:	5e 01       	movw	r10, r28
    2a04:	ae 18       	sub	r10, r14
    2a06:	bf 08       	sbc	r11, r15
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    2a08:	c0 17       	cp	r28, r16
    2a0a:	d1 07       	cpc	r29, r17
    2a0c:	59 f0       	breq	.+22     	; 0x2a24 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    2a0e:	69 91       	ld	r22, Y+
    2a10:	d6 01       	movw	r26, r12
    2a12:	ed 91       	ld	r30, X+
    2a14:	fc 91       	ld	r31, X
    2a16:	01 90       	ld	r0, Z+
    2a18:	f0 81       	ld	r31, Z
    2a1a:	e0 2d       	mov	r30, r0
    2a1c:	c6 01       	movw	r24, r12
    2a1e:	19 95       	eicall
    2a20:	89 2b       	or	r24, r25
    2a22:	79 f7       	brne	.-34     	; 0x2a02 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    2a24:	c5 01       	movw	r24, r10
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	ff 90       	pop	r15
    2a30:	ef 90       	pop	r14
    2a32:	df 90       	pop	r13
    2a34:	cf 90       	pop	r12
    2a36:	bf 90       	pop	r11
    2a38:	af 90       	pop	r10
    2a3a:	08 95       	ret

00002a3c <tone(unsigned char, unsigned int, unsigned long)>:
_Z4tonehjm():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:281


// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    2a3c:	4f 92       	push	r4
    2a3e:	5f 92       	push	r5
    2a40:	6f 92       	push	r6
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <tone(unsigned char, unsigned int, unsigned long)+0x22>
    2a5e:	1f 92       	push	r1
    2a60:	1f 92       	push	r1
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	8b 01       	movw	r16, r22
    2a68:	29 01       	movw	r4, r18
    2a6a:	3a 01       	movw	r6, r20
toneBegin():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:171
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2a6c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <tone_pins>
    2a70:	89 17       	cp	r24, r25
    2a72:	c9 f0       	breq	.+50     	; 0x2aa6 <tone(unsigned char, unsigned int, unsigned long)+0x6a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:178
    }
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    2a74:	9f 3f       	cpi	r25, 0xFF	; 255
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
    2a78:	eb c0       	rjmp	.+470    	; 0x2c50 <tone(unsigned char, unsigned int, unsigned long)+0x214>
_Z4tonehjm():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
    2a94:	bf 90       	pop	r11
    2a96:	af 90       	pop	r10
    2a98:	9f 90       	pop	r9
    2a9a:	8f 90       	pop	r8
    2a9c:	7f 90       	pop	r7
    2a9e:	6f 90       	pop	r6
    2aa0:	5f 90       	pop	r5
    2aa2:	4f 90       	pop	r4
    2aa4:	08 95       	ret
toneBegin():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:172
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    2aa6:	e8 e2       	ldi	r30, 0x28	; 40
    2aa8:	f3 e0       	ldi	r31, 0x03	; 3
    2aaa:	24 91       	lpm	r18, Z
    2aac:	2d 83       	std	Y+5, r18	; 0x05
_Z4tonehjm():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    2aae:	27 fd       	sbrc	r18, 7
    2ab0:	e4 cf       	rjmp	.-56     	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    2ab8:	2d 81       	ldd	r18, Y+5	; 0x05
    2aba:	22 23       	and	r18, r18
    2abc:	21 f0       	breq	.+8      	; 0x2ac6 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295 (discriminator 1)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
    2ac4:	e5 c1       	rjmp	.+970    	; 0x2e90 <tone(unsigned char, unsigned int, unsigned long)+0x454>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:297
    {
      ocr = F_CPU / frequency / 2 - 1;
    2ac6:	48 01       	movw	r8, r16
    2ac8:	b1 2c       	mov	r11, r1
    2aca:	a1 2c       	mov	r10, r1
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	79 e0       	ldi	r23, 0x09	; 9
    2ad0:	8d e3       	ldi	r24, 0x3D	; 61
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a5 01       	movw	r20, r10
    2ad6:	98 01       	movw	r18, r16
    2ad8:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2adc:	29 83       	std	Y+1, r18	; 0x01
    2ade:	3a 83       	std	Y+2, r19	; 0x02
    2ae0:	4b 83       	std	Y+3, r20	; 0x03
    2ae2:	5c 83       	std	Y+4, r21	; 0x04
    2ae4:	69 01       	movw	r12, r18
    2ae6:	7a 01       	movw	r14, r20
    2ae8:	91 e0       	ldi	r25, 0x01	; 1
    2aea:	c9 1a       	sub	r12, r25
    2aec:	d1 08       	sbc	r13, r1
    2aee:	e1 08       	sbc	r14, r1
    2af0:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:299
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    2af2:	2f ef       	ldi	r18, 0xFF	; 255
    2af4:	c2 16       	cp	r12, r18
    2af6:	d1 04       	cpc	r13, r1
    2af8:	e1 04       	cpc	r14, r1
    2afa:	f1 04       	cpc	r15, r1
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <tone(unsigned char, unsigned int, unsigned long)+0xc4>
    2afe:	0c f4       	brge	.+2      	; 0x2b02 <tone(unsigned char, unsigned int, unsigned long)+0xc6>
    2b00:	a8 c1       	rjmp	.+848    	; 0x2e52 <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:301
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    2b02:	60 e2       	ldi	r22, 0x20	; 32
    2b04:	71 ea       	ldi	r23, 0xA1	; 161
    2b06:	87 e0       	ldi	r24, 0x07	; 7
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a5 01       	movw	r20, r10
    2b0c:	98 01       	movw	r18, r16
    2b0e:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2b12:	69 01       	movw	r12, r18
    2b14:	7a 01       	movw	r14, r20
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	c8 1a       	sub	r12, r24
    2b1a:	d1 08       	sbc	r13, r1
    2b1c:	e1 08       	sbc	r14, r1
    2b1e:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2b20:	9d 81       	ldd	r25, Y+5	; 0x05
    2b22:	92 30       	cpi	r25, 0x02	; 2
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <tone(unsigned char, unsigned int, unsigned long)+0xec>
    2b26:	d6 c2       	rjmp	.+1452   	; 0x30d4 <tone(unsigned char, unsigned int, unsigned long)+0x698>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302 (discriminator 1)
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2b28:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304 (discriminator 1)

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2b2a:	2f ef       	ldi	r18, 0xFF	; 255
    2b2c:	c2 16       	cp	r12, r18
    2b2e:	d1 04       	cpc	r13, r1
    2b30:	e1 04       	cpc	r14, r1
    2b32:	f1 04       	cpc	r15, r1
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <tone(unsigned char, unsigned int, unsigned long)+0xfc>
    2b36:	0c f4       	brge	.+2      	; 0x2b3a <tone(unsigned char, unsigned int, unsigned long)+0xfe>
    2b38:	6f c0       	rjmp	.+222    	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:306
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2b3a:	68 e4       	ldi	r22, 0x48	; 72
    2b3c:	78 ee       	ldi	r23, 0xE8	; 232
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	a5 01       	movw	r20, r10
    2b44:	98 01       	movw	r18, r16
    2b46:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2b4a:	69 01       	movw	r12, r18
    2b4c:	7a 01       	movw	r14, r20
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	c8 1a       	sub	r12, r24
    2b52:	d1 08       	sbc	r13, r1
    2b54:	e1 08       	sbc	r14, r1
    2b56:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:307
          prescalarbits = 0b011;
    2b58:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        }

        if (ocr > 255)
    2b5a:	9f ef       	ldi	r25, 0xFF	; 255
    2b5c:	c9 16       	cp	r12, r25
    2b5e:	d1 04       	cpc	r13, r1
    2b60:	e1 04       	cpc	r14, r1
    2b62:	f1 04       	cpc	r15, r1
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <tone(unsigned char, unsigned int, unsigned long)+0x12c>
    2b66:	0c f4       	brge	.+2      	; 0x2b6a <tone(unsigned char, unsigned int, unsigned long)+0x12e>
    2b68:	57 c0       	rjmp	.+174    	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2b6a:	64 e2       	ldi	r22, 0x24	; 36
    2b6c:	74 ef       	ldi	r23, 0xF4	; 244
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	a5 01       	movw	r20, r10
    2b74:	98 01       	movw	r18, r16
    2b76:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2b7a:	69 01       	movw	r12, r18
    2b7c:	7a 01       	movw	r14, r20
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	c8 1a       	sub	r12, r24
    2b82:	d1 08       	sbc	r13, r1
    2b84:	e1 08       	sbc	r14, r1
    2b86:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:313
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b011 : 0b100;
    2b88:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:315

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2b8a:	9f ef       	ldi	r25, 0xFF	; 255
    2b8c:	c9 16       	cp	r12, r25
    2b8e:	d1 04       	cpc	r13, r1
    2b90:	e1 04       	cpc	r14, r1
    2b92:	f1 04       	cpc	r15, r1
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <tone(unsigned char, unsigned int, unsigned long)+0x15c>
    2b96:	08 f4       	brcc	.+2      	; 0x2b9a <tone(unsigned char, unsigned int, unsigned long)+0x15e>
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:317
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    2b9a:	62 e1       	ldi	r22, 0x12	; 18
    2b9c:	7a e7       	ldi	r23, 0x7A	; 122
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	a5 01       	movw	r20, r10
    2ba4:	98 01       	movw	r18, r16
    2ba6:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2baa:	69 01       	movw	r12, r18
    2bac:	7a 01       	movw	r14, r20
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	c8 1a       	sub	r12, r24
    2bb2:	d1 08       	sbc	r13, r1
    2bb4:	e1 08       	sbc	r14, r1
    2bb6:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:318
            prescalarbits = 0b101;
    2bb8:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          }

          if (ocr > 255)
    2bba:	9f ef       	ldi	r25, 0xFF	; 255
    2bbc:	c9 16       	cp	r12, r25
    2bbe:	d1 04       	cpc	r13, r1
    2bc0:	e1 04       	cpc	r14, r1
    2bc2:	f1 04       	cpc	r15, r1
    2bc4:	49 f1       	breq	.+82     	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
    2bc6:	40 f1       	brcs	.+80     	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2bc8:	69 e0       	ldi	r22, 0x09	; 9
    2bca:	7d e3       	ldi	r23, 0x3D	; 61
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a5 01       	movw	r20, r10
    2bd2:	98 01       	movw	r18, r16
    2bd4:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2bd8:	69 01       	movw	r12, r18
    2bda:	7a 01       	movw	r14, r20
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	c8 1a       	sub	r12, r24
    2be0:	d1 08       	sbc	r13, r1
    2be2:	e1 08       	sbc	r14, r1
    2be4:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:324
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
    2be6:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            if (ocr > 255)
    2be8:	9f ef       	ldi	r25, 0xFF	; 255
    2bea:	c9 16       	cp	r12, r25
    2bec:	d1 04       	cpc	r13, r1
    2bee:	e1 04       	cpc	r14, r1
    2bf0:	f1 04       	cpc	r15, r1
    2bf2:	91 f0       	breq	.+36     	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
    2bf4:	88 f0       	brcs	.+34     	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2bf6:	c9 80       	ldd	r12, Y+1	; 0x01
    2bf8:	da 80       	ldd	r13, Y+2	; 0x02
    2bfa:	eb 80       	ldd	r14, Y+3	; 0x03
    2bfc:	fc 80       	ldd	r15, Y+4	; 0x04
    2bfe:	8a e0       	ldi	r24, 0x0A	; 10
    2c00:	f5 94       	asr	r15
    2c02:	e7 94       	ror	r14
    2c04:	d7 94       	ror	r13
    2c06:	c7 94       	ror	r12
    2c08:	8a 95       	dec	r24
    2c0a:	d1 f7       	brne	.-12     	; 0x2c00 <tone(unsigned char, unsigned int, unsigned long)+0x1c4>
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	c9 1a       	sub	r12, r25
    2c10:	d1 08       	sbc	r13, r1
    2c12:	e1 08       	sbc	r14, r1
    2c14:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    2c16:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:344
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    2c18:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2c1c:	98 7f       	andi	r25, 0xF8	; 248
    2c1e:	89 2b       	or	r24, r25
    2c20:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2c24:	2f ef       	ldi	r18, 0xFF	; 255
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	a9 01       	movw	r20, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2c2a:	41 14       	cp	r4, r1
    2c2c:	51 04       	cpc	r5, r1
    2c2e:	61 04       	cpc	r6, r1
    2c30:	71 04       	cpc	r7, r1
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <tone(unsigned char, unsigned int, unsigned long)+0x1fa>
    2c34:	1f c1       	rjmp	.+574    	; 0x2e74 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2c36:	9d 81       	ldd	r25, Y+5	; 0x05
    2c38:	92 30       	cpi	r25, 0x02	; 2
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <tone(unsigned char, unsigned int, unsigned long)+0x202>
    2c3c:	f9 c1       	rjmp	.+1010   	; 0x3030 <tone(unsigned char, unsigned int, unsigned long)+0x5f4>
    2c3e:	0c f0       	brlt	.+2      	; 0x2c42 <tone(unsigned char, unsigned int, unsigned long)+0x206>
    2c40:	e0 c1       	rjmp	.+960    	; 0x3002 <tone(unsigned char, unsigned int, unsigned long)+0x5c6>
    2c42:	99 23       	and	r25, r25
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <tone(unsigned char, unsigned int, unsigned long)+0x20c>
    2c46:	e5 c1       	rjmp	.+970    	; 0x3012 <tone(unsigned char, unsigned int, unsigned long)+0x5d6>
    2c48:	91 30       	cpi	r25, 0x01	; 1
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <tone(unsigned char, unsigned int, unsigned long)+0x212>
    2c4c:	4a c1       	rjmp	.+660    	; 0x2ee2 <tone(unsigned char, unsigned int, unsigned long)+0x4a6>
    2c4e:	15 cf       	rjmp	.-470    	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
toneBegin():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:179
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    2c50:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <tone_pins>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:180
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2c54:	e8 e2       	ldi	r30, 0x28	; 40
    2c56:	f3 e0       	ldi	r31, 0x03	; 3
    2c58:	94 91       	lpm	r25, Z
    2c5a:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:185
      break;
    }
  }

  if (_timer != -1)
    2c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <tone(unsigned char, unsigned int, unsigned long)+0x226>
    2c60:	0c cf       	rjmp	.-488    	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    2c62:	92 30       	cpi	r25, 0x02	; 2
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <tone(unsigned char, unsigned int, unsigned long)+0x22c>
    2c66:	81 c0       	rjmp	.+258    	; 0x2d6a <tone(unsigned char, unsigned int, unsigned long)+0x32e>
    2c68:	60 f4       	brcc	.+24     	; 0x2c82 <tone(unsigned char, unsigned int, unsigned long)+0x246>
    2c6a:	99 23       	and	r25, r25
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <tone(unsigned char, unsigned int, unsigned long)+0x234>
    2c6e:	37 c0       	rjmp	.+110    	; 0x2cde <tone(unsigned char, unsigned int, unsigned long)+0x2a2>
    2c70:	91 30       	cpi	r25, 0x01	; 1
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <tone(unsigned char, unsigned int, unsigned long)+0x23a>
    2c74:	54 c0       	rjmp	.+168    	; 0x2d1e <tone(unsigned char, unsigned int, unsigned long)+0x2e2>
_Z4tonehjm():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    2c76:	97 fd       	sbrc	r25, 7
    2c78:	00 cf       	rjmp	.-512    	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pinMode>
    2c80:	1e cf       	rjmp	.-452    	; 0x2abe <tone(unsigned char, unsigned int, unsigned long)+0x82>
toneBegin():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    2c82:	2d 81       	ldd	r18, Y+5	; 0x05
    2c84:	24 30       	cpi	r18, 0x04	; 4
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <tone(unsigned char, unsigned int, unsigned long)+0x24e>
    2c88:	be c0       	rjmp	.+380    	; 0x2e06 <tone(unsigned char, unsigned int, unsigned long)+0x3ca>
    2c8a:	08 f4       	brcc	.+2      	; 0x2c8e <tone(unsigned char, unsigned int, unsigned long)+0x252>
    2c8c:	94 c0       	rjmp	.+296    	; 0x2db6 <tone(unsigned char, unsigned int, unsigned long)+0x37a>
    2c8e:	25 30       	cpi	r18, 0x05	; 5
    2c90:	91 f7       	brne	.-28     	; 0x2c76 <tone(unsigned char, unsigned int, unsigned long)+0x23a>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:262
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    2c92:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:263
        TCCR5B = 0;
    2c96:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:264
        bitWrite(TCCR5B, WGM52, 1);
    2c9a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2c9e:	98 60       	ori	r25, 0x08	; 8
    2ca0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:265
        bitWrite(TCCR5B, CS50, 1);
    2ca4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2ca8:	91 60       	ori	r25, 0x01	; 1
    2caa:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:266
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	ec 57       	subi	r30, 0x7C	; 124
    2cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb8:	e4 91       	lpm	r30, Z
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	ec 50       	subi	r30, 0x0C	; 12
    2cc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc4:	45 91       	lpm	r20, Z+
    2cc6:	54 91       	lpm	r21, Z
    2cc8:	50 93 a8 04 	sts	0x04A8, r21	; 0x8004a8 <timer5_pin_port+0x1>
    2ccc:	40 93 a7 04 	sts	0x04A7, r20	; 0x8004a7 <timer5_pin_port>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:267
        timer5_pin_mask = digitalPinToBitMask(_pin);
    2cd0:	f9 01       	movw	r30, r18
    2cd2:	e2 5d       	subi	r30, 0xD2	; 210
    2cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd6:	e4 91       	lpm	r30, Z
    2cd8:	e0 93 a6 04 	sts	0x04A6, r30	; 0x8004a6 <timer5_pin_mask>
    2cdc:	ea ce       	rjmp	.-556    	; 0x2ab2 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:196
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    2cde:	14 bc       	out	0x24, r1	; 36
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:197
        TCCR0B = 0;
    2ce0:	15 bc       	out	0x25, r1	; 37
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:198
        bitWrite(TCCR0A, WGM01, 1);
    2ce2:	94 b5       	in	r25, 0x24	; 36
    2ce4:	92 60       	ori	r25, 0x02	; 2
    2ce6:	94 bd       	out	0x24, r25	; 36
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:199
        bitWrite(TCCR0B, CS00, 1);
    2ce8:	95 b5       	in	r25, 0x25	; 37
    2cea:	91 60       	ori	r25, 0x01	; 1
    2cec:	95 bd       	out	0x25, r25	; 37
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:200
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	f9 01       	movw	r30, r18
    2cf4:	ec 57       	subi	r30, 0x7C	; 124
    2cf6:	fd 4f       	sbci	r31, 0xFD	; 253
    2cf8:	e4 91       	lpm	r30, Z
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	ee 0f       	add	r30, r30
    2cfe:	ff 1f       	adc	r31, r31
    2d00:	ec 50       	subi	r30, 0x0C	; 12
    2d02:	fd 4f       	sbci	r31, 0xFD	; 253
    2d04:	45 91       	lpm	r20, Z+
    2d06:	54 91       	lpm	r21, Z
    2d08:	50 93 cb 04 	sts	0x04CB, r21	; 0x8004cb <timer0_pin_port+0x1>
    2d0c:	40 93 ca 04 	sts	0x04CA, r20	; 0x8004ca <timer0_pin_port>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:201
        timer0_pin_mask = digitalPinToBitMask(_pin);
    2d10:	f9 01       	movw	r30, r18
    2d12:	e2 5d       	subi	r30, 0xD2	; 210
    2d14:	fd 4f       	sbci	r31, 0xFD	; 253
    2d16:	e4 91       	lpm	r30, Z
    2d18:	e0 93 c9 04 	sts	0x04C9, r30	; 0x8004c9 <timer0_pin_mask>
    2d1c:	ca ce       	rjmp	.-620    	; 0x2ab2 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:208
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    2d1e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:209
        TCCR1B = 0;
    2d22:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:210
        bitWrite(TCCR1B, WGM12, 1);
    2d26:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2d2a:	98 60       	ori	r25, 0x08	; 8
    2d2c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:211
        bitWrite(TCCR1B, CS10, 1);
    2d30:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2d34:	91 60       	ori	r25, 0x01	; 1
    2d36:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:212
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	f9 01       	movw	r30, r18
    2d40:	ec 57       	subi	r30, 0x7C	; 124
    2d42:	fd 4f       	sbci	r31, 0xFD	; 253
    2d44:	e4 91       	lpm	r30, Z
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	ee 0f       	add	r30, r30
    2d4a:	ff 1f       	adc	r31, r31
    2d4c:	ec 50       	subi	r30, 0x0C	; 12
    2d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d50:	45 91       	lpm	r20, Z+
    2d52:	54 91       	lpm	r21, Z
    2d54:	50 93 c4 04 	sts	0x04C4, r21	; 0x8004c4 <timer1_pin_port+0x1>
    2d58:	40 93 c3 04 	sts	0x04C3, r20	; 0x8004c3 <timer1_pin_port>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:213
        timer1_pin_mask = digitalPinToBitMask(_pin);
    2d5c:	f9 01       	movw	r30, r18
    2d5e:	e2 5d       	subi	r30, 0xD2	; 210
    2d60:	fd 4f       	sbci	r31, 0xFD	; 253
    2d62:	e4 91       	lpm	r30, Z
    2d64:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <timer1_pin_mask>
    2d68:	a4 ce       	rjmp	.-696    	; 0x2ab2 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:220
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    2d6a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:221
        TCCR2B = 0;
    2d6e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:222
        bitWrite(TCCR2A, WGM21, 1);
    2d72:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2d76:	92 60       	ori	r25, 0x02	; 2
    2d78:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:223
        bitWrite(TCCR2B, CS20, 1);
    2d7c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2d80:	91 60       	ori	r25, 0x01	; 1
    2d82:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:224
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	f9 01       	movw	r30, r18
    2d8c:	ec 57       	subi	r30, 0x7C	; 124
    2d8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d90:	e4 91       	lpm	r30, Z
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	ee 0f       	add	r30, r30
    2d96:	ff 1f       	adc	r31, r31
    2d98:	ec 50       	subi	r30, 0x0C	; 12
    2d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d9c:	45 91       	lpm	r20, Z+
    2d9e:	54 91       	lpm	r21, Z
    2da0:	50 93 bd 04 	sts	0x04BD, r21	; 0x8004bd <timer2_pin_port+0x1>
    2da4:	40 93 bc 04 	sts	0x04BC, r20	; 0x8004bc <timer2_pin_port>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:225
        timer2_pin_mask = digitalPinToBitMask(_pin);
    2da8:	f9 01       	movw	r30, r18
    2daa:	e2 5d       	subi	r30, 0xD2	; 210
    2dac:	fd 4f       	sbci	r31, 0xFD	; 253
    2dae:	e4 91       	lpm	r30, Z
    2db0:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <timer2_pin_mask>
    2db4:	7e ce       	rjmp	.-772    	; 0x2ab2 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:232
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    2db6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:233
        TCCR3B = 0;
    2dba:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:234
        bitWrite(TCCR3B, WGM32, 1);
    2dbe:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2dc2:	98 60       	ori	r25, 0x08	; 8
    2dc4:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:235
        bitWrite(TCCR3B, CS30, 1);
    2dc8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2dcc:	91 60       	ori	r25, 0x01	; 1
    2dce:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:236
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	f9 01       	movw	r30, r18
    2dd8:	ec 57       	subi	r30, 0x7C	; 124
    2dda:	fd 4f       	sbci	r31, 0xFD	; 253
    2ddc:	e4 91       	lpm	r30, Z
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	ee 0f       	add	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	ec 50       	subi	r30, 0x0C	; 12
    2de6:	fd 4f       	sbci	r31, 0xFD	; 253
    2de8:	45 91       	lpm	r20, Z+
    2dea:	54 91       	lpm	r21, Z
    2dec:	50 93 b6 04 	sts	0x04B6, r21	; 0x8004b6 <timer3_pin_port+0x1>
    2df0:	40 93 b5 04 	sts	0x04B5, r20	; 0x8004b5 <timer3_pin_port>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:237
        timer3_pin_mask = digitalPinToBitMask(_pin);
    2df4:	f9 01       	movw	r30, r18
    2df6:	e2 5d       	subi	r30, 0xD2	; 210
    2df8:	fd 4f       	sbci	r31, 0xFD	; 253
    2dfa:	e4 91       	lpm	r30, Z
    2dfc:	e0 93 b4 04 	sts	0x04B4, r30	; 0x8004b4 <timer3_pin_mask>
    2e00:	93 e0       	ldi	r25, 0x03	; 3
    2e02:	9d 83       	std	Y+5, r25	; 0x05
    2e04:	56 ce       	rjmp	.-852    	; 0x2ab2 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:244
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    2e06:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:245
        TCCR4B = 0;
    2e0a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:247
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    2e0e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2e12:	98 60       	ori	r25, 0x08	; 8
    2e14:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:253
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    2e18:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2e1c:	91 60       	ori	r25, 0x01	; 1
    2e1e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:254
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	f9 01       	movw	r30, r18
    2e28:	ec 57       	subi	r30, 0x7C	; 124
    2e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e2c:	e4 91       	lpm	r30, Z
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	ee 0f       	add	r30, r30
    2e32:	ff 1f       	adc	r31, r31
    2e34:	ec 50       	subi	r30, 0x0C	; 12
    2e36:	fd 4f       	sbci	r31, 0xFD	; 253
    2e38:	45 91       	lpm	r20, Z+
    2e3a:	54 91       	lpm	r21, Z
    2e3c:	50 93 af 04 	sts	0x04AF, r21	; 0x8004af <timer4_pin_port+0x1>
    2e40:	40 93 ae 04 	sts	0x04AE, r20	; 0x8004ae <timer4_pin_port>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:255
        timer4_pin_mask = digitalPinToBitMask(_pin);
    2e44:	f9 01       	movw	r30, r18
    2e46:	e2 5d       	subi	r30, 0xD2	; 210
    2e48:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4a:	e4 91       	lpm	r30, Z
    2e4c:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <timer4_pin_mask>
    2e50:	30 ce       	rjmp	.-928    	; 0x2ab2 <tone(unsigned char, unsigned int, unsigned long)+0x76>
_Z4tonehjm():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:298

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    2e52:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:336
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2e54:	2d 81       	ldd	r18, Y+5	; 0x05
    2e56:	21 11       	cpse	r18, r1
    2e58:	df ce       	rjmp	.-578    	; 0x2c18 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:338
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    2e5a:	95 b5       	in	r25, 0x25	; 37
    2e5c:	98 7f       	andi	r25, 0xF8	; 248
    2e5e:	89 2b       	or	r24, r25
    2e60:	85 bd       	out	0x25, r24	; 37
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2e62:	2f ef       	ldi	r18, 0xFF	; 255
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	a9 01       	movw	r20, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2e68:	41 14       	cp	r4, r1
    2e6a:	51 04       	cpc	r5, r1
    2e6c:	61 04       	cpc	r6, r1
    2e6e:	71 04       	cpc	r7, r1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <tone(unsigned char, unsigned int, unsigned long)+0x438>
    2e72:	cf c0       	rjmp	.+414    	; 0x3012 <tone(unsigned char, unsigned int, unsigned long)+0x5d6>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:389
    {
      toggle_count = 2 * frequency * duration / 1000;
    2e74:	d8 01       	movw	r26, r16
    2e76:	aa 0f       	add	r26, r26
    2e78:	bb 1f       	adc	r27, r27
    2e7a:	a3 01       	movw	r20, r6
    2e7c:	92 01       	movw	r18, r4
    2e7e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__muluhisi3>
    2e82:	28 ee       	ldi	r18, 0xE8	; 232
    2e84:	33 e0       	ldi	r19, 0x03	; 3
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	0e 94 34 19 	call	0x3268	; 0x3268 <__udivmodsi4>
    2e8e:	d3 ce       	rjmp	.-602    	; 0x2c36 <tone(unsigned char, unsigned int, unsigned long)+0x1fa>
    2e90:	b1 2c       	mov	r11, r1
    2e92:	a1 2c       	mov	r10, r1
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	79 e0       	ldi	r23, 0x09	; 9
    2e98:	8d e3       	ldi	r24, 0x3D	; 61
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a5 01       	movw	r20, r10
    2e9e:	98 01       	movw	r18, r16
    2ea0:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2ea4:	69 01       	movw	r12, r18
    2ea6:	7a 01       	movw	r14, r20
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	c8 1a       	sub	r12, r24
    2eac:	d1 08       	sbc	r13, r1
    2eae:	e1 08       	sbc	r14, r1
    2eb0:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:358
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    2eb2:	c1 14       	cp	r12, r1
    2eb4:	d1 04       	cpc	r13, r1
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	e9 06       	cpc	r14, r25
    2eba:	f1 04       	cpc	r15, r1
    2ebc:	24 f5       	brge	.+72     	; 0x2f06 <tone(unsigned char, unsigned int, unsigned long)+0x4ca>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:357
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:364
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    2ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec2:	21 30       	cpi	r18, 0x01	; 1
    2ec4:	89 f5       	brne	.+98     	; 0x2f28 <tone(unsigned char, unsigned int, unsigned long)+0x4ec>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:367
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    2ec6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2eca:	88 7f       	andi	r24, 0xF8	; 248
    2ecc:	89 2b       	or	r24, r25
    2ece:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2ed2:	2f ef       	ldi	r18, 0xFF	; 255
    2ed4:	3f ef       	ldi	r19, 0xFF	; 255
    2ed6:	a9 01       	movw	r20, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2ed8:	41 14       	cp	r4, r1
    2eda:	51 04       	cpc	r5, r1
    2edc:	61 04       	cpc	r6, r1
    2ede:	71 04       	cpc	r7, r1
    2ee0:	49 f6       	brne	.-110    	; 0x2e74 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:412
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    2ee2:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    2ee6:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:413
        timer1_toggle_count = toggle_count;
    2eea:	20 93 c5 04 	sts	0x04C5, r18	; 0x8004c5 <timer1_toggle_count>
    2eee:	30 93 c6 04 	sts	0x04C6, r19	; 0x8004c6 <timer1_toggle_count+0x1>
    2ef2:	40 93 c7 04 	sts	0x04C7, r20	; 0x8004c7 <timer1_toggle_count+0x2>
    2ef6:	50 93 c8 04 	sts	0x04C8, r21	; 0x8004c8 <timer1_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:414
        bitWrite(TIMSK1, OCIE1A, 1);
    2efa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    2efe:	82 60       	ori	r24, 0x02	; 2
    2f00:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:421
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    2f04:	ba cd       	rjmp	.-1164   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:360
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    2f06:	64 e2       	ldi	r22, 0x24	; 36
    2f08:	74 ef       	ldi	r23, 0xF4	; 244
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a5 01       	movw	r20, r10
    2f10:	98 01       	movw	r18, r16
    2f12:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    2f16:	69 01       	movw	r12, r18
    2f18:	7a 01       	movw	r14, r20
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	c8 1a       	sub	r12, r24
    2f1e:	d1 08       	sbc	r13, r1
    2f20:	e1 08       	sbc	r14, r1
    2f22:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:361
        prescalarbits = 0b011;
    2f24:	93 e0       	ldi	r25, 0x03	; 3
    2f26:	cc cf       	rjmp	.-104    	; 0x2ec0 <tone(unsigned char, unsigned int, unsigned long)+0x484>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:371
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	83 30       	cpi	r24, 0x03	; 3
    2f2c:	09 f5       	brne	.+66     	; 0x2f70 <tone(unsigned char, unsigned int, unsigned long)+0x534>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:372
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    2f2e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2f32:	88 7f       	andi	r24, 0xF8	; 248
    2f34:	89 2b       	or	r24, r25
    2f36:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2f3a:	2f ef       	ldi	r18, 0xFF	; 255
    2f3c:	3f ef       	ldi	r19, 0xFF	; 255
    2f3e:	a9 01       	movw	r20, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2f40:	41 14       	cp	r4, r1
    2f42:	51 04       	cpc	r5, r1
    2f44:	61 04       	cpc	r6, r1
    2f46:	71 04       	cpc	r7, r1
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <tone(unsigned char, unsigned int, unsigned long)+0x510>
    2f4a:	94 cf       	rjmp	.-216    	; 0x2e74 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:433
        break;
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    2f4c:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2f50:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:434
        timer3_toggle_count = toggle_count;
    2f54:	20 93 b7 04 	sts	0x04B7, r18	; 0x8004b7 <timer3_toggle_count>
    2f58:	30 93 b8 04 	sts	0x04B8, r19	; 0x8004b8 <timer3_toggle_count+0x1>
    2f5c:	40 93 b9 04 	sts	0x04B9, r20	; 0x8004b9 <timer3_toggle_count+0x2>
    2f60:	50 93 ba 04 	sts	0x04BA, r21	; 0x8004ba <timer3_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:435
        bitWrite(TIMSK3, OCIE3A, 1);
    2f64:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2f68:	82 60       	ori	r24, 0x02	; 2
    2f6a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:436
        break;
    2f6e:	85 cd       	rjmp	.-1270   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:375
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    2f70:	2d 81       	ldd	r18, Y+5	; 0x05
    2f72:	24 30       	cpi	r18, 0x04	; 4
    2f74:	09 f5       	brne	.+66     	; 0x2fb8 <tone(unsigned char, unsigned int, unsigned long)+0x57c>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:376
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    2f76:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2f7a:	88 7f       	andi	r24, 0xF8	; 248
    2f7c:	89 2b       	or	r24, r25
    2f7e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2f82:	2f ef       	ldi	r18, 0xFF	; 255
    2f84:	3f ef       	ldi	r19, 0xFF	; 255
    2f86:	a9 01       	movw	r20, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2f88:	41 14       	cp	r4, r1
    2f8a:	51 04       	cpc	r5, r1
    2f8c:	61 04       	cpc	r6, r1
    2f8e:	71 04       	cpc	r7, r1
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <tone(unsigned char, unsigned int, unsigned long)+0x558>
    2f92:	70 cf       	rjmp	.-288    	; 0x2e74 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:441
        break;
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    2f94:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2f98:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:442
        timer4_toggle_count = toggle_count;
    2f9c:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <timer4_toggle_count>
    2fa0:	30 93 b1 04 	sts	0x04B1, r19	; 0x8004b1 <timer4_toggle_count+0x1>
    2fa4:	40 93 b2 04 	sts	0x04B2, r20	; 0x8004b2 <timer4_toggle_count+0x2>
    2fa8:	50 93 b3 04 	sts	0x04B3, r21	; 0x8004b3 <timer4_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:443
        bitWrite(TIMSK4, OCIE4A, 1);
    2fac:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2fb0:	82 60       	ori	r24, 0x02	; 2
    2fb2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:444
        break;
    2fb6:	61 cd       	rjmp	.-1342   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:379
#if defined(TCCR4B)
      else if (_timer == 4)
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	85 30       	cpi	r24, 0x05	; 5
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <tone(unsigned char, unsigned int, unsigned long)+0x584>
    2fbe:	32 ce       	rjmp	.-924    	; 0x2c24 <tone(unsigned char, unsigned int, unsigned long)+0x1e8>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:380
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    2fc0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2fc4:	88 7f       	andi	r24, 0xF8	; 248
    2fc6:	89 2b       	or	r24, r25
    2fc8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2fcc:	2f ef       	ldi	r18, 0xFF	; 255
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	a9 01       	movw	r20, r18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2fd2:	41 14       	cp	r4, r1
    2fd4:	51 04       	cpc	r5, r1
    2fd6:	61 04       	cpc	r6, r1
    2fd8:	71 04       	cpc	r7, r1
    2fda:	09 f0       	breq	.+2      	; 0x2fde <tone(unsigned char, unsigned int, unsigned long)+0x5a2>
    2fdc:	4b cf       	rjmp	.-362    	; 0x2e74 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:449
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    2fde:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2fe2:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:450
        timer5_toggle_count = toggle_count;
    2fe6:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <timer5_toggle_count>
    2fea:	30 93 aa 04 	sts	0x04AA, r19	; 0x8004aa <timer5_toggle_count+0x1>
    2fee:	40 93 ab 04 	sts	0x04AB, r20	; 0x8004ab <timer5_toggle_count+0x2>
    2ff2:	50 93 ac 04 	sts	0x04AC, r21	; 0x8004ac <timer5_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:451
        bitWrite(TIMSK5, OCIE5A, 1);
    2ff6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2ffa:	82 60       	ori	r24, 0x02	; 2
    2ffc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    3000:	3c cd       	rjmp	.-1416   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	84 30       	cpi	r24, 0x04	; 4
    3006:	31 f2       	breq	.-116    	; 0x2f94 <tone(unsigned char, unsigned int, unsigned long)+0x558>
    3008:	0c f4       	brge	.+2      	; 0x300c <tone(unsigned char, unsigned int, unsigned long)+0x5d0>
    300a:	a0 cf       	rjmp	.-192    	; 0x2f4c <tone(unsigned char, unsigned int, unsigned long)+0x510>
    300c:	85 30       	cpi	r24, 0x05	; 5
    300e:	39 f3       	breq	.-50     	; 0x2fde <tone(unsigned char, unsigned int, unsigned long)+0x5a2>
    3010:	34 cd       	rjmp	.-1432   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:404
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    3012:	c7 bc       	out	0x27, r12	; 39
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:405
        timer0_toggle_count = toggle_count;
    3014:	20 93 cc 04 	sts	0x04CC, r18	; 0x8004cc <timer0_toggle_count>
    3018:	30 93 cd 04 	sts	0x04CD, r19	; 0x8004cd <timer0_toggle_count+0x1>
    301c:	40 93 ce 04 	sts	0x04CE, r20	; 0x8004ce <timer0_toggle_count+0x2>
    3020:	50 93 cf 04 	sts	0x04CF, r21	; 0x8004cf <timer0_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:406
        bitWrite(TIMSK0, OCIE0A, 1);
    3024:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    3028:	82 60       	ori	r24, 0x02	; 2
    302a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:407
        break;
    302e:	25 cd       	rjmp	.-1462   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:425
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    3030:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:426
        timer2_toggle_count = toggle_count;
    3034:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <timer2_toggle_count>
    3038:	30 93 bf 04 	sts	0x04BF, r19	; 0x8004bf <timer2_toggle_count+0x1>
    303c:	40 93 c0 04 	sts	0x04C0, r20	; 0x8004c0 <timer2_toggle_count+0x2>
    3040:	50 93 c1 04 	sts	0x04C1, r21	; 0x8004c1 <timer2_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:427
        bitWrite(TIMSK2, OCIE2A, 1);
    3044:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    3048:	82 60       	ori	r24, 0x02	; 2
    304a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:428
        break;
    304e:	15 cd       	rjmp	.-1494   	; 0x2a7a <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    3050:	64 e2       	ldi	r22, 0x24	; 36
    3052:	74 ef       	ldi	r23, 0xF4	; 244
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a5 01       	movw	r20, r10
    305a:	94 01       	movw	r18, r8
    305c:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    3060:	69 01       	movw	r12, r18
    3062:	7a 01       	movw	r14, r20
    3064:	91 e0       	ldi	r25, 0x01	; 1
    3066:	c9 1a       	sub	r12, r25
    3068:	d1 08       	sbc	r13, r1
    306a:	e1 08       	sbc	r14, r1
    306c:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    306e:	83 e0       	ldi	r24, 0x03	; 3
    3070:	2f ef       	ldi	r18, 0xFF	; 255
    3072:	c2 16       	cp	r12, r18
    3074:	d1 04       	cpc	r13, r1
    3076:	e1 04       	cpc	r14, r1
    3078:	f1 04       	cpc	r15, r1
    307a:	09 f0       	breq	.+2      	; 0x307e <tone(unsigned char, unsigned int, unsigned long)+0x642>
    307c:	08 f4       	brcc	.+2      	; 0x3080 <tone(unsigned char, unsigned int, unsigned long)+0x644>
    307e:	ea ce       	rjmp	.-556    	; 0x2e54 <tone(unsigned char, unsigned int, unsigned long)+0x418>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    3080:	69 e0       	ldi	r22, 0x09	; 9
    3082:	7d e3       	ldi	r23, 0x3D	; 61
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	a5 01       	movw	r20, r10
    308a:	94 01       	movw	r18, r8
    308c:	0e 94 56 19 	call	0x32ac	; 0x32ac <__divmodsi4>
    3090:	69 01       	movw	r12, r18
    3092:	7a 01       	movw	r14, r20
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	c9 1a       	sub	r12, r25
    3098:	d1 08       	sbc	r13, r1
    309a:	e1 08       	sbc	r14, r1
    309c:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    309e:	84 e0       	ldi	r24, 0x04	; 4
    30a0:	2f ef       	ldi	r18, 0xFF	; 255
    30a2:	c2 16       	cp	r12, r18
    30a4:	d1 04       	cpc	r13, r1
    30a6:	e1 04       	cpc	r14, r1
    30a8:	f1 04       	cpc	r15, r1
    30aa:	09 f0       	breq	.+2      	; 0x30ae <tone(unsigned char, unsigned int, unsigned long)+0x672>
    30ac:	08 f4       	brcc	.+2      	; 0x30b0 <tone(unsigned char, unsigned int, unsigned long)+0x674>
    30ae:	d2 ce       	rjmp	.-604    	; 0x2e54 <tone(unsigned char, unsigned int, unsigned long)+0x418>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    30b0:	c9 80       	ldd	r12, Y+1	; 0x01
    30b2:	da 80       	ldd	r13, Y+2	; 0x02
    30b4:	eb 80       	ldd	r14, Y+3	; 0x03
    30b6:	fc 80       	ldd	r15, Y+4	; 0x04
    30b8:	9a e0       	ldi	r25, 0x0A	; 10
    30ba:	f5 94       	asr	r15
    30bc:	e7 94       	ror	r14
    30be:	d7 94       	ror	r13
    30c0:	c7 94       	ror	r12
    30c2:	9a 95       	dec	r25
    30c4:	d1 f7       	brne	.-12     	; 0x30ba <tone(unsigned char, unsigned int, unsigned long)+0x67e>
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	c8 1a       	sub	r12, r24
    30ca:	d1 08       	sbc	r13, r1
    30cc:	e1 08       	sbc	r14, r1
    30ce:	f1 08       	sbc	r15, r1
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    30d0:	85 e0       	ldi	r24, 0x05	; 5
    30d2:	c0 ce       	rjmp	.-640    	; 0x2e54 <tone(unsigned char, unsigned int, unsigned long)+0x418>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    30d4:	8f ef       	ldi	r24, 0xFF	; 255
    30d6:	c8 16       	cp	r12, r24
    30d8:	d1 04       	cpc	r13, r1
    30da:	e1 04       	cpc	r14, r1
    30dc:	f1 04       	cpc	r15, r1
    30de:	11 f0       	breq	.+4      	; 0x30e4 <tone(unsigned char, unsigned int, unsigned long)+0x6a8>
    30e0:	0c f0       	brlt	.+2      	; 0x30e4 <tone(unsigned char, unsigned int, unsigned long)+0x6a8>
    30e2:	b6 cf       	rjmp	.-148    	; 0x3050 <tone(unsigned char, unsigned int, unsigned long)+0x614>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	b6 ce       	rjmp	.-660    	; 0x2e54 <tone(unsigned char, unsigned int, unsigned long)+0x418>

000030e8 <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    30e8:	82 30       	cpi	r24, 0x02	; 2
    30ea:	a9 f0       	breq	.+42     	; 0x3116 <disableTimer(unsigned char)+0x2e>
    30ec:	28 f4       	brcc	.+10     	; 0x30f8 <disableTimer(unsigned char)+0x10>
    30ee:	88 23       	and	r24, r24
    30f0:	49 f0       	breq	.+18     	; 0x3104 <disableTimer(unsigned char)+0x1c>
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	51 f0       	breq	.+20     	; 0x310a <disableTimer(unsigned char)+0x22>
    30f6:	08 95       	ret
    30f8:	84 30       	cpi	r24, 0x04	; 4
    30fa:	21 f1       	breq	.+72     	; 0x3144 <disableTimer(unsigned char)+0x5c>
    30fc:	e8 f0       	brcs	.+58     	; 0x3138 <disableTimer(unsigned char)+0x50>
    30fe:	85 30       	cpi	r24, 0x05	; 5
    3100:	39 f1       	breq	.+78     	; 0x3150 <disableTimer(unsigned char)+0x68>
    3102:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:469
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    3104:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:473
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    3108:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:477

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    310a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    310e:	8d 7f       	andi	r24, 0xFD	; 253
    3110:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:478
      break;
    3114:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:483
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    3116:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    311a:	8d 7f       	andi	r24, 0xFD	; 253
    311c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    3126:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    312a:	88 7f       	andi	r24, 0xF8	; 248
    312c:	84 60       	ori	r24, 0x04	; 4
    312e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    3132:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    3136:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:498
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    3138:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    313c:	8d 7f       	andi	r24, 0xFD	; 253
    313e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:499
      break;
    3142:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:504
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    3144:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3148:	8d 7f       	andi	r24, 0xFD	; 253
    314a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:505
      break;
    314e:	08 95       	ret
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:510
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    3150:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3154:	8d 7f       	andi	r24, 0xFD	; 253
    3156:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:514
      break;
#endif
  }
}
    315a:	08 95       	ret

0000315c <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:518


void noTone(uint8_t _pin)
{
    315c:	cf 93       	push	r28
    315e:	c8 2f       	mov	r28, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:522
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    3160:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <tone_pins>
    3164:	c8 13       	cpse	r28, r24
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <noTone(unsigned char)+0x26>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    3168:	e8 e2       	ldi	r30, 0x28	; 40
    316a:	f3 e0       	ldi	r31, 0x03	; 3
    316c:	84 91       	lpm	r24, Z
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
    316e:	9f ef       	ldi	r25, 0xFF	; 255
    3170:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <tone_pins>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:529
      break;
    }
  }

  disableTimer(_timer);
    3174:	0e 94 74 18 	call	0x30e8	; 0x30e8 <disableTimer(unsigned char)>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531

  digitalWrite(_pin, 0);
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	8c 2f       	mov	r24, r28
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:532
}
    317c:	cf 91       	pop	r28
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
    317e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <digitalWrite>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:519
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    3182:	8f ef       	ldi	r24, 0xFF	; 255
    3184:	f7 cf       	rjmp	.-18     	; 0x3174 <noTone(unsigned char)+0x18>

00003186 <__vector_13>:
__vector_13():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    3186:	1f 92       	push	r1
    3188:	0f 92       	push	r0
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	0f 92       	push	r0
    318e:	11 24       	eor	r1, r1
    3190:	0b b6       	in	r0, 0x3b	; 59
    3192:	0f 92       	push	r0
    3194:	2f 93       	push	r18
    3196:	3f 93       	push	r19
    3198:	4f 93       	push	r20
    319a:	5f 93       	push	r21
    319c:	6f 93       	push	r22
    319e:	7f 93       	push	r23
    31a0:	8f 93       	push	r24
    31a2:	9f 93       	push	r25
    31a4:	af 93       	push	r26
    31a6:	bf 93       	push	r27
    31a8:	ef 93       	push	r30
    31aa:	ff 93       	push	r31
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    31ac:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer2_toggle_count>
    31b0:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer2_toggle_count+0x1>
    31b4:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer2_toggle_count+0x2>
    31b8:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer2_toggle_count+0x3>
    31bc:	89 2b       	or	r24, r25
    31be:	8a 2b       	or	r24, r26
    31c0:	8b 2b       	or	r24, r27
    31c2:	e1 f1       	breq	.+120    	; 0x323c <__vector_13+0xb6>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    31c4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <timer2_pin_mask>
    31c8:	e0 91 bc 04 	lds	r30, 0x04BC	; 0x8004bc <timer2_pin_port>
    31cc:	f0 91 bd 04 	lds	r31, 0x04BD	; 0x8004bd <timer2_pin_port+0x1>
    31d0:	80 81       	ld	r24, Z
    31d2:	89 27       	eor	r24, r25
    31d4:	80 83       	st	Z, r24
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    31d6:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer2_toggle_count>
    31da:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer2_toggle_count+0x1>
    31de:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer2_toggle_count+0x2>
    31e2:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer2_toggle_count+0x3>
    31e6:	18 16       	cp	r1, r24
    31e8:	19 06       	cpc	r1, r25
    31ea:	1a 06       	cpc	r1, r26
    31ec:	1b 06       	cpc	r1, r27
    31ee:	9c f4       	brge	.+38     	; 0x3216 <__vector_13+0x90>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    31f0:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <timer2_toggle_count>
    31f4:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <timer2_toggle_count+0x1>
    31f8:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <timer2_toggle_count+0x2>
    31fc:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <timer2_toggle_count+0x3>
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	a1 09       	sbc	r26, r1
    3204:	b1 09       	sbc	r27, r1
    3206:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <timer2_toggle_count>
    320a:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <timer2_toggle_count+0x1>
    320e:	a0 93 c0 04 	sts	0x04C0, r26	; 0x8004c0 <timer2_toggle_count+0x2>
    3212:	b0 93 c1 04 	sts	0x04C1, r27	; 0x8004c1 <timer2_toggle_count+0x3>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    3216:	ff 91       	pop	r31
    3218:	ef 91       	pop	r30
    321a:	bf 91       	pop	r27
    321c:	af 91       	pop	r26
    321e:	9f 91       	pop	r25
    3220:	8f 91       	pop	r24
    3222:	7f 91       	pop	r23
    3224:	6f 91       	pop	r22
    3226:	5f 91       	pop	r21
    3228:	4f 91       	pop	r20
    322a:	3f 91       	pop	r19
    322c:	2f 91       	pop	r18
    322e:	0f 90       	pop	r0
    3230:	0b be       	out	0x3b, r0	; 59
    3232:	0f 90       	pop	r0
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	0f 90       	pop	r0
    3238:	1f 90       	pop	r1
    323a:	18 95       	reti
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    323c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <tone_pins>
    3240:	0e 94 ae 18 	call	0x315c	; 0x315c <noTone(unsigned char)>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    3244:	e8 cf       	rjmp	.-48     	; 0x3216 <__vector_13+0x90>

00003246 <initVariant>:
initVariant():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3246:	08 95       	ret

00003248 <main>:
main():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    3248:	0e 94 fe 10 	call	0x21fc	; 0x21fc <init>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    324c:	0e 94 23 19 	call	0x3246	; 0x3246 <initVariant>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    3250:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <setup>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3254:	c1 ea       	ldi	r28, 0xA1	; 161
    3256:	d2 e1       	ldi	r29, 0x12	; 18
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    3258:	0e 94 97 09 	call	0x132e	; 0x132e <loop>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    325c:	20 97       	sbiw	r28, 0x00	; 0
    325e:	e1 f3       	breq	.-8      	; 0x3258 <main+0x10>
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    3260:	0e 94 a1 12 	call	0x2542	; 0x2542 <serialEventRun()>
    3264:	f9 cf       	rjmp	.-14     	; 0x3258 <main+0x10>

00003266 <yield>:
__empty():
C:\Users\LDH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    3266:	08 95       	ret

00003268 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3268:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    326a:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    326c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    326e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3270:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3272:	0d c0       	rjmp	.+26     	; 0x328e <__udivmodsi4_ep>

00003274 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3274:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3276:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3278:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    327a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    327c:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    327e:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3280:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3282:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3284:	20 f0       	brcs	.+8      	; 0x328e <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3286:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3288:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    328a:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    328c:	f5 0b       	sbc	r31, r21

0000328e <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    328e:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3290:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3292:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3294:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3296:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3298:	69 f7       	brne	.-38     	; 0x3274 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    329a:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    329c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    329e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    32a0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    32a2:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    32a4:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    32a6:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    32a8:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    32aa:	08 95       	ret

000032ac <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    32ac:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    32ae:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    32b0:	1e f4       	brtc	.+6      	; 0x32b8 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    32b2:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    32b4:	0e 94 6d 19 	call	0x32da	; 0x32da <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    32b8:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    32ba:	07 d0       	rcall	.+14     	; 0x32ca <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    32bc:	0e 94 34 19 	call	0x3268	; 0x3268 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    32c0:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    32c2:	03 d0       	rcall	.+6      	; 0x32ca <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    32c4:	4e f4       	brtc	.+18     	; 0x32d8 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    32c6:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__negsi2>

000032ca <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    32ca:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    32cc:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    32ce:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    32d0:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    32d2:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    32d4:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    32d6:	5f 4f       	sbci	r21, 0xFF	; 255

000032d8 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    32d8:	08 95       	ret

000032da <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    32da:	90 95       	com	r25
    32dc:	80 95       	com	r24
    32de:	70 95       	com	r23
    32e0:	61 95       	neg	r22
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	8f 4f       	sbci	r24, 0xFF	; 255
    32e6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    32e8:	08 95       	ret

000032ea <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    32ea:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    32ec:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    32ee:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    32f0:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    32f2:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    32f4:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    32f6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    32f8:	19 94       	eijmp

000032fa <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    32fa:	0e 94 88 19 	call	0x3310	; 0x3310 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    32fe:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3300:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3302:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3304:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3306:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3308:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    330a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    330c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    330e:	08 95       	ret

00003310 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3310:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3312:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3314:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3316:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3318:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    331a:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    331c:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    331e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3320:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3322:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3324:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3326:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3328:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    332a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    332c:	08 95       	ret

0000332e <eeprom_read_byte>:
eeprom_read_byte():
    332e:	f9 99       	sbic	0x1f, 1	; 31
    3330:	fe cf       	rjmp	.-4      	; 0x332e <eeprom_read_byte>
    3332:	92 bd       	out	0x22, r25	; 34
    3334:	81 bd       	out	0x21, r24	; 33
    3336:	f8 9a       	sbi	0x1f, 0	; 31
    3338:	99 27       	eor	r25, r25
    333a:	80 b5       	in	r24, 0x20	; 32
    333c:	08 95       	ret

0000333e <eeprom_write_byte>:
eeprom_write_byte():
    333e:	26 2f       	mov	r18, r22

00003340 <eeprom_write_r18>:
    3340:	f9 99       	sbic	0x1f, 1	; 31
    3342:	fe cf       	rjmp	.-4      	; 0x3340 <eeprom_write_r18>
    3344:	1f ba       	out	0x1f, r1	; 31
    3346:	92 bd       	out	0x22, r25	; 34
    3348:	81 bd       	out	0x21, r24	; 33
    334a:	20 bd       	out	0x20, r18	; 32
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	fa 9a       	sbi	0x1f, 2	; 31
    3352:	f9 9a       	sbi	0x1f, 1	; 31
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	08 95       	ret

0000335a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    335a:	f8 94       	cli

0000335c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    335c:	ff cf       	rjmp	.-2      	; 0x335c <__stop_program>
