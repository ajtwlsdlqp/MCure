
C:\Users\DH\AppData\Local\Temp\arduino-sketch-5BDA2A1E7137BCA818DA396074475103/insulin_peb_revb.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__dtors_end>
       4:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__vector_1>
       8:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__vector_2>
       c:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__vector_3>
      10:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__vector_4>
      14:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <__vector_5>
      18:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__vector_6>
      1c:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__vector_7>
      20:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__vector_8>
      24:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_10>
      28:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_10>
      2c:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_10>
      30:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_12>
      34:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__vector_13>
      38:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      3c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      40:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      44:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      48:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      4c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      50:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      54:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      58:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      5c:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__vector_23>
      60:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      64:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__vector_25>
      68:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <__vector_26>
      6c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      70:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      74:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      78:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      7c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      80:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      84:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      88:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      8c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      90:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__vector_36>
      94:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__vector_37>
      98:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      9c:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__vector_39>
      a0:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      a4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      a8:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      ac:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      b0:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      b4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      b8:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      bc:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      c0:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      c4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      c8:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      cc:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      d0:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      d4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      d8:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      dc:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>
      e0:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 86 19 	jmp	0x330c	; 0x330c <turnOffPWM+0xc0>
      e8:	0c 94 ef 11 	jmp	0x23de	; 0x23de <Print::write(unsigned char const*, unsigned int)>
      ec:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <turnOffPWM+0x80>
      f0:	0c 94 82 19 	jmp	0x3304	; 0x3304 <turnOffPWM+0xb8>
      f4:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <turnOffPWM+0x9c>
      f8:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <attachInterrupt+0x7e>
      fc:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <HardwareSerial::availableForWrite()>
     100:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <updateLED()+0x22e>
     104:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <attachInterrupt+0x4c>
     108:	0c 94 89 19 	jmp	0x3312	; 0x3312 <turnOffPWM+0xc6>
     10c:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <Print::availableForWrite()>
     110:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <turnOffPWM+0x48>
     114:	0c 94 86 0a 	jmp	0x150c	; 0x150c <TwoWire::peek()>
     118:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <turnOffPWM+0xb0>
     11c:	0c 94 95 0a 	jmp	0x152a	; 0x152a <TwoWire::flush()>
     120:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <TwoWire::available()>
     124:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <attachInterrupt+0x64>
     128:	0c 94 13 07 	jmp	0xe26	; 0xe26 <Melody_Proc()+0xa2>
     12c:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <turnOffPWM+0x58>
     130:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <TwoWire::write(unsigned char const*, unsigned int)>
     134:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <SoftwareSerial::peek()>
     138:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <turnOffPWM+0x78>
     13c:	0c 94 f5 07 	jmp	0xfea	; 0xfea <_GLOBAL__sub_I_Key>
     140:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <nothing>
     144:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <turnOffPWM+0x6c>
     148:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <_GLOBAL__sub_I___vector_36>
     14c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <Melody_Proc()+0x14c>
     150:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <SoftwareSerial::read()>
     154:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <SoftwareSerial::available()>
     158:	0c 94 51 07 	jmp	0xea2	; 0xea2 <Melody_Proc()+0x11e>
     15c:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <turnOffPWM+0xa4>
     160:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <attachInterrupt+0xa8>
     164:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <attachInterrupt+0xc0>
     168:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <attachInterrupt+0xda>
     16c:	0c 94 20 07 	jmp	0xe40	; 0xe40 <Melody_Proc()+0xbc>
     170:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <_GLOBAL__sub_I___vector_25>
     174:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <HardwareSerial::peek()>
     178:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <HardwareSerial::write(unsigned char)>
     17c:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <updateLED()+0x1ea>
     180:	0c 94 44 19 	jmp	0x3288	; 0x3288 <turnOffPWM+0x3c>
     184:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <Melody_Proc()+0x18a>
     188:	0c 94 57 06 	jmp	0xcae	; 0xcae <updateLED()+0x1c6>
     18c:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <HardwareSerial::read()>
     190:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <Melody_Proc()+0x172>
     194:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <A_CHANGE()>
     198:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <turnOffPWM+0x94>
     19c:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     1a0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <HardwareSerial::available()>
     1a4:	0c 94 47 10 	jmp	0x208e	; 0x208e <HardwareSerial::flush()>
     1a8:	0c 94 76 06 	jmp	0xcec	; 0xcec <updateLED()+0x204>
     1ac:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <updateLED()+0x1ac>
     1b0:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <serialEventRun()>
     1b4:	0c 94 96 0a 	jmp	0x152c	; 0x152c <TwoWire::write(unsigned char)>
     1b8:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <Melody_Proc()+0x106>
     1bc:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <Serial1_available()>
     1c0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <TwoWire::read()>
     1c4:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <isr()>
     1c8:	0c 94 34 07 	jmp	0xe68	; 0xe68 <Melody_Proc()+0xe4>
     1cc:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <SoftwareSerial::write(unsigned char)>
     1d0:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <SoftwareSerial::flush()>
     1d4:	0c 94 88 08 	jmp	0x1110	; 0x1110 <_GLOBAL__sub_D_Key>
     1d8:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <Melody_Proc()+0xd0>
     1dc:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <turnOffPWM+0x64>
     1e0:	0c 94 4e 19 	jmp	0x329c	; 0x329c <turnOffPWM+0x50>
     1e4:	0c 94 21 11 	jmp	0x2242	; 0x2242 <Serial0_available()>
     1e8:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <turnOffPWM+0xc8>
     1ec:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <turnOffPWM+0x88>
     1f0:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <attachInterrupt+0x3c>

000001f4 <__trampolines_end>:
__trampolines_end():
     1f4:	02 00       	Address 0x000001f4 is out of bounds.
.word	0xffff	; ????

000001f5 <digital_pin_to_timer_PGM>:
     1f5:	00 00 0b 0c 03 0a 0d 0e 0f 09 08 04 05 02 00 00     ................
	...
     221:	13 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000024b <digital_pin_to_bit_mask_PGM>:
     24b:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     25b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     26b:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     27b:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     28b:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
     29b:	04 08 10 20 40 80                                   ... @.

000002a1 <digital_pin_to_port_PGM>:
     2a1:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2b1:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2c1:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     2d1:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2e1:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
     2f1:	0a 0a 0a 0a 0a 0a                                   ......

000002f7 <port_to_input_PGM>:
     2f7:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     307:	00 01 00 00 03 01 06 01 09 01                       ..........

00000311 <port_to_output_PGM>:
     311:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     321:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000032b <port_to_mode_PGM>:
     32b:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     33b:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000346 <__ctors_start>:
__ctors_start():
     346:	f5 07       	cpc	r31, r21
     348:	f2 0a       	sbc	r15, r18
     34a:	2b 11       	cpse	r18, r11
     34c:	c2 11       	cpse	r28, r2

0000034e <__ctors_end>:
__dtors_start():
     34e:	88 08       	sbc	r8, r8

00000350 <__dtors_end>:
__dtors_end():
     350:	11 24       	eor	r1, r1
     352:	1f be       	out	0x3f, r1	; 63
     354:	cf ef       	ldi	r28, 0xFF	; 255
     356:	d1 e2       	ldi	r29, 0x21	; 33
     358:	de bf       	out	0x3e, r29	; 62
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	0c bf       	out	0x3c, r16	; 60

00000360 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     360:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     362:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     364:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     366:	ec e3       	ldi	r30, 0x3C	; 60
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     368:	f5 e3       	ldi	r31, 0x35	; 53
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     36a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     36c:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     370:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     372:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     374:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     376:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0x10>

0000037a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     37a:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     37c:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     37e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     384:	a6 35       	cpi	r26, 0x56	; 86
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     386:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>

0000038a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     38a:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     38c:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     38e:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     390:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     392:	06 c0       	rjmp	.+12     	; 0x3a0 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     394:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     396:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     398:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     39a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     39c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3a0:	c3 3a       	cpi	r28, 0xA3	; 163
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3a2:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3a4:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3a6:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3a8:	a9 f7       	brne	.-22     	; 0x394 <__do_global_ctors+0xa>
     3aa:	0e 94 f5 17 	call	0x2fea	; 0x2fea <main>
     3ae:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__do_global_dtors>

000003b2 <__bad_interrupt>:
__vector_38():
     3b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003b6 <A_CHANGE()>:
_Z8A_CHANGEv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1052 (discriminator 1)
    ble.readBytes(read_buf, 2);

    if(read_buf[0] == 0x74)
    {
      if( read_buf[1] == 0x74) off_led_show_state = 1;
      else if( read_buf[1] == 0x66) off_led_show_state = 0;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     3bc:	89 2b       	or	r24, r25
     3be:	81 f4       	brne	.+32     	; 0x3e0 <A_CHANGE()+0x2a>
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     3c6:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <pulses>
     3ca:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <pulses+0x1>
     3ce:	89 2b       	or	r24, r25
     3d0:	81 f4       	brne	.+32     	; 0x3f2 <A_CHANGE()+0x3c>
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
     3d6:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <pulses+0x1>
     3da:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <pulses>
     3de:	0f c0       	rjmp	.+30     	; 0x3fe <A_CHANGE()+0x48>
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     3e6:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <pulses>
     3ea:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <pulses+0x1>
     3ee:	89 2b       	or	r24, r25
     3f0:	81 f7       	brne	.-32     	; 0x3d2 <A_CHANGE()+0x1c>
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	31 09       	sbc	r19, r1
     3f6:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <pulses+0x1>
     3fa:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <pulses>
     3fe:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     402:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <pre_encodercheck_time>
     406:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <pre_encodercheck_time+0x1>
     40a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <pre_encodercheck_time+0x2>
     40e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <pre_encodercheck_time+0x3>
     412:	08 95       	ret

00000414 <Print::write(char const*) [clone .part.0]>:
_ZN5Print5writeEPKc():
     414:	fb 01       	movw	r30, r22
     416:	01 90       	ld	r0, Z+
     418:	00 20       	and	r0, r0
     41a:	e9 f7       	brne	.-6      	; 0x416 <Print::write(char const*) [clone .part.0]+0x2>
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	af 01       	movw	r20, r30
     420:	46 1b       	sub	r20, r22
     422:	57 0b       	sbc	r21, r23
     424:	dc 01       	movw	r26, r24
     426:	ed 91       	ld	r30, X+
     428:	fc 91       	ld	r31, X
     42a:	02 80       	ldd	r0, Z+2	; 0x02
     42c:	f3 81       	ldd	r31, Z+3	; 0x03
     42e:	e0 2d       	mov	r30, r0
     430:	19 94       	eijmp

00000432 <Key_Read()>:
_Z8Key_Readv():
     432:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Key_Read()::pre_key>
     436:	8f 3f       	cpi	r24, 0xFF	; 255
     438:	09 f0       	breq	.+2      	; 0x43c <Key_Read()+0xa>
     43a:	41 c0       	rjmp	.+130    	; 0x4be <Key_Read()+0x8c>
     43c:	84 e2       	ldi	r24, 0x24	; 36
     43e:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     442:	89 2b       	or	r24, r25
     444:	39 f4       	brne	.+14     	; 0x454 <Key_Read()+0x22>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Key+0x1>
     44e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Key>
     452:	30 c0       	rjmp	.+96     	; 0x4b4 <Key_Read()+0x82>
     454:	85 e2       	ldi	r24, 0x25	; 37
     456:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     45a:	89 2b       	or	r24, r25
     45c:	39 f4       	brne	.+14     	; 0x46c <Key_Read()+0x3a>
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Key+0x1>
     466:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Key>
     46a:	24 c0       	rjmp	.+72     	; 0x4b4 <Key_Read()+0x82>
     46c:	88 e2       	ldi	r24, 0x28	; 40
     46e:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     472:	89 2b       	or	r24, r25
     474:	39 f4       	brne	.+14     	; 0x484 <Key_Read()+0x52>
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Key+0x1>
     47e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Key>
     482:	18 c0       	rjmp	.+48     	; 0x4b4 <Key_Read()+0x82>
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Key+0x1>
     48c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Key>
     490:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	71 f4       	brne	.+28     	; 0x4b4 <Key_Read()+0x82>
     498:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <mokup_motor_run_state>
     49c:	88 23       	and	r24, r24
     49e:	51 f0       	breq	.+20     	; 0x4b4 <Key_Read()+0x82>
     4a0:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <mokup_motor_run_state>
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	88 e0       	ldi	r24, 0x08	; 8
     4a8:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	87 e0       	ldi	r24, 0x07	; 7
     4b0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     4b4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Key>
     4b8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Key_Read()::pre_key>
     4bc:	08 95       	ret
     4be:	84 e2       	ldi	r24, 0x24	; 36
     4c0:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     4c4:	89 2b       	or	r24, r25
     4c6:	09 f4       	brne	.+2      	; 0x4ca <Key_Read()+0x98>
     4c8:	be cf       	rjmp	.-132    	; 0x446 <Key_Read()+0x14>
     4ca:	85 e2       	ldi	r24, 0x25	; 37
     4cc:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     4d0:	89 2b       	or	r24, r25
     4d2:	29 f2       	breq	.-118    	; 0x45e <Key_Read()+0x2c>
     4d4:	88 e2       	ldi	r24, 0x28	; 40
     4d6:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     4da:	89 2b       	or	r24, r25
     4dc:	61 f2       	breq	.-104    	; 0x476 <Key_Read()+0x44>
     4de:	8f ef       	ldi	r24, 0xFF	; 255
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Key+0x1>
     4e6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Key>
     4ea:	e4 cf       	rjmp	.-56     	; 0x4b4 <Key_Read()+0x82>

000004ec <Key_Proc()>:
_Z8Key_Procv():
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <is_key_change>
     4f4:	88 23       	and	r24, r24
     4f6:	89 f0       	breq	.+34     	; 0x51a <Key_Proc()+0x2e>
     4f8:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <is_key_change>
     4fc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Key>
     500:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <Key+0x1>
     504:	84 30       	cpi	r24, 0x04	; 4
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <Key_Proc()+0x20>
     50a:	c5 c0       	rjmp	.+394    	; 0x696 <Key_Proc()+0x1aa>
     50c:	4c f4       	brge	.+18     	; 0x520 <Key_Proc()+0x34>
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	91 05       	cpc	r25, r1
     512:	11 f1       	breq	.+68     	; 0x558 <Key_Proc()+0x6c>
     514:	02 97       	sbiw	r24, 0x02	; 2
     516:	09 f4       	brne	.+2      	; 0x51a <Key_Proc()+0x2e>
     518:	74 c0       	rjmp	.+232    	; 0x602 <Key_Proc()+0x116>
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	08 95       	ret
     520:	88 30       	cpi	r24, 0x08	; 8
     522:	91 05       	cpc	r25, r1
     524:	09 f4       	brne	.+2      	; 0x528 <Key_Proc()+0x3c>
     526:	e0 c0       	rjmp	.+448    	; 0x6e8 <Key_Proc()+0x1fc>
     528:	40 97       	sbiw	r24, 0x10	; 16
     52a:	b9 f7       	brne	.-18     	; 0x51a <Key_Proc()+0x2e>
     52c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     530:	88 23       	and	r24, r24
     532:	99 f3       	breq	.-26     	; 0x51a <Key_Proc()+0x2e>
     534:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <active_step>
     538:	81 11       	cpse	r24, r1
     53a:	04 c0       	rjmp	.+8      	; 0x544 <Key_Proc()+0x58>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <active_step>
     542:	eb cf       	rjmp	.-42     	; 0x51a <Key_Proc()+0x2e>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	49 f7       	brne	.-46     	; 0x51a <Key_Proc()+0x2e>
     548:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <active_step>
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	89 e1       	ldi	r24, 0x19	; 25
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     558:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     55c:	81 11       	cpse	r24, r1
     55e:	0f c0       	rjmp	.+30     	; 0x57e <Key_Proc()+0x92>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <f_power_state>
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	89 e0       	ldi	r24, 0x09	; 9
     56a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     56e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <active_step>
     572:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <is_target_psi_set>
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <working_mode>
     57c:	ce cf       	rjmp	.-100    	; 0x51a <Key_Proc()+0x2e>
     57e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <active_step>
     582:	81 11       	cpse	r24, r1
     584:	25 c0       	rjmp	.+74     	; 0x5d0 <Key_Proc()+0xe4>
     586:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <f_power_state>
     58a:	89 e0       	ldi	r24, 0x09	; 9
     58c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <active_step>
     590:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     594:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <next_sleep_ent_time>
     598:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <next_sleep_ent_time+0x1>
     59c:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <next_sleep_ent_time+0x2>
     5a0:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <next_sleep_ent_time+0x3>
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	87 e1       	ldi	r24, 0x17	; 23
     5b8:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	89 e1       	ldi	r24, 0x19	; 25
     5c0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	89 e0       	ldi	r24, 0x09	; 9
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <Key_Proc()+0xea>
     5d4:	a2 cf       	rjmp	.-188    	; 0x51a <Key_Proc()+0x2e>
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	89 e1       	ldi	r24, 0x19	; 25
     5da:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	87 e1       	ldi	r24, 0x17	; 23
     5e2:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     5e6:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     5ea:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <pre_valve_close_time>
     5ee:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <pre_valve_close_time+0x1>
     5f2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <pre_valve_close_time+0x2>
     5f6:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <pre_valve_close_time+0x3>
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <active_step>
     600:	8c cf       	rjmp	.-232    	; 0x51a <Key_Proc()+0x2e>
     602:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <Key_Proc()+0x120>
     60a:	87 cf       	rjmp	.-242    	; 0x51a <Key_Proc()+0x2e>
     60c:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <mokup_motor_run_state>
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	09 f1       	breq	.+66     	; 0x656 <Key_Proc()+0x16a>
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <mokup_motor_run_state>
     61a:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     61e:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <pre_encodercheck_time>
     622:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <pre_encodercheck_time+0x1>
     626:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <pre_encodercheck_time+0x2>
     62a:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <pre_encodercheck_time+0x3>
     62e:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     632:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <pre_user_motor_worktime>
     636:	70 93 b1 02 	sts	0x02B1, r23	; 0x8002b1 <pre_user_motor_worktime+0x1>
     63a:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <pre_user_motor_worktime+0x2>
     63e:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <pre_user_motor_worktime+0x3>
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	87 e0       	ldi	r24, 0x07	; 7
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     656:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     65a:	00 91 c0 02 	lds	r16, 0x02C0	; 0x8002c0 <pre_encodercheck_time>
     65e:	10 91 c1 02 	lds	r17, 0x02C1	; 0x8002c1 <pre_encodercheck_time+0x1>
     662:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <pre_encodercheck_time+0x2>
     666:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <pre_encodercheck_time+0x3>
     66a:	60 1b       	sub	r22, r16
     66c:	71 0b       	sbc	r23, r17
     66e:	82 0b       	sbc	r24, r18
     670:	93 0b       	sbc	r25, r19
     672:	65 36       	cpi	r22, 0x65	; 101
     674:	71 05       	cpc	r23, r1
     676:	81 05       	cpc	r24, r1
     678:	91 05       	cpc	r25, r1
     67a:	58 f1       	brcs	.+86     	; 0x6d2 <Key_Proc()+0x1e6>
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	88 e0       	ldi	r24, 0x08	; 8
     680:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	87 e0       	ldi	r24, 0x07	; 7
     688:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     68c:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <pulses+0x1>
     690:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <pulses>
     694:	42 cf       	rjmp	.-380    	; 0x51a <Key_Proc()+0x2e>
     696:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     69a:	88 23       	and	r24, r24
     69c:	09 f4       	brne	.+2      	; 0x6a0 <Key_Proc()+0x1b4>
     69e:	3d cf       	rjmp	.-390    	; 0x51a <Key_Proc()+0x2e>
     6a0:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <mokup_motor_run_state>
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	b9 f2       	breq	.-82     	; 0x656 <Key_Proc()+0x16a>
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <mokup_motor_run_state>
     6ae:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     6b2:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <pre_encodercheck_time>
     6b6:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <pre_encodercheck_time+0x1>
     6ba:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <pre_encodercheck_time+0x2>
     6be:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <pre_encodercheck_time+0x3>
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	88 e0       	ldi	r24, 0x08	; 8
     6c6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	87 e0       	ldi	r24, 0x07	; 7
     6ce:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     6d2:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     6d6:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <pre_user_motor_worktime>
     6da:	70 93 b1 02 	sts	0x02B1, r23	; 0x8002b1 <pre_user_motor_worktime+0x1>
     6de:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <pre_user_motor_worktime+0x2>
     6e2:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <pre_user_motor_worktime+0x3>
     6e6:	19 cf       	rjmp	.-462    	; 0x51a <Key_Proc()+0x2e>
     6e8:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <Key_Proc()+0x206>
     6f0:	14 cf       	rjmp	.-472    	; 0x51a <Key_Proc()+0x2e>
     6f2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <f_ble_state>
     6f6:	81 11       	cpse	r24, r1
     6f8:	18 c0       	rjmp	.+48     	; 0x72a <Key_Proc()+0x23e>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <f_ble_state>
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	8a e2       	ldi	r24, 0x2A	; 42
     704:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <Sound_Update>
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Sound_Num>
     714:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     718:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <pre_buzzer_tic>
     71c:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <pre_buzzer_tic+0x1>
     720:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pre_buzzer_tic+0x2>
     724:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pre_buzzer_tic+0x3>
     728:	f8 ce       	rjmp	.-528    	; 0x51a <Key_Proc()+0x2e>
     72a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <f_ble_state>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	8a e2       	ldi	r24, 0x2A	; 42
     732:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     736:	e8 cf       	rjmp	.-48     	; 0x708 <Key_Proc()+0x21c>

00000738 <Key_Scan()>:
_Z8Key_Scanv():
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     740:	00 91 d4 02 	lds	r16, 0x02D4	; 0x8002d4 <pre_key_readtime>
     744:	10 91 d5 02 	lds	r17, 0x02D5	; 0x8002d5 <pre_key_readtime+0x1>
     748:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <pre_key_readtime+0x2>
     74c:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <pre_key_readtime+0x3>
     750:	60 1b       	sub	r22, r16
     752:	71 0b       	sbc	r23, r17
     754:	82 0b       	sbc	r24, r18
     756:	93 0b       	sbc	r25, r19
     758:	64 31       	cpi	r22, 0x14	; 20
     75a:	71 05       	cpc	r23, r1
     75c:	81 05       	cpc	r24, r1
     75e:	91 05       	cpc	r25, r1
     760:	08 f4       	brcc	.+2      	; 0x764 <Key_Scan()+0x2c>
     762:	ba c0       	rjmp	.+372    	; 0x8d8 <Key_Scan()+0x1a0>
     764:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     768:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <pre_key_readtime>
     76c:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <pre_key_readtime+0x1>
     770:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <pre_key_readtime+0x2>
     774:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <pre_key_readtime+0x3>
     778:	0e 94 19 02 	call	0x432	; 0x432 <Key_Read()>
     77c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Key>
     780:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <Key+0x1>
     784:	8f 3f       	cpi	r24, 0xFF	; 255
     786:	91 05       	cpc	r25, r1
     788:	09 f4       	brne	.+2      	; 0x78c <Key_Scan()+0x54>
     78a:	85 c0       	rjmp	.+266    	; 0x896 <Key_Scan()+0x15e>
     78c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     790:	28 17       	cp	r18, r24
     792:	19 06       	cpc	r1, r25
     794:	09 f0       	breq	.+2      	; 0x798 <Key_Scan()+0x60>
     796:	7f c0       	rjmp	.+254    	; 0x896 <Key_Scan()+0x15e>
     798:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <Key_Scan()::f_PressedKey>
     79c:	21 11       	cpse	r18, r1
     79e:	19 c0       	rjmp	.+50     	; 0x7d2 <Key_Scan()+0x9a>
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	89 f4       	brne	.+34     	; 0x7c6 <Key_Scan()+0x8e>
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Key_Scan()::AutoKeyCount>
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <Key_Scan()::is_notify>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <Key_Scan()::f_PressedKey>
     7b6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <Key>
     7ba:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <Key_Proc()>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Key_Scan()::AutoKeyCount>
     7cc:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <is_key_change>
     7d0:	ef cf       	rjmp	.-34     	; 0x7b0 <Key_Scan()+0x78>
     7d2:	84 30       	cpi	r24, 0x04	; 4
     7d4:	91 05       	cpc	r25, r1
     7d6:	19 f0       	breq	.+6      	; 0x7de <Key_Scan()+0xa6>
     7d8:	82 30       	cpi	r24, 0x02	; 2
     7da:	91 05       	cpc	r25, r1
     7dc:	69 f4       	brne	.+26     	; 0x7f8 <Key_Scan()+0xc0>
     7de:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <Key_Scan()::AutoKeyCount>
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Key_Scan()::AutoKeyCount>
     7e8:	81 11       	cpse	r24, r1
     7ea:	e5 cf       	rjmp	.-54     	; 0x7b6 <Key_Scan()+0x7e>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <is_key_change>
     7f2:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Key_Scan()::AutoKeyCount>
     7f6:	df cf       	rjmp	.-66     	; 0x7b6 <Key_Scan()+0x7e>
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	e9 f6       	brne	.-70     	; 0x7b6 <Key_Scan()+0x7e>
     7fc:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <Key_Scan()::AutoKeyCount>
     800:	81 50       	subi	r24, 0x01	; 1
     802:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Key_Scan()::AutoKeyCount>
     806:	8c 3f       	cpi	r24, 0xFC	; 252
     808:	b0 f6       	brcc	.-84     	; 0x7b6 <Key_Scan()+0x7e>
     80a:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <Key_Scan()::is_notify>
     80e:	93 30       	cpi	r25, 0x03	; 3
     810:	c1 f4       	brne	.+48     	; 0x842 <Key_Scan()+0x10a>
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <Key_Scan()::is_notify>
     818:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <active_step>
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	58 f6       	brcc	.-106    	; 0x7b6 <Key_Scan()+0x7e>
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <Sound_Update>
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Sound_Num>
     82c:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     830:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <pre_buzzer_tic>
     834:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <pre_buzzer_tic+0x1>
     838:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pre_buzzer_tic+0x2>
     83c:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pre_buzzer_tic+0x3>
     840:	ba cf       	rjmp	.-140    	; 0x7b6 <Key_Scan()+0x7e>
     842:	8d 3c       	cpi	r24, 0xCD	; 205
     844:	08 f0       	brcs	.+2      	; 0x848 <Key_Scan()+0x110>
     846:	b7 cf       	rjmp	.-146    	; 0x7b6 <Key_Scan()+0x7e>
     848:	92 30       	cpi	r25, 0x02	; 2
     84a:	09 f0       	breq	.+2      	; 0x84e <Key_Scan()+0x116>
     84c:	b4 cf       	rjmp	.-152    	; 0x7b6 <Key_Scan()+0x7e>
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <Key_Scan()::is_notify>
     854:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <f_power_state>
     858:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <Sound_Update>
     85c:	21 11       	cpse	r18, r1
     85e:	0e c0       	rjmp	.+28     	; 0x87c <Key_Scan()+0x144>
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Sound_Num>
     866:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     86a:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <pre_buzzer_tic>
     86e:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <pre_buzzer_tic+0x1>
     872:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pre_buzzer_tic+0x2>
     876:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pre_buzzer_tic+0x3>
     87a:	9d cf       	rjmp	.-198    	; 0x7b6 <Key_Scan()+0x7e>
     87c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Sound_Num>
     880:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     884:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <pre_buzzer_tic>
     888:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <pre_buzzer_tic+0x1>
     88c:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pre_buzzer_tic+0x2>
     890:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pre_buzzer_tic+0x3>
     894:	90 cf       	rjmp	.-224    	; 0x7b6 <Key_Scan()+0x7e>
     896:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <Key_Scan()::f_PressedKey>
     89a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Key_Scan()::is_notify>
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	81 f4       	brne	.+32     	; 0x8c2 <Key_Scan()+0x18a>
     8a2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <active_step>
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <Key_Scan()+0x184>
     8aa:	80 e1       	ldi	r24, 0x10	; 16
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Key+0x1>
     8b2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Key>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <is_key_change>
     8bc:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <Key_Scan()::is_notify>
     8c0:	7a cf       	rjmp	.-268    	; 0x7b6 <Key_Scan()+0x7e>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	d9 f7       	brne	.-10     	; 0x8bc <Key_Scan()+0x184>
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <Key+0x1>
     8ce:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <Key>
     8d2:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <is_key_change>
     8d6:	f2 cf       	rjmp	.-28     	; 0x8bc <Key_Scan()+0x184>
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <updateCeEmc()>:
_Z11updateCeEmcv():
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <active_step>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <updateCeEmc()+0xe>
     8ea:	69 c0       	rjmp	.+210    	; 0x9be <updateCeEmc()+0xe0>
     8ec:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <updateCeEmc()::stop_fleg>
     8f0:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     8f4:	00 91 78 02 	lds	r16, 0x0278	; 0x800278 <updateCeEmc()::work_time>
     8f8:	10 91 79 02 	lds	r17, 0x0279	; 0x800279 <updateCeEmc()::work_time+0x1>
     8fc:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <updateCeEmc()::work_time+0x2>
     900:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <updateCeEmc()::work_time+0x3>
     904:	60 1b       	sub	r22, r16
     906:	71 0b       	sbc	r23, r17
     908:	82 0b       	sbc	r24, r18
     90a:	93 0b       	sbc	r25, r19
     90c:	69 3e       	cpi	r22, 0xE9	; 233
     90e:	73 40       	sbci	r23, 0x03	; 3
     910:	81 05       	cpc	r24, r1
     912:	91 05       	cpc	r25, r1
     914:	90 f1       	brcs	.+100    	; 0x97a <updateCeEmc()+0x9c>
     916:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     91a:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <updateCeEmc()::work_time>
     91e:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <updateCeEmc()::work_time+0x1>
     922:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <updateCeEmc()::work_time+0x2>
     926:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <updateCeEmc()::work_time+0x3>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	87 e0       	ldi	r24, 0x07	; 7
     936:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	87 e1       	ldi	r24, 0x17	; 23
     93e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	89 e1       	ldi	r24, 0x19	; 25
     946:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	8a e1       	ldi	r24, 0x1A	; 26
     94e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	88 e1       	ldi	r24, 0x18	; 24
     956:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     95a:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <updateCeEmc()::work_step>
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	c1 f0       	breq	.+48     	; 0x992 <updateCeEmc()+0xb4>
     962:	70 f0       	brcs	.+28     	; 0x980 <updateCeEmc()+0xa2>
     964:	82 30       	cpi	r24, 0x02	; 2
     966:	f1 f0       	breq	.+60     	; 0x9a4 <updateCeEmc()+0xc6>
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	09 f1       	breq	.+66     	; 0x9ae <updateCeEmc()+0xd0>
     96c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <updateCeEmc()::work_step>
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	08 f5       	brcc	.+66     	; 0x9b8 <updateCeEmc()+0xda>
     976:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <updateCeEmc()::work_step>
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	87 e0       	ldi	r24, 0x07	; 7
     98c:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     990:	ed cf       	rjmp	.-38     	; 0x96c <updateCeEmc()+0x8e>
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	88 e0       	ldi	r24, 0x08	; 8
     996:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	87 e0       	ldi	r24, 0x07	; 7
     99e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9a2:	e4 cf       	rjmp	.-56     	; 0x96c <updateCeEmc()+0x8e>
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	89 e1       	ldi	r24, 0x19	; 25
     9a8:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9ac:	df cf       	rjmp	.-66     	; 0x96c <updateCeEmc()+0x8e>
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	8a e1       	ldi	r24, 0x1A	; 26
     9b2:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9b6:	da cf       	rjmp	.-76     	; 0x96c <updateCeEmc()+0x8e>
     9b8:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <updateCeEmc()::work_step>
     9bc:	de cf       	rjmp	.-68     	; 0x97a <updateCeEmc()+0x9c>
     9be:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <updateCeEmc()::stop_fleg>
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	d1 f6       	brne	.-76     	; 0x97a <updateCeEmc()+0x9c>
     9c6:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <updateCeEmc()::stop_fleg>
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	88 e0       	ldi	r24, 0x08	; 8
     9ce:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	87 e0       	ldi	r24, 0x07	; 7
     9d6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	87 e1       	ldi	r24, 0x17	; 23
     9de:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	89 e1       	ldi	r24, 0x19	; 25
     9e6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	8a e1       	ldi	r24, 0x1A	; 26
     9ee:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	88 e1       	ldi	r24, 0x18	; 24
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>

000009fe <updateTemperatrue()>:
_Z17updateTemperatruev():
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     a06:	00 91 d0 02 	lds	r16, 0x02D0	; 0x8002d0 <pre_temp_readtime>
     a0a:	10 91 d1 02 	lds	r17, 0x02D1	; 0x8002d1 <pre_temp_readtime+0x1>
     a0e:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <pre_temp_readtime+0x2>
     a12:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <pre_temp_readtime+0x3>
     a16:	60 1b       	sub	r22, r16
     a18:	71 0b       	sbc	r23, r17
     a1a:	82 0b       	sbc	r24, r18
     a1c:	93 0b       	sbc	r25, r19
     a1e:	68 3e       	cpi	r22, 0xE8	; 232
     a20:	73 40       	sbci	r23, 0x03	; 3
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	68 f1       	brcs	.+90     	; 0xa82 <updateTemperatrue()+0x84>
     a28:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     a2c:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <pre_temp_readtime>
     a30:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <pre_temp_readtime+0x1>
     a34:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <pre_temp_readtime+0x2>
     a38:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <pre_temp_readtime+0x3>
     a3c:	84 e4       	ldi	r24, 0x44	; 68
     a3e:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     a42:	83 3f       	cpi	r24, 0xF3	; 243
     a44:	22 e0       	ldi	r18, 0x02	; 2
     a46:	92 07       	cpc	r25, r18
     a48:	68 f4       	brcc	.+26     	; 0xa64 <updateTemperatrue()+0x66>
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <f_peltier_state>
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	8a e1       	ldi	r24, 0x1A	; 26
     a54:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     a64:	8b 3f       	cpi	r24, 0xFB	; 251
     a66:	92 40       	sbci	r25, 0x02	; 2
     a68:	60 f0       	brcs	.+24     	; 0xa82 <updateTemperatrue()+0x84>
     a6a:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <f_peltier_state>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	8a e1       	ldi	r24, 0x1A	; 26
     a72:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	88 e1       	ldi	r24, 0x18	; 24
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <ledOffAll()>:
_Z9ledOffAllv():
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	89 e2       	ldi	r24, 0x29	; 41
     a8c:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	82 e2       	ldi	r24, 0x22	; 34
     a94:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	83 e2       	ldi	r24, 0x23	; 35
     a9c:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	81 e2       	ldi	r24, 0x21	; 33
     aa4:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	8e e0       	ldi	r24, 0x0E	; 14
     ab4:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	8f e1       	ldi	r24, 0x1F	; 31
     abc:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	8e e1       	ldi	r24, 0x1E	; 30
     ac4:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	8f e0       	ldi	r24, 0x0F	; 15
     acc:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	87 e2       	ldi	r24, 0x27	; 39
     ad4:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	8d e1       	ldi	r24, 0x1D	; 29
     adc:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	8c e1       	ldi	r24, 0x1C	; 28
     ae4:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>

00000ae8 <updateLED()>:
_Z9updateLEDv():
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <updateLED()::led_timing>
     af0:	84 30       	cpi	r24, 0x04	; 4
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <updateLED()+0x10>
     af4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <updateLED()::led_timing>
     af8:	0e 94 44 05 	call	0xa88	; 0xa88 <ledOffAll()>
     afc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <updateLED()::led_timing>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	09 f4       	brne	.+2      	; 0xb06 <updateLED()+0x1e>
     b04:	4a c0       	rjmp	.+148    	; 0xb9a <updateLED()+0xb2>
     b06:	90 f1       	brcs	.+100    	; 0xb6c <updateLED()+0x84>
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	09 f4       	brne	.+2      	; 0xb0e <updateLED()+0x26>
     b0c:	a7 c0       	rjmp	.+334    	; 0xc5c <updateLED()+0x174>
     b0e:	83 30       	cpi	r24, 0x03	; 3
     b10:	09 f4       	brne	.+2      	; 0xb14 <updateLED()+0x2c>
     b12:	16 c1       	rjmp	.+556    	; 0xd40 <updateLED()+0x258>
     b14:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     b18:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <pre_led_flash_time>
     b1c:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <pre_led_flash_time+0x1>
     b20:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <pre_led_flash_time+0x2>
     b24:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <pre_led_flash_time+0x3>
     b28:	60 1b       	sub	r22, r16
     b2a:	71 0b       	sbc	r23, r17
     b2c:	82 0b       	sbc	r24, r18
     b2e:	93 0b       	sbc	r25, r19
     b30:	6d 32       	cpi	r22, 0x2D	; 45
     b32:	71 40       	sbci	r23, 0x01	; 1
     b34:	81 05       	cpc	r24, r1
     b36:	91 05       	cpc	r25, r1
     b38:	88 f0       	brcs	.+34     	; 0xb5c <updateLED()+0x74>
     b3a:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     b3e:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <pre_led_flash_time>
     b42:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <pre_led_flash_time+0x1>
     b46:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <pre_led_flash_time+0x2>
     b4a:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <pre_led_flash_time+0x3>
     b4e:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     b52:	81 11       	cpse	r24, r1
     b54:	14 c1       	rjmp	.+552    	; 0xd7e <updateLED()+0x296>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <flash_statae>
     b5c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <updateLED()::led_timing>
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <updateLED()::led_timing>
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	08 95       	ret
     b6c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     b70:	88 23       	and	r24, r24
     b72:	81 f2       	breq	.-96     	; 0xb14 <updateLED()+0x2c>
     b74:	8c e2       	ldi	r24, 0x2C	; 44
     b76:	0e 94 f7 19 	call	0x33ee	; 0x33ee <digitalRead>
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	29 f4       	brne	.+10     	; 0xb88 <updateLED()+0xa0>
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	89 e2       	ldi	r24, 0x29	; 41
     b82:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     b86:	c6 cf       	rjmp	.-116    	; 0xb14 <updateLED()+0x2c>
     b88:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     b8c:	88 23       	and	r24, r24
     b8e:	b9 f3       	breq	.-18     	; 0xb7e <updateLED()+0x96>
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	89 e2       	ldi	r24, 0x29	; 41
     b94:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     b98:	bd cf       	rjmp	.-134    	; 0xb14 <updateLED()+0x2c>
     b9a:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     b9e:	88 23       	and	r24, r24
     ba0:	e9 f0       	breq	.+58     	; 0xbdc <updateLED()+0xf4>
     ba2:	8a e3       	ldi	r24, 0x3A	; 58
     ba4:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     ba8:	89 3e       	cpi	r24, 0xE9	; 233
     baa:	93 40       	sbci	r25, 0x03	; 3
     bac:	fc f4       	brge	.+62     	; 0xbec <updateLED()+0x104>
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	82 e2       	ldi	r24, 0x22	; 34
     bb2:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     bb6:	87 e3       	ldi	r24, 0x37	; 55
     bb8:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     bbc:	8c 37       	cpi	r24, 0x7C	; 124
     bbe:	92 40       	sbci	r25, 0x02	; 2
     bc0:	24 f1       	brlt	.+72     	; 0xc0a <updateLED()+0x122>
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	83 e2       	ldi	r24, 0x23	; 35
     bc6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	81 e2       	ldi	r24, 0x21	; 33
     bce:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e2       	ldi	r24, 0x20	; 32
     bd6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     bda:	9c cf       	rjmp	.-200    	; 0xb14 <updateLED()+0x2c>
     bdc:	8a e3       	ldi	r24, 0x3A	; 58
     bde:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     be2:	88 3e       	cpi	r24, 0xE8	; 232
     be4:	93 40       	sbci	r25, 0x03	; 3
     be6:	0c f4       	brge	.+2      	; 0xbea <updateLED()+0x102>
     be8:	95 cf       	rjmp	.-214    	; 0xb14 <updateLED()+0x2c>
     bea:	db cf       	rjmp	.-74     	; 0xba2 <updateLED()+0xba>
     bec:	8c e3       	ldi	r24, 0x3C	; 60
     bee:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     bf2:	89 3e       	cpi	r24, 0xE9	; 233
     bf4:	93 40       	sbci	r25, 0x03	; 3
     bf6:	dc f6       	brge	.-74     	; 0xbae <updateLED()+0xc6>
     bf8:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     bfc:	88 23       	and	r24, r24
     bfe:	b9 f2       	breq	.-82     	; 0xbae <updateLED()+0xc6>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	82 e2       	ldi	r24, 0x22	; 34
     c04:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c08:	d6 cf       	rjmp	.-84     	; 0xbb6 <updateLED()+0xce>
     c0a:	87 e3       	ldi	r24, 0x37	; 55
     c0c:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     c10:	8e 34       	cpi	r24, 0x4E	; 78
     c12:	92 40       	sbci	r25, 0x02	; 2
     c14:	6c f0       	brlt	.+26     	; 0xc30 <updateLED()+0x148>
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	83 e2       	ldi	r24, 0x23	; 35
     c1a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	81 e2       	ldi	r24, 0x21	; 33
     c22:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c2e:	72 cf       	rjmp	.-284    	; 0xb14 <updateLED()+0x2c>
     c30:	87 e3       	ldi	r24, 0x37	; 55
     c32:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	8f 32       	cpi	r24, 0x2F	; 47
     c3a:	92 40       	sbci	r25, 0x02	; 2
     c3c:	5c f4       	brge	.+22     	; 0xc54 <updateLED()+0x16c>
     c3e:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     c42:	81 11       	cpse	r24, r1
     c44:	06 c0       	rjmp	.+12     	; 0xc52 <updateLED()+0x16a>
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	83 e2       	ldi	r24, 0x23	; 35
     c4a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	e7 cf       	rjmp	.-50     	; 0xc20 <updateLED()+0x138>
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	83 e2       	ldi	r24, 0x23	; 35
     c56:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c5a:	f9 cf       	rjmp	.-14     	; 0xc4e <updateLED()+0x166>
     c5c:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     c60:	88 23       	and	r24, r24
     c62:	09 f4       	brne	.+2      	; 0xc66 <updateLED()+0x17e>
     c64:	57 cf       	rjmp	.-338    	; 0xb14 <updateLED()+0x2c>
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	8e e0       	ldi	r24, 0x0E	; 14
     c6a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c6e:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <active_step>
     c72:	e7 30       	cpi	r30, 0x07	; 7
     c74:	08 f0       	brcs	.+2      	; 0xc78 <updateLED()+0x190>
     c76:	4e cf       	rjmp	.-356    	; 0xb14 <updateLED()+0x2c>
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	88 27       	eor	r24, r24
     c7c:	ed 5b       	subi	r30, 0xBD	; 189
     c7e:	f9 4f       	sbci	r31, 0xF9	; 249
     c80:	8f 4f       	sbci	r24, 0xFF	; 255
     c82:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__tablejump2__>
     c86:	4a 06       	cpc	r4, r26
     c88:	57 06       	cpc	r5, r23
     c8a:	69 06       	cpc	r6, r25
     c8c:	69 06       	cpc	r6, r25
     c8e:	76 06       	cpc	r7, r22
     c90:	8b 06       	cpc	r8, r27
     c92:	8b 06       	cpc	r8, r27
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	8f e1       	ldi	r24, 0x1F	; 31
     c98:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	8e e1       	ldi	r24, 0x1E	; 30
     ca0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	8f e0       	ldi	r24, 0x0F	; 15
     ca8:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cac:	2f c0       	rjmp	.+94     	; 0xd0c <updateLED()+0x224>
     cae:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     cb2:	81 11       	cpse	r24, r1
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <updateLED()+0x1e0>
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	8f e1       	ldi	r24, 0x1F	; 31
     cba:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	8e e1       	ldi	r24, 0x1E	; 30
     cc2:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cc6:	ee cf       	rjmp	.-36     	; 0xca4 <updateLED()+0x1bc>
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	8f e1       	ldi	r24, 0x1F	; 31
     ccc:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cd0:	f6 cf       	rjmp	.-20     	; 0xcbe <updateLED()+0x1d6>
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	8f e1       	ldi	r24, 0x1F	; 31
     cd6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cda:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     cde:	81 11       	cpse	r24, r1
     ce0:	ee cf       	rjmp	.-36     	; 0xcbe <updateLED()+0x1d6>
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cea:	dc cf       	rjmp	.-72     	; 0xca4 <updateLED()+0x1bc>
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	8f e1       	ldi	r24, 0x1F	; 31
     cf0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	8e e1       	ldi	r24, 0x1E	; 30
     cf8:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     cfc:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     d00:	81 11       	cpse	r24, r1
     d02:	d0 cf       	rjmp	.-96     	; 0xca4 <updateLED()+0x1bc>
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	8f e0       	ldi	r24, 0x0F	; 15
     d08:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	87 e2       	ldi	r24, 0x27	; 39
     d10:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d14:	ff ce       	rjmp	.-514    	; 0xb14 <updateLED()+0x2c>
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	8f e1       	ldi	r24, 0x1F	; 31
     d1a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	8e e1       	ldi	r24, 0x1E	; 30
     d22:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	8f e0       	ldi	r24, 0x0F	; 15
     d2a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d2e:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <flash_statae>
     d32:	81 11       	cpse	r24, r1
     d34:	eb cf       	rjmp	.-42     	; 0xd0c <updateLED()+0x224>
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	87 e2       	ldi	r24, 0x27	; 39
     d3a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d3e:	ea ce       	rjmp	.-556    	; 0xb14 <updateLED()+0x2c>
     d40:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <off_led_show_state>
     d44:	81 11       	cpse	r24, r1
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <updateLED()+0x26a>
     d48:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <updateLED()+0x26a>
     d50:	e1 ce       	rjmp	.-574    	; 0xb14 <updateLED()+0x2c>
     d52:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <f_peltier_state>
     d56:	88 23       	and	r24, r24
     d58:	49 f0       	breq	.+18     	; 0xd6c <updateLED()+0x284>
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	8d e1       	ldi	r24, 0x1D	; 29
     d5e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	8c e1       	ldi	r24, 0x1C	; 28
     d66:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d6a:	d4 ce       	rjmp	.-600    	; 0xb14 <updateLED()+0x2c>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	8d e1       	ldi	r24, 0x1D	; 29
     d70:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	8c e1       	ldi	r24, 0x1C	; 28
     d78:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     d7c:	cb ce       	rjmp	.-618    	; 0xb14 <updateLED()+0x2c>
     d7e:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <flash_statae>
     d82:	ec ce       	rjmp	.-552    	; 0xb5c <updateLED()+0x74>

00000d84 <Melody_Proc()>:
_Z11Melody_Procv():
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <Sound_Update>
     d8c:	88 23       	and	r24, r24
     d8e:	09 f4       	brne	.+2      	; 0xd92 <Melody_Proc()+0xe>
     d90:	7c c0       	rjmp	.+248    	; 0xe8a <Melody_Proc()+0x106>
     d92:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     d96:	00 91 b4 02 	lds	r16, 0x02B4	; 0x8002b4 <pre_buzzer_tic>
     d9a:	10 91 b5 02 	lds	r17, 0x02B5	; 0x8002b5 <pre_buzzer_tic+0x1>
     d9e:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <pre_buzzer_tic+0x2>
     da2:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <pre_buzzer_tic+0x3>
     da6:	60 1b       	sub	r22, r16
     da8:	71 0b       	sbc	r23, r17
     daa:	82 0b       	sbc	r24, r18
     dac:	93 0b       	sbc	r25, r19
     dae:	66 34       	cpi	r22, 0x46	; 70
     db0:	71 05       	cpc	r23, r1
     db2:	81 05       	cpc	r24, r1
     db4:	91 05       	cpc	r25, r1
     db6:	08 f4       	brcc	.+2      	; 0xdba <Melody_Proc()+0x36>
     db8:	68 c0       	rjmp	.+208    	; 0xe8a <Melody_Proc()+0x106>
     dba:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     dbe:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <pre_buzzer_tic>
     dc2:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <pre_buzzer_tic+0x1>
     dc6:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pre_buzzer_tic+0x2>
     dca:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pre_buzzer_tic+0x3>
     dce:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <Sound_Update>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	29 f4       	brne	.+10     	; 0xde0 <Melody_Proc()+0x5c>
     dd6:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end>
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <Sound_Update>
     de0:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__data_end>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	8e 0f       	add	r24, r30
     de8:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
     dec:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <Sound_Num>
     df0:	91 30       	cpi	r25, 0x01	; 1
     df2:	09 f0       	breq	.+2      	; 0xdf6 <Melody_Proc()+0x72>
     df4:	43 c0       	rjmp	.+134    	; 0xe7c <Melody_Proc()+0xf8>
     df6:	ee 30       	cpi	r30, 0x0E	; 14
     df8:	08 f0       	brcs	.+2      	; 0xdfc <Melody_Proc()+0x78>
     dfa:	47 c0       	rjmp	.+142    	; 0xe8a <Melody_Proc()+0x106>
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	88 27       	eor	r24, r24
     e00:	eb 5f       	subi	r30, 0xFB	; 251
     e02:	f8 4f       	sbci	r31, 0xF8	; 248
     e04:	8f 4f       	sbci	r24, 0xFF	; 255
     e06:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__tablejump2__>
     e0a:	13 07       	cpc	r17, r19
     e0c:	45 07       	cpc	r20, r21
     e0e:	20 07       	cpc	r18, r16
     e10:	45 07       	cpc	r20, r21
     e12:	7b 07       	cpc	r23, r27
     e14:	45 07       	cpc	r20, r21
     e16:	2a 07       	cpc	r18, r26
     e18:	45 07       	cpc	r20, r21
     e1a:	68 07       	cpc	r22, r24
     e1c:	45 07       	cpc	r20, r21
     e1e:	34 07       	cpc	r19, r20
     e20:	45 07       	cpc	r20, r21
     e22:	87 07       	cpc	r24, r23
     e24:	51 07       	cpc	r21, r17
     e26:	8e e2       	ldi	r24, 0x2E	; 46
     e28:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <noTone(unsigned char)>
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	8e e2       	ldi	r24, 0x2E	; 46
     e30:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	8d e2       	ldi	r24, 0x2D	; 45
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	64 ee       	ldi	r22, 0xE4	; 228
     e48:	7c e0       	ldi	r23, 0x0C	; 12
     e4a:	8e e2       	ldi	r24, 0x2E	; 46
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <tone(unsigned char, unsigned int, unsigned long)>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a9 01       	movw	r20, r18
     e5a:	60 ed       	ldi	r22, 0xD0	; 208
     e5c:	77 e0       	ldi	r23, 0x07	; 7
     e5e:	8e e2       	ldi	r24, 0x2E	; 46
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <tone(unsigned char, unsigned int, unsigned long)>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	a9 01       	movw	r20, r18
     e6e:	60 eb       	ldi	r22, 0xB0	; 176
     e70:	74 e0       	ldi	r23, 0x04	; 4
     e72:	8e e2       	ldi	r24, 0x2E	; 46
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <tone(unsigned char, unsigned int, unsigned long)>
     e7c:	92 30       	cpi	r25, 0x02	; 2
     e7e:	f1 f4       	brne	.+60     	; 0xebc <Melody_Proc()+0x138>
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	41 f3       	breq	.-48     	; 0xe54 <Melody_Proc()+0xd0>
     e84:	28 f4       	brcc	.+10     	; 0xe90 <Melody_Proc()+0x10c>
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	71 f2       	breq	.-100    	; 0xe26 <Melody_Proc()+0xa2>
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret
     e90:	86 30       	cpi	r24, 0x06	; 6
     e92:	19 f0       	breq	.+6      	; 0xe9a <Melody_Proc()+0x116>
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	29 f0       	breq	.+10     	; 0xea2 <Melody_Proc()+0x11e>
     e98:	f8 cf       	rjmp	.-16     	; 0xe8a <Melody_Proc()+0x106>
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8d e2       	ldi	r24, 0x2D	; 45
     e9e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     ea2:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <Sound_Update>
     ea6:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end>
     eaa:	8e e2       	ldi	r24, 0x2E	; 46
     eac:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <noTone(unsigned char)>
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	8e e2       	ldi	r24, 0x2E	; 46
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     ebc:	93 30       	cpi	r25, 0x03	; 3
     ebe:	91 f4       	brne	.+36     	; 0xee4 <Melody_Proc()+0x160>
     ec0:	85 30       	cpi	r24, 0x05	; 5
     ec2:	c9 f0       	breq	.+50     	; 0xef6 <Melody_Proc()+0x172>
     ec4:	10 f5       	brcc	.+68     	; 0xf0a <Melody_Proc()+0x186>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	09 f4       	brne	.+2      	; 0xecc <Melody_Proc()+0x148>
     eca:	ad cf       	rjmp	.-166    	; 0xe26 <Melody_Proc()+0xa2>
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	e9 f6       	brne	.-70     	; 0xe8a <Melody_Proc()+0x106>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	a9 01       	movw	r20, r18
     ed6:	60 e4       	ldi	r22, 0x40	; 64
     ed8:	76 e0       	ldi	r23, 0x06	; 6
     eda:	8e e2       	ldi	r24, 0x2E	; 46
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <tone(unsigned char, unsigned int, unsigned long)>
     ee4:	94 30       	cpi	r25, 0x04	; 4
     ee6:	09 f5       	brne	.+66     	; 0xf2a <Melody_Proc()+0x1a6>
     ee8:	85 30       	cpi	r24, 0x05	; 5
     eea:	91 f3       	breq	.-28     	; 0xed0 <Melody_Proc()+0x14c>
     eec:	70 f4       	brcc	.+28     	; 0xf0a <Melody_Proc()+0x186>
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	a1 f0       	breq	.+40     	; 0xf1a <Melody_Proc()+0x196>
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	51 f6       	brne	.-108    	; 0xe8a <Melody_Proc()+0x106>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	64 ec       	ldi	r22, 0xC4	; 196
     efe:	79 e0       	ldi	r23, 0x09	; 9
     f00:	8e e2       	ldi	r24, 0x2E	; 46
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <tone(unsigned char, unsigned int, unsigned long)>
     f0a:	87 30       	cpi	r24, 0x07	; 7
     f0c:	19 f6       	brne	.-122    	; 0xe94 <Melody_Proc()+0x110>
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	8d e2       	ldi	r24, 0x2D	; 45
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
     f1a:	8e e2       	ldi	r24, 0x2E	; 46
     f1c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <noTone(unsigned char)>
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	8e e2       	ldi	r24, 0x2E	; 46
     f24:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
     f28:	f2 cf       	rjmp	.-28     	; 0xf0e <Melody_Proc()+0x18a>
     f2a:	95 30       	cpi	r25, 0x05	; 5
     f2c:	09 f0       	breq	.+2      	; 0xf30 <Melody_Proc()+0x1ac>
     f2e:	ad cf       	rjmp	.-166    	; 0xe8a <Melody_Proc()+0x106>
     f30:	ee 30       	cpi	r30, 0x0E	; 14
     f32:	08 f0       	brcs	.+2      	; 0xf36 <Melody_Proc()+0x1b2>
     f34:	aa cf       	rjmp	.-172    	; 0xe8a <Melody_Proc()+0x106>
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	88 27       	eor	r24, r24
     f3a:	ee 55       	subi	r30, 0x5E	; 94
     f3c:	f8 4f       	sbci	r31, 0xF8	; 248
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__tablejump2__>
     f44:	13 07       	cpc	r17, r19
     f46:	45 07       	cpc	r20, r21
     f48:	34 07       	cpc	r19, r20
     f4a:	45 07       	cpc	r20, r21
     f4c:	68 07       	cpc	r22, r24
     f4e:	45 07       	cpc	r20, r21
     f50:	2a 07       	cpc	r18, r26
     f52:	45 07       	cpc	r20, r21
     f54:	7b 07       	cpc	r23, r27
     f56:	45 07       	cpc	r20, r21
     f58:	20 07       	cpc	r18, r16
     f5a:	45 07       	cpc	r20, r21
     f5c:	87 07       	cpc	r24, r23
     f5e:	51 07       	cpc	r21, r17

00000f60 <loop>:
loop():
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	0e 94 9c 03 	call	0x738	; 0x738 <Key_Scan()>
     f68:	0e 94 ff 04 	call	0x9fe	; 0x9fe <updateTemperatrue()>
     f6c:	0e 94 74 05 	call	0xae8	; 0xae8 <updateLED()>
     f70:	0e 94 6f 04 	call	0x8de	; 0x8de <updateCeEmc()>
     f74:	0e 94 c2 06 	call	0xd84	; 0xd84 <Melody_Proc()>
     f78:	8a e3       	ldi	r24, 0x3A	; 58
     f7a:	0e 94 00 19 	call	0x3200	; 0x3200 <analogRead>
     f7e:	89 3e       	cpi	r24, 0xE9	; 233
     f80:	93 40       	sbci	r25, 0x03	; 3
     f82:	6c f0       	brlt	.+26     	; 0xf9e <loop+0x3e>
     f84:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     f88:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <next_sleep_ent_time>
     f8c:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <next_sleep_ent_time+0x1>
     f90:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <next_sleep_ent_time+0x2>
     f94:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <next_sleep_ent_time+0x3>
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret
     f9e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <is_touch_enable>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <loop+0x38>
     fa6:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <f_power_state>
     faa:	81 11       	cpse	r24, r1
     fac:	f5 cf       	rjmp	.-22     	; 0xf98 <loop+0x38>
     fae:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     fb2:	00 91 a3 02 	lds	r16, 0x02A3	; 0x8002a3 <next_sleep_ent_time>
     fb6:	10 91 a4 02 	lds	r17, 0x02A4	; 0x8002a4 <next_sleep_ent_time+0x1>
     fba:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <next_sleep_ent_time+0x2>
     fbe:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <next_sleep_ent_time+0x3>
     fc2:	60 1b       	sub	r22, r16
     fc4:	71 0b       	sbc	r23, r17
     fc6:	82 0b       	sbc	r24, r18
     fc8:	93 0b       	sbc	r25, r19
     fca:	61 3d       	cpi	r22, 0xD1	; 209
     fcc:	77 40       	sbci	r23, 0x07	; 7
     fce:	81 05       	cpc	r24, r1
     fd0:	91 05       	cpc	r25, r1
     fd2:	10 f3       	brcs	.-60     	; 0xf98 <loop+0x38>
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	67 e0       	ldi	r22, 0x07	; 7
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	85 ee       	ldi	r24, 0xE5	; 229
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	0e 94 09 0a 	call	0x1412	; 0x1412 <LowPowerClass::powerDown(period_t, adc_t, bod_t)>
     fe8:	cd cf       	rjmp	.-102    	; 0xf84 <loop+0x24>

00000fea <_GLOBAL__sub_I_Key>:
_GLOBAL__sub_I_Key():
     fea:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
     fee:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <pre_key_readtime>
     ff2:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <pre_key_readtime+0x1>
     ff6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <pre_key_readtime+0x2>
     ffa:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <pre_key_readtime+0x3>
     ffe:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    1002:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <pre_temp_readtime>
    1006:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <pre_temp_readtime+0x1>
    100a:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <pre_temp_readtime+0x2>
    100e:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <pre_temp_readtime+0x3>
    1012:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    1016:	60 93 cc 02 	sts	0x02CC, r22	; 0x8002cc <pre_psi_readtime>
    101a:	70 93 cd 02 	sts	0x02CD, r23	; 0x8002cd <pre_psi_readtime+0x1>
    101e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <pre_psi_readtime+0x2>
    1022:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <pre_psi_readtime+0x3>
    1026:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    102a:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <pre_valve_close_time>
    102e:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <pre_valve_close_time+0x1>
    1032:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <pre_valve_close_time+0x2>
    1036:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <pre_valve_close_time+0x3>
    103a:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    103e:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <pre_eeprom_time>
    1042:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <pre_eeprom_time+0x1>
    1046:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <pre_eeprom_time+0x2>
    104a:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <pre_eeprom_time+0x3>
    104e:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    1052:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <pre_encodercheck_time>
    1056:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <pre_encodercheck_time+0x1>
    105a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <pre_encodercheck_time+0x2>
    105e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <pre_encodercheck_time+0x3>
    1062:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    1066:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <pre_motor_stop_time>
    106a:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <pre_motor_stop_time+0x1>
    106e:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <pre_motor_stop_time+0x2>
    1072:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <pre_motor_stop_time+0x3>
    1076:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    107a:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <pre_led_flash_time>
    107e:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <pre_led_flash_time+0x1>
    1082:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <pre_led_flash_time+0x2>
    1086:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <pre_led_flash_time+0x3>
    108a:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    108e:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <pre_buzzer_tic>
    1092:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <pre_buzzer_tic+0x1>
    1096:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <pre_buzzer_tic+0x2>
    109a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <pre_buzzer_tic+0x3>
    109e:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    10a2:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <pre_user_motor_worktime>
    10a6:	70 93 b1 02 	sts	0x02B1, r23	; 0x8002b1 <pre_user_motor_worktime+0x1>
    10aa:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <pre_user_motor_worktime+0x2>
    10ae:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <pre_user_motor_worktime+0x3>
    10b2:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    10b6:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <pre_touch_stabil_time>
    10ba:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <pre_touch_stabil_time+0x1>
    10be:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <pre_touch_stabil_time+0x2>
    10c2:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <pre_touch_stabil_time+0x3>
    10c6:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    10ca:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <pre_led_update_time>
    10ce:	70 93 a8 02 	sts	0x02A8, r23	; 0x8002a8 <pre_led_update_time+0x1>
    10d2:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <pre_led_update_time+0x2>
    10d6:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <pre_led_update_time+0x3>
    10da:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    10de:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <next_sleep_ent_time>
    10e2:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <next_sleep_ent_time+0x1>
    10e6:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <next_sleep_ent_time+0x2>
    10ea:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <next_sleep_ent_time+0x3>
    10ee:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    10f2:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <interval_ble_tx>
    10f6:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <interval_ble_tx+0x1>
    10fa:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <interval_ble_tx+0x2>
    10fe:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <interval_ble_tx+0x3>
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	43 e1       	ldi	r20, 0x13	; 19
    1106:	62 e1       	ldi	r22, 0x12	; 18
    1108:	8f e7       	ldi	r24, 0x7F	; 127
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>

00001110 <_GLOBAL__sub_D_Key>:
_GLOBAL__sub_D_Key():
    1110:	8f e7       	ldi	r24, 0x7F	; 127
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <SoftwareSerial::~SoftwareSerial()>

00001118 <readEEPROM()>:
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1061
    }
  }
}

void readEEPROM (void)
{
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	64 97       	sbiw	r28, 0x14	; 20
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	7c 01       	movw	r14, r24
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1062
  int addr = 0x00;
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	00 e0       	ldi	r16, 0x00	; 0
_ZNK5EERefdeEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    113e:	c8 01       	movw	r24, r16
    1140:	0e 94 84 1a 	call	0x3508	; 0x3508 <eeprom_read_byte>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1067
  signed int data[10];

  for (int i = 0; i < 10; i++)
  {
    data[i] = EEPROM.read(addr);
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	f7 01       	movw	r30, r14
    1148:	81 93       	st	Z+, r24
    114a:	91 93       	st	Z+, r25
    114c:	7f 01       	movw	r14, r30
    114e:	0e 5f       	subi	r16, 0xFE	; 254
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1069
    addr += sizeof(signed int);
    delay(1);
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <delay>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1065
void readEEPROM (void)
{
  int addr = 0x00;
  signed int data[10];

  for (int i = 0; i < 10; i++)
    115e:	04 31       	cpi	r16, 0x14	; 20
    1160:	11 05       	cpc	r17, r1
    1162:	69 f7       	brne	.-38     	; 0x113e <readEEPROM()+0x26>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1072
    data[i] = EEPROM.read(addr);
    addr += sizeof(signed int);
    delay(1);
  }

  off_led_show_state = data[2];
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <off_led_show_state>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1073
  is_update_infor = true;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <is_update_infor>
_ZN5Print5writeEPKc():
    1170:	67 e1       	ldi	r22, 0x17	; 23
    1172:	72 e0       	ldi	r23, 0x02	; 2
    1174:	8f e7       	ldi	r24, 0x7F	; 127
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 0a 02 	call	0x414	; 0x414 <Print::write(char const*) [clone .part.0]>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1077

  // TODO : update Ble Data
  ble.write("AT");
  ble.write(0x0D);
    117c:	6d e0       	ldi	r22, 0x0D	; 13
    117e:	8f e7       	ldi	r24, 0x7F	; 127
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <SoftwareSerial::write(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1078
  delay(20);
    1186:	64 e1       	ldi	r22, 0x14	; 20
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <delay>
_ZN5Print5writeEPKc():
    1192:	6a e1       	ldi	r22, 0x1A	; 26
    1194:	72 e0       	ldi	r23, 0x02	; 2
    1196:	8f e7       	ldi	r24, 0x7F	; 127
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	0e 94 0a 02 	call	0x414	; 0x414 <Print::write(char const*) [clone .part.0]>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1081

  ble.write("AT+MANUF=insuAID");
  ble.write(0x0D);
    119e:	6d e0       	ldi	r22, 0x0D	; 13
    11a0:	8f e7       	ldi	r24, 0x7F	; 127
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <SoftwareSerial::write(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1082
  delay(20);
    11a8:	64 e1       	ldi	r22, 0x14	; 20
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 7f 18 	call	0x30fe	; 0x30fe <delay>
_ZN5Print5writeEPKc():
    11b4:	6b e2       	ldi	r22, 0x2B	; 43
    11b6:	72 e0       	ldi	r23, 0x02	; 2
    11b8:	8f e7       	ldi	r24, 0x7F	; 127
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	0e 94 0a 02 	call	0x414	; 0x414 <Print::write(char const*) [clone .part.0]>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1085

  ble.write("AT+ADVDATA=insuAID");
  ble.write(0x0D);
    11c0:	6d e0       	ldi	r22, 0x0D	; 13
    11c2:	8f e7       	ldi	r24, 0x7F	; 127
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <SoftwareSerial::write(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1086
  delay(20);
    11ca:	64 e1       	ldi	r22, 0x14	; 20
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <delay>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1088

  digitalWrite(BLE_UART, LOW);
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	8a e2       	ldi	r24, 0x2A	; 42
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1090
  
}
    11da:	64 96       	adiw	r28, 0x14	; 20
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:1088

  ble.write("AT+ADVDATA=insuAID");
  ble.write(0x0D);
  delay(20);

  digitalWrite(BLE_UART, LOW);
    11f2:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>

000011f6 <setup>:
setup():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:65

SoftwareSerial ble(18, 19); // RX, TX

void setup() {
  // put your setup code here, to run once:
  Serial.end();
    11f6:	89 ee       	ldi	r24, 0xE9	; 233
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	0e 94 ae 10 	call	0x215c	; 0x215c <HardwareSerial::end()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:66
  Serial1.end();
    11fe:	86 e8       	ldi	r24, 0x86	; 134
    1200:	94 e0       	ldi	r25, 0x04	; 4
    1202:	0e 94 ae 10 	call	0x215c	; 0x215c <HardwareSerial::end()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:68

  pinMode(BLE_STATE, INPUT);
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	8c e2       	ldi	r24, 0x2C	; 44
    120a:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:72

  // after connected keep high -> atmode
  // after connected keep low  -> bypass mode // default
  pinMode(BLE_MODE, OUTPUT);
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	8b e2       	ldi	r24, 0x2B	; 43
    1212:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:73
  digitalWrite(BLE_MODE, LOW);
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	8b e2       	ldi	r24, 0x2B	; 43
    121a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:77

  // rising edge -> uart off
  // falling edge-> uart on
  pinMode(BLE_UART, OUTPUT);
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	8a e2       	ldi	r24, 0x2A	; 42
    1222:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:78
  digitalWrite(BLE_UART, LOW);
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	8a e2       	ldi	r24, 0x2A	; 42
    122a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:80

  ble.begin(9600);
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	55 e2       	ldi	r21, 0x25	; 37
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	8f e7       	ldi	r24, 0x7F	; 127
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <SoftwareSerial::begin(long)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:89
  I2c.timeOut(2000);
  I2c.pullup(true);
  #endif
  
  // motor
  pinMode(MOTOR_PORT_F, OUTPUT);
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	88 e0       	ldi	r24, 0x08	; 8
    1242:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:90
  digitalWrite(MOTOR_PORT_F, LOW);
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	88 e0       	ldi	r24, 0x08	; 8
    124a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:92

  pinMode(MOTOR_PORT_R, OUTPUT);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	87 e0       	ldi	r24, 0x07	; 7
    1252:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:93
  digitalWrite(MOTOR_PORT_R, LOW);
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	87 e0       	ldi	r24, 0x07	; 7
    125a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:95

  pinMode(MOTOR_SLEEP, OUTPUT);
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	89 e0       	ldi	r24, 0x09	; 9
    1262:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:96
  digitalWrite(MOTOR_SLEEP, LOW);
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	89 e0       	ldi	r24, 0x09	; 9
    126a:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:98

  pinMode(MOTOR_FALT, INPUT_PULLUP);
    126e:	62 e0       	ldi	r22, 0x02	; 2
    1270:	86 e0       	ldi	r24, 0x06	; 6
    1272:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:99
  pinMode(ENCODER_A, INPUT_PULLUP);
    1276:	62 e0       	ldi	r22, 0x02	; 2
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:100
  pinMode(ENCODER_B, INPUT_PULLUP);
    127e:	62 e0       	ldi	r22, 0x02	; 2
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:101
  attachInterrupt(0, A_CHANGE, CHANGE);
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	6b ed       	ldi	r22, 0xDB	; 219
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	0e 94 22 16 	call	0x2c44	; 0x2c44 <attachInterrupt>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:104

  // temp control
  pinMode(PELTIER_PORT, OUTPUT);
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	88 e1       	ldi	r24, 0x18	; 24
    1298:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:105
  digitalWrite(PELTIER_PORT, LOW);
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	88 e1       	ldi	r24, 0x18	; 24
    12a0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:107

  pinMode(PELTIER_FAN, OUTPUT);
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	8a e1       	ldi	r24, 0x1A	; 26
    12a8:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:108
  digitalWrite(PELTIER_FAN, LOW);
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	8a e1       	ldi	r24, 0x1A	; 26
    12b0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:111

  // psi
  pinMode(SOLENOID_PORT, OUTPUT);
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	87 e1       	ldi	r24, 0x17	; 23
    12b8:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:112
  digitalWrite(SOLENOID_PORT, LOW);
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	87 e1       	ldi	r24, 0x17	; 23
    12c0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:114

  pinMode(AIRPUMP_PORT, OUTPUT);
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	89 e1       	ldi	r24, 0x19	; 25
    12c8:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:115
  digitalWrite(AIRPUMP_PORT, LOW);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	89 e1       	ldi	r24, 0x19	; 25
    12d0:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:118


  pinMode(BUZZER_PWM, OUTPUT);
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	8e e2       	ldi	r24, 0x2E	; 46
    12d8:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:119
  noTone(BUZZER_PWM);
    12dc:	8e e2       	ldi	r24, 0x2E	; 46
    12de:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <noTone(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:120
  digitalWrite(BUZZER_PWM, LOW);
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	8e e2       	ldi	r24, 0x2E	; 46
    12e6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:122

  pinMode(BUZZER_POWER, OUTPUT);
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	8d e2       	ldi	r24, 0x2D	; 45
    12ee:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:123
  digitalWrite(BUZZER_POWER, LOW);
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	8d e2       	ldi	r24, 0x2D	; 45
    12f6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:125

  pinMode(LED_BLE, OUTPUT);
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	89 e2       	ldi	r24, 0x29	; 41
    12fe:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:126
  pinMode(LED_BAT_ICO, OUTPUT);
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	82 e2       	ldi	r24, 0x22	; 34
    1306:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:127
  pinMode(LED_BAT_STATE1, OUTPUT);
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	83 e2       	ldi	r24, 0x23	; 35
    130e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:128
  pinMode(LED_BAT_STATE2, OUTPUT);
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	81 e2       	ldi	r24, 0x21	; 33
    1316:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:129
  pinMode(LED_BAT_STATE3, OUTPUT);
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	80 e2       	ldi	r24, 0x20	; 32
    131e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:130
  pinMode(LED_MOTOR_ICO, OUTPUT);
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	8e e0       	ldi	r24, 0x0E	; 14
    1326:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:131
  pinMode(LED_MOTOR_STATE1, OUTPUT);
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	8f e1       	ldi	r24, 0x1F	; 31
    132e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:132
  pinMode(LED_MOTOR_STATE2, OUTPUT);
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	8e e1       	ldi	r24, 0x1E	; 30
    1336:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:133
  pinMode(LED_MOTOR_STATE3, OUTPUT);
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	8f e0       	ldi	r24, 0x0F	; 15
    133e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:134
  pinMode(LED_MOTOR_STATE4, OUTPUT);
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	87 e2       	ldi	r24, 0x27	; 39
    1346:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:135
  pinMode(LED_TEMP_DANGER, OUTPUT);
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	8d e1       	ldi	r24, 0x1D	; 29
    134e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:136
  pinMode(LED_TEMP_NORMAL, OUTPUT);
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	8c e1       	ldi	r24, 0x1C	; 28
    1356:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:139

  #if BTN_MODE
  pinMode(LED_PWR, INPUT_PULLUP);
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	84 e2       	ldi	r24, 0x24	; 36
    135e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:140
  pinMode(LED_MTF, INPUT_PULLUP);
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	85 e2       	ldi	r24, 0x25	; 37
    1366:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:141
  pinMode(LED_MTR, INPUT_PULLUP);
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	88 e2       	ldi	r24, 0x28	; 40
    136e:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:152
  digitalWrite(LED_PWR, HIGH);
  digitalWrite(LED_MTF, HIGH);
  digitalWrite(LED_MTR, HIGH);
  #endif
  
  digitalWrite(LED_BLE, HIGH);
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	89 e2       	ldi	r24, 0x29	; 41
    1376:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:153
  digitalWrite(LED_BAT_ICO, HIGH);
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	82 e2       	ldi	r24, 0x22	; 34
    137e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:154
  digitalWrite(LED_BAT_STATE1, HIGH);
    1382:	61 e0       	ldi	r22, 0x01	; 1
    1384:	83 e2       	ldi	r24, 0x23	; 35
    1386:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:155
  digitalWrite(LED_BAT_STATE2, HIGH);
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	81 e2       	ldi	r24, 0x21	; 33
    138e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:156
  digitalWrite(LED_BAT_STATE3, HIGH);
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:157
  digitalWrite(LED_MOTOR_ICO, HIGH);
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	8e e0       	ldi	r24, 0x0E	; 14
    139e:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:158
  digitalWrite(LED_MOTOR_STATE1, HIGH);
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	8f e1       	ldi	r24, 0x1F	; 31
    13a6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:159
  digitalWrite(LED_MOTOR_STATE2, HIGH);
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	8e e1       	ldi	r24, 0x1E	; 30
    13ae:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:160
  digitalWrite(LED_MOTOR_STATE3, HIGH);
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	8f e0       	ldi	r24, 0x0F	; 15
    13b6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:161
  digitalWrite(LED_MOTOR_STATE4, HIGH);
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	87 e2       	ldi	r24, 0x27	; 39
    13be:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:162
  digitalWrite(LED_TEMP_DANGER, HIGH);
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	8d e1       	ldi	r24, 0x1D	; 29
    13c6:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:163
  digitalWrite(LED_TEMP_NORMAL, HIGH);
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	8c e1       	ldi	r24, 0x1C	; 28
    13ce:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:165

  pulses = 0;
    13d2:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <pulses+0x1>
    13d6:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <pulses>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:166
  pre_encodercheck_time = millis();
    13da:	0e 94 4e 18 	call	0x309c	; 0x309c <millis>
    13de:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <pre_encodercheck_time>
    13e2:	70 93 c1 02 	sts	0x02C1, r23	; 0x8002c1 <pre_encodercheck_time+0x1>
    13e6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <pre_encodercheck_time+0x2>
    13ea:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <pre_encodercheck_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:168

  active_step = STEP_USER_OFF;
    13ee:	89 e0       	ldi	r24, 0x09	; 9
    13f0:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <active_step>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:169
  is_target_psi_set = false;
    13f4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <is_target_psi_set>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:171

  readEEPROM();
    13f8:	0e 94 8c 08 	call	0x1118	; 0x1118 <readEEPROM()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:172
  working_mode = MODE_MANUAL;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <working_mode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:175
  
  
  Sound_Update = 2;
    1402:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <Sound_Update>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:176
  Sound_Num = 3;
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Sound_Num>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:177
  is_touch_enable = 0;
    140c:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <is_touch_enable>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:178
}
    1410:	08 95       	ret

00001412 <LowPowerClass::powerDown(period_t, adc_t, bod_t)>:
_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t():
c:\Users\DH\Documents\Arduino\libraries\Low-Power-master/LowPower.cpp:1105
				lowPowerBodOn(SLEEP_MODE_EXT_STANDBY);
			#endif
		}
		else
		{
			lowPowerBodOn(SLEEP_MODE_EXT_STANDBY);
    1412:	41 15       	cp	r20, r1
    1414:	51 05       	cpc	r21, r1
    1416:	29 f4       	brne	.+10     	; 0x1422 <LowPowerClass::powerDown(period_t, adc_t, bod_t)+0x10>
    1418:	ea e7       	ldi	r30, 0x7A	; 122
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 77       	andi	r24, 0x7F	; 127
    1420:	80 83       	st	Z, r24
    1422:	6a 30       	cpi	r22, 0x0A	; 10
    1424:	71 05       	cpc	r23, r1
    1426:	b9 f0       	breq	.+46     	; 0x1456 <LowPowerClass::powerDown(period_t, adc_t, bod_t)+0x44>
wdt_enable():
    1428:	cb 01       	movw	r24, r22
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	80 72       	andi	r24, 0x20	; 32
    1434:	67 70       	andi	r22, 0x07	; 7
    1436:	68 60       	ori	r22, 0x08	; 8
    1438:	68 2b       	or	r22, r24
    143a:	88 e1       	ldi	r24, 0x18	; 24
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	a8 95       	wdr
    1442:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t():
    144c:	e0 e6       	ldi	r30, 0x60	; 96
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 64       	ori	r24, 0x40	; 64
    1454:	80 83       	st	Z, r24
    1456:	23 2b       	or	r18, r19
    1458:	b1 f4       	brne	.+44     	; 0x1486 <LowPowerClass::powerDown(period_t, adc_t, bod_t)+0x74>
    145a:	83 b7       	in	r24, 0x33	; 51
    145c:	81 7f       	andi	r24, 0xF1	; 241
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	83 bf       	out	0x33, r24	; 51
    1462:	f8 94       	cli
    1464:	83 b7       	in	r24, 0x33	; 51
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	83 bf       	out	0x33, r24	; 51
    146a:	78 94       	sei
    146c:	88 95       	sleep
    146e:	83 b7       	in	r24, 0x33	; 51
    1470:	8e 7f       	andi	r24, 0xFE	; 254
    1472:	83 bf       	out	0x33, r24	; 51
    1474:	78 94       	sei
    1476:	45 2b       	or	r20, r21
    1478:	29 f4       	brne	.+10     	; 0x1484 <LowPowerClass::powerDown(period_t, adc_t, bod_t)+0x72>
    147a:	ea e7       	ldi	r30, 0x7A	; 122
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	80 83       	st	Z, r24
    1484:	08 95       	ret
    1486:	83 b7       	in	r24, 0x33	; 51
    1488:	81 7f       	andi	r24, 0xF1	; 241
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	83 bf       	out	0x33, r24	; 51
    148e:	f8 94       	cli
    1490:	83 b7       	in	r24, 0x33	; 51
    1492:	81 60       	ori	r24, 0x01	; 1
    1494:	83 bf       	out	0x33, r24	; 51
    1496:	78 94       	sei
    1498:	88 95       	sleep
    149a:	83 b7       	in	r24, 0x33	; 51
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	83 bf       	out	0x33, r24	; 51
    14a0:	78 94       	sei
    14a2:	e9 cf       	rjmp	.-46     	; 0x1476 <LowPowerClass::powerDown(period_t, adc_t, bod_t)+0x64>

000014a4 <__vector_12>:
__vector_12():
c:\Users\DH\Documents\Arduino\libraries\Low-Power-master/LowPower.cpp:1128
*		       required to allow automatic WDIF and WDIE bit clearance in
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	8f 93       	push	r24
wdt_disable():
c:\users\dh\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\avr/wdt.h:528
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	a8 95       	wdr
    14b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    14ba:	88 61       	ori	r24, 0x18	; 24
    14bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    14c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    14c4:	0f be       	out	0x3f, r0	; 63
__vector_12():
c:\Users\DH\Documents\Arduino\libraries\Low-Power-master/LowPower.cpp:1131
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
    14c6:	8f 91       	pop	r24
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:331

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    14d8:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <TwoWire::rxBufferLength>
    14dc:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <TwoWire::rxBufferIndex>
    14e0:	89 1b       	sub	r24, r25
    14e2:	99 0b       	sbc	r25, r25
    14e4:	08 95       	ret

000014e6 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    14e6:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <TwoWire::rxBufferIndex>
    14ea:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <TwoWire::rxBufferLength>
    14ee:	2f ef       	ldi	r18, 0xFF	; 255
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	98 17       	cp	r25, r24
    14f4:	48 f4       	brcc	.+18     	; 0x1508 <TwoWire::read()+0x22>
    14f6:	e9 2f       	mov	r30, r25
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e9 5e       	subi	r30, 0xE9	; 233
    14fc:	fc 4f       	sbci	r31, 0xFC	; 252
    14fe:	20 81       	ld	r18, Z
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	9f 5f       	subi	r25, 0xFF	; 255
    1504:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <TwoWire::rxBufferIndex>
    1508:	c9 01       	movw	r24, r18
    150a:	08 95       	ret

0000150c <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    150c:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <TwoWire::rxBufferIndex>
    1510:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <TwoWire::rxBufferLength>
    1514:	e8 17       	cp	r30, r24
    1516:	30 f4       	brcc	.+12     	; 0x1524 <TwoWire::peek()+0x18>
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	e9 5e       	subi	r30, 0xE9	; 233
    151c:	fc 4f       	sbci	r31, 0xFC	; 252
    151e:	80 81       	ld	r24, Z
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	08 95       	ret
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	08 95       	ret

0000152a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    152a:	08 95       	ret

0000152c <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	1f 92       	push	r1
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	69 83       	std	Y+1, r22	; 0x01
    1538:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <TwoWire::transmitting>
    153c:	22 23       	and	r18, r18
    153e:	f9 f0       	breq	.+62     	; 0x157e <TwoWire::write(unsigned char)+0x52>
    1540:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <TwoWire::txBufferLength>
    1544:	20 32       	cpi	r18, 0x20	; 32
    1546:	58 f0       	brcs	.+22     	; 0x155e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1548:	21 e0       	ldi	r18, 0x01	; 1
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	fc 01       	movw	r30, r24
    154e:	33 83       	std	Z+3, r19	; 0x03
    1550:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	0f 90       	pop	r0
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret
    155e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <TwoWire::txBufferIndex>
    1562:	e8 2f       	mov	r30, r24
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	eb 50       	subi	r30, 0x0B	; 11
    1568:	fd 4f       	sbci	r31, 0xFD	; 253
    156a:	99 81       	ldd	r25, Y+1	; 0x01
    156c:	90 83       	st	Z, r25
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <TwoWire::txBufferIndex>
    1574:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <TwoWire::txBufferLength>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	ec cf       	rjmp	.-40     	; 0x1556 <TwoWire::write(unsigned char)+0x2a>
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	ce 01       	movw	r24, r28
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	0e 94 03 0b 	call	0x1606	; 0x1606 <twi_transmit>
    1588:	f7 cf       	rjmp	.-18     	; 0x1578 <TwoWire::write(unsigned char)+0x4c>

0000158a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	7c 01       	movw	r14, r24
    159c:	cb 01       	movw	r24, r22
    159e:	8a 01       	movw	r16, r20
    15a0:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <TwoWire::transmitting>
    15a4:	22 23       	and	r18, r18
    15a6:	89 f0       	breq	.+34     	; 0x15ca <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    15a8:	eb 01       	movw	r28, r22
    15aa:	6b 01       	movw	r12, r22
    15ac:	c4 0e       	add	r12, r20
    15ae:	d5 1e       	adc	r13, r21
    15b0:	cc 15       	cp	r28, r12
    15b2:	dd 05       	cpc	r29, r13
    15b4:	69 f0       	breq	.+26     	; 0x15d0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    15b6:	69 91       	ld	r22, Y+
    15b8:	d7 01       	movw	r26, r14
    15ba:	ed 91       	ld	r30, X+
    15bc:	fc 91       	ld	r31, X
    15be:	01 90       	ld	r0, Z+
    15c0:	f0 81       	ld	r31, Z
    15c2:	e0 2d       	mov	r30, r0
    15c4:	c7 01       	movw	r24, r14
    15c6:	19 95       	eicall
    15c8:	f3 cf       	rjmp	.-26     	; 0x15b0 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    15ca:	64 2f       	mov	r22, r20
    15cc:	0e 94 03 0b 	call	0x1606	; 0x1606 <twi_transmit>
    15d0:	c8 01       	movw	r24, r16
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	08 95       	ret

000015e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15e4:	e6 ee       	ldi	r30, 0xE6	; 230
    15e6:	f2 e0       	ldi	r31, 0x02	; 2
    15e8:	13 82       	std	Z+3, r1	; 0x03
    15ea:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15ec:	88 ee       	ldi	r24, 0xE8	; 232
    15ee:	93 e0       	ldi	r25, 0x03	; 3
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	84 83       	std	Z+4, r24	; 0x04
    15f6:	95 83       	std	Z+5, r25	; 0x05
    15f8:	a6 83       	std	Z+6, r26	; 0x06
    15fa:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:54
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    15fc:	82 e4       	ldi	r24, 0x42	; 66
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:335
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1604:	08 95       	ret

00001606 <twi_transmit>:
twi_transmit():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1606:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <twi_txBufferLength>
    160a:	26 0f       	add	r18, r22
    160c:	33 27       	eor	r19, r19
    160e:	33 1f       	adc	r19, r19
    1610:	21 32       	cpi	r18, 0x21	; 33
    1612:	31 05       	cpc	r19, r1
    1614:	ec f4       	brge	.+58     	; 0x1650 <twi_transmit+0x4a>
    1616:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <twi_state>
    161a:	fc 01       	movw	r30, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	24 30       	cpi	r18, 0x04	; 4
    1622:	69 f0       	breq	.+26     	; 0x163e <twi_transmit+0x38>
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	08 95       	ret
    1628:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <twi_txBufferLength>
    162c:	21 91       	ld	r18, Z+
    162e:	ac 01       	movw	r20, r24
    1630:	45 5a       	subi	r20, 0xA5	; 165
    1632:	5c 4f       	sbci	r21, 0xFC	; 252
    1634:	a4 0f       	add	r26, r20
    1636:	b5 2f       	mov	r27, r21
    1638:	b1 1d       	adc	r27, r1
    163a:	2c 93       	st	X, r18
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	86 17       	cp	r24, r22
    1640:	98 f3       	brcs	.-26     	; 0x1628 <twi_transmit+0x22>
    1642:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_txBufferLength>
    1646:	68 0f       	add	r22, r24
    1648:	60 93 59 03 	sts	0x0359, r22	; 0x800359 <twi_txBufferLength>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	08 95       	ret
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	08 95       	ret

00001654 <twi_stop>:
twi_stop():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:368
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1654:	85 ed       	ldi	r24, 0xD5	; 213
    1656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:372

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    165a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    165e:	84 fd       	sbrc	r24, 4
    1660:	fc cf       	rjmp	.-8      	; 0x165a <twi_stop+0x6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:377
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1662:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:378
}
    1666:	08 95       	ret

00001668 <twi_releaseBus>:
twi_releaseBus():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:389
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1668:	85 ec       	ldi	r24, 0xC5	; 197
    166a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:392

  // update twi state
  twi_state = TWI_READY;
    166e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:393
}
    1672:	08 95       	ret

00001674 <__vector_39>:
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:396

ISR(TWI_vect)
{
    1674:	1f 92       	push	r1
    1676:	0f 92       	push	r0
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	0f 92       	push	r0
    167c:	11 24       	eor	r1, r1
    167e:	0b b6       	in	r0, 0x3b	; 59
    1680:	0f 92       	push	r0
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  switch(TW_STATUS){
    169a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    169e:	88 7f       	andi	r24, 0xF8	; 248
    16a0:	80 36       	cpi	r24, 0x60	; 96
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <__vector_39+0x32>
    16a4:	4e c0       	rjmp	.+156    	; 0x1742 <__vector_39+0xce>
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <__vector_39+0x36>
    16a8:	41 c0       	rjmp	.+130    	; 0x172c <__vector_39+0xb8>
    16aa:	88 32       	cpi	r24, 0x28	; 40
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <__vector_39+0x3c>
    16ae:	aa c0       	rjmp	.+340    	; 0x1804 <__vector_39+0x190>
    16b0:	28 f5       	brcc	.+74     	; 0x16fc <__vector_39+0x88>
    16b2:	80 31       	cpi	r24, 0x10	; 16
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <__vector_39+0x44>
    16b6:	9e c0       	rjmp	.+316    	; 0x17f4 <__vector_39+0x180>
    16b8:	c8 f4       	brcc	.+50     	; 0x16ec <__vector_39+0x78>
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <__vector_39+0x4c>
    16be:	fb c0       	rjmp	.+502    	; 0x18b6 <__vector_39+0x242>
    16c0:	88 30       	cpi	r24, 0x08	; 8
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <__vector_39+0x52>
    16c4:	97 c0       	rjmp	.+302    	; 0x17f4 <__vector_39+0x180>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0b be       	out	0x3b, r0	; 59
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16ec:	88 31       	cpi	r24, 0x18	; 24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <__vector_39+0x7e>
    16f0:	89 c0       	rjmp	.+274    	; 0x1804 <__vector_39+0x190>
    16f2:	80 32       	cpi	r24, 0x20	; 32
    16f4:	41 f7       	brne	.-48     	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:432
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    16f6:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <twi_error>
    16fa:	15 c0       	rjmp	.+42     	; 0x1726 <__vector_39+0xb2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    16fc:	80 34       	cpi	r24, 0x40	; 64
    16fe:	09 f4       	brne	.+2      	; 0x1702 <__vector_39+0x8e>
    1700:	9e c0       	rjmp	.+316    	; 0x183e <__vector_39+0x1ca>
    1702:	48 f4       	brcc	.+18     	; 0x1716 <__vector_39+0xa2>
    1704:	80 33       	cpi	r24, 0x30	; 48
    1706:	b9 f3       	breq	.-18     	; 0x16f6 <__vector_39+0x82>
    1708:	88 33       	cpi	r24, 0x38	; 56
    170a:	e9 f6       	brne	.-70     	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:436
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    170c:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <twi_error>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:437
      twi_releaseBus();
    1710:	0e 94 34 0b 	call	0x1668	; 0x1668 <twi_releaseBus>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:438
      break;
    1714:	d8 cf       	rjmp	.-80     	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1716:	80 35       	cpi	r24, 0x50	; 80
    1718:	09 f4       	brne	.+2      	; 0x171c <__vector_39+0xa8>
    171a:	85 c0       	rjmp	.+266    	; 0x1826 <__vector_39+0x1b2>
    171c:	88 35       	cpi	r24, 0x58	; 88
    171e:	09 f4       	brne	.+2      	; 0x1722 <__vector_39+0xae>
    1720:	96 c0       	rjmp	.+300    	; 0x184e <__vector_39+0x1da>
    1722:	88 34       	cpi	r24, 0x48	; 72
    1724:	81 f6       	brne	.-96     	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:555
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1726:	0e 94 2a 0b 	call	0x1654	; 0x1654 <twi_stop>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
      break;
  }
}
    172a:	cd cf       	rjmp	.-102    	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    172c:	88 39       	cpi	r24, 0x98	; 152
    172e:	09 f4       	brne	.+2      	; 0x1732 <__vector_39+0xbe>
    1730:	8c c0       	rjmp	.+280    	; 0x184a <__vector_39+0x1d6>
    1732:	38 f5       	brcc	.+78     	; 0x1782 <__vector_39+0x10e>
    1734:	88 37       	cpi	r24, 0x78	; 120
    1736:	29 f0       	breq	.+10     	; 0x1742 <__vector_39+0xce>
    1738:	50 f4       	brcc	.+20     	; 0x174e <__vector_39+0xda>
    173a:	88 36       	cpi	r24, 0x68	; 104
    173c:	11 f0       	breq	.+4      	; 0x1742 <__vector_39+0xce>
    173e:	80 37       	cpi	r24, 0x70	; 112
    1740:	11 f6       	brne	.-124    	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:478
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:480
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1748:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <twi_rxBufferIndex>
    174c:	57 c0       	rjmp	.+174    	; 0x17fc <__vector_39+0x188>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    174e:	88 38       	cpi	r24, 0x88	; 136
    1750:	09 f4       	brne	.+2      	; 0x1754 <__vector_39+0xe0>
    1752:	7b c0       	rjmp	.+246    	; 0x184a <__vector_39+0x1d6>
    1754:	80 39       	cpi	r24, 0x90	; 144
    1756:	19 f0       	breq	.+6      	; 0x175e <__vector_39+0xea>
    1758:	80 38       	cpi	r24, 0x80	; 128
    175a:	09 f0       	breq	.+2      	; 0x175e <__vector_39+0xea>
    175c:	b4 cf       	rjmp	.-152    	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:486
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    175e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <twi_rxBufferIndex>
    1762:	80 32       	cpi	r24, 0x20	; 32
    1764:	08 f0       	brcs	.+2      	; 0x1768 <__vector_39+0xf4>
    1766:	71 c0       	rjmp	.+226    	; 0x184a <__vector_39+0x1d6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:488
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1768:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <twi_rxBufferIndex>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	8e 0f       	add	r24, r30
    1770:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <twi_rxBufferIndex>
    1774:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	e7 5c       	subi	r30, 0xC7	; 199
    177c:	fc 4f       	sbci	r31, 0xFC	; 252
    177e:	80 83       	st	Z, r24
    1780:	3d c0       	rjmp	.+122    	; 0x17fc <__vector_39+0x188>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1782:	80 3b       	cpi	r24, 0xB0	; 176
    1784:	39 f0       	breq	.+14     	; 0x1794 <__vector_39+0x120>
    1786:	e0 f4       	brcc	.+56     	; 0x17c0 <__vector_39+0x14c>
    1788:	80 3a       	cpi	r24, 0xA0	; 160
    178a:	09 f4       	brne	.+2      	; 0x178e <__vector_39+0x11a>
    178c:	79 c0       	rjmp	.+242    	; 0x1880 <__vector_39+0x20c>
    178e:	88 3a       	cpi	r24, 0xA8	; 168
    1790:	09 f0       	breq	.+2      	; 0x1794 <__vector_39+0x120>
    1792:	99 cf       	rjmp	.-206    	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:517

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1794:	84 e0       	ldi	r24, 0x04	; 4
    1796:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:519
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    179a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_txBufferIndex>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:521
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    179e:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_txBufferLength>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:524
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    17a2:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <twi_onSlaveTransmit>
    17a6:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <twi_onSlaveTransmit+0x1>
    17aa:	19 95       	eicall
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:526
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    17ac:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_txBufferLength>
    17b0:	81 11       	cpse	r24, r1
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <__vector_39+0x15e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:527
        twi_txBufferLength = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_txBufferLength>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:528
        twi_txBuffer[0] = 0x00;
    17ba:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <twi_txBuffer>
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <__vector_39+0x15e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    17c0:	80 3c       	cpi	r24, 0xC0	; 192
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <__vector_39+0x152>
    17c4:	76 c0       	rjmp	.+236    	; 0x18b2 <__vector_39+0x23e>
    17c6:	88 3c       	cpi	r24, 0xC8	; 200
    17c8:	09 f4       	brne	.+2      	; 0x17cc <__vector_39+0x158>
    17ca:	73 c0       	rjmp	.+230    	; 0x18b2 <__vector_39+0x23e>
    17cc:	88 3b       	cpi	r24, 0xB8	; 184
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <__vector_39+0x15e>
    17d0:	7a cf       	rjmp	.-268    	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:534
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    17d2:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_txBufferIndex>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	8e 0f       	add	r24, r30
    17da:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <twi_txBufferIndex>
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	e5 5a       	subi	r30, 0xA5	; 165
    17e2:	fc 4f       	sbci	r31, 0xFC	; 252
    17e4:	80 81       	ld	r24, Z
    17e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17ea:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <twi_txBufferIndex>
    17ee:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_txBufferLength>
    17f2:	29 c0       	rjmp	.+82     	; 0x1846 <__vector_39+0x1d2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:402
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    17f4:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_slarw>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    17f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17fc:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1802:	61 cf       	rjmp	.-318    	; 0x16c6 <__vector_39+0x52>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:410

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1804:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <twi_masterBufferIndex>
    1808:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_masterBufferLength>
    180c:	98 17       	cp	r25, r24
    180e:	58 f5       	brcc	.+86     	; 0x1866 <__vector_39+0x1f2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1810:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <twi_masterBufferIndex>
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	8e 0f       	add	r24, r30
    1818:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <twi_masterBufferIndex>
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	e3 58       	subi	r30, 0x83	; 131
    1820:	fc 4f       	sbci	r31, 0xFC	; 252
    1822:	80 81       	ld	r24, Z
    1824:	e9 cf       	rjmp	.-46     	; 0x17f8 <__vector_39+0x184>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:443
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1826:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <twi_masterBufferIndex>
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	8e 0f       	add	r24, r30
    182e:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <twi_masterBufferIndex>
    1832:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	e3 58       	subi	r30, 0x83	; 131
    183a:	fc 4f       	sbci	r31, 0xFC	; 252
    183c:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:447
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    183e:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <twi_masterBufferIndex>
    1842:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_masterBufferLength>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1846:	98 17       	cp	r25, r24
    1848:	c8 f2       	brcs	.-78     	; 0x17fc <__vector_39+0x188>
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    184a:	85 e8       	ldi	r24, 0x85	; 133
    184c:	d8 cf       	rjmp	.-80     	; 0x17fe <__vector_39+0x18a>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:455
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    184e:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <twi_masterBufferIndex>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	8e 0f       	add	r24, r30
    1856:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <twi_masterBufferIndex>
    185a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	e3 58       	subi	r30, 0x83	; 131
    1862:	fc 4f       	sbci	r31, 0xFC	; 252
    1864:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:456
  if (twi_sendStop)
    1866:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <twi_sendStop>
    186a:	81 11       	cpse	r24, r1
    186c:	5c cf       	rjmp	.-328    	; 0x1726 <__vector_39+0xb2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:459
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <twi_inRepStart>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:463
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1874:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1876:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:547
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    187a:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:548
      break;
    187e:	23 cf       	rjmp	.-442    	; 0x16c6 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:497
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1880:	0e 94 34 0b 	call	0x1668	; 0x1668 <twi_releaseBus>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:499
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1884:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <twi_rxBufferIndex>
    1888:	80 32       	cpi	r24, 0x20	; 32
    188a:	30 f4       	brcc	.+12     	; 0x1898 <__vector_39+0x224>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:500
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    188c:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <twi_rxBufferIndex>
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	e7 5c       	subi	r30, 0xC7	; 199
    1894:	fc 4f       	sbci	r31, 0xFC	; 252
    1896:	10 82       	st	Z, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:503
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1898:	60 91 38 03 	lds	r22, 0x0338	; 0x800338 <twi_rxBufferIndex>
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <twi_onSlaveReceive>
    18a2:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <twi_onSlaveReceive+0x1>
    18a6:	89 e3       	ldi	r24, 0x39	; 57
    18a8:	93 e0       	ldi	r25, 0x03	; 3
    18aa:	19 95       	eicall
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:505
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    18ac:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <twi_rxBufferIndex>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:506
      break;
    18b0:	0a cf       	rjmp	.-492    	; 0x16c6 <__vector_39+0x52>
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    18b2:	85 ec       	ldi	r24, 0xC5	; 197
    18b4:	e0 cf       	rjmp	.-64     	; 0x1876 <__vector_39+0x202>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:554

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    18b6:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <twi_error>
    18ba:	35 cf       	rjmp	.-406    	; 0x1726 <__vector_39+0xb2>

000018bc <isr()>:
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:308
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    18bc:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    18c0:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    18c4:	30 97       	sbiw	r30, 0x00	; 0
    18c6:	09 f4       	brne	.+2      	; 0x18ca <isr()+0xe>
    18c8:	4d c0       	rjmp	.+154    	; 0x1964 <isr()+0xa8>
    18ca:	a6 85       	ldd	r26, Z+14	; 0x0e
    18cc:	b7 85       	ldd	r27, Z+15	; 0x0f
    18ce:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
    18d0:	96 8d       	ldd	r25, Z+30	; 0x1e
    18d2:	91 ff       	sbrs	r25, 1
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <isr()+0x22>
_ZN14SoftwareSerial11rx_pin_readEv():
    18d6:	9c 91       	ld	r25, X
    18d8:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    18da:	29 f4       	brne	.+10     	; 0x18e6 <isr()+0x2a>
    18dc:	08 95       	ret
_ZN14SoftwareSerial11rx_pin_readEv():
    18de:	9c 91       	ld	r25, X
    18e0:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <isr()+0x2a>
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <isr()+0xa8>
_ZN14SoftwareSerial11setRxIntMskEb():
    18e6:	a3 89       	ldd	r26, Z+19	; 0x13
    18e8:	b4 89       	ldd	r27, Z+20	; 0x14
    18ea:	9c 91       	ld	r25, X
    18ec:	85 89       	ldd	r24, Z+21	; 0x15
    18ee:	80 95       	com	r24
    18f0:	89 23       	and	r24, r25
    18f2:	8c 93       	st	X, r24
_delay_loop_2():
    18f4:	86 89       	ldd	r24, Z+22	; 0x16
    18f6:	97 89       	ldd	r25, Z+23	; 0x17
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <isr()+0x3c>
_ZN14SoftwareSerial4recvEv():
    18fc:	60 8d       	ldd	r22, Z+24	; 0x18
    18fe:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
    1900:	a6 85       	ldd	r26, Z+14	; 0x0e
    1902:	b7 85       	ldd	r27, Z+15	; 0x0f
    1904:	55 85       	ldd	r21, Z+13	; 0x0d
    1906:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
    1908:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
    190a:	cb 01       	movw	r24, r22
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <isr()+0x50>
_ZN14SoftwareSerial4recvEv():
    1910:	82 2f       	mov	r24, r18
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	95 95       	asr	r25
    1916:	87 95       	ror	r24
    1918:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
    191a:	4c 91       	ld	r20, X
    191c:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
    191e:	09 f0       	breq	.+2      	; 0x1922 <isr()+0x66>
    1920:	20 68       	ori	r18, 0x80	; 128
    1922:	31 50       	subi	r19, 0x01	; 1
    1924:	91 f7       	brne	.-28     	; 0x190a <isr()+0x4e>
    1926:	86 8d       	ldd	r24, Z+30	; 0x1e
    1928:	81 fd       	sbrc	r24, 1
    192a:	20 95       	com	r18
    192c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	8f 73       	andi	r24, 0x3F	; 63
    1936:	99 27       	eor	r25, r25
    1938:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    193c:	38 17       	cp	r19, r24
    193e:	99 f0       	breq	.+38     	; 0x1966 <isr()+0xaa>
    1940:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	a9 55       	subi	r26, 0x59	; 89
    1948:	bc 4f       	sbci	r27, 0xFC	; 252
    194a:	2c 93       	st	X, r18
    194c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
    1950:	82 8d       	ldd	r24, Z+26	; 0x1a
    1952:	93 8d       	ldd	r25, Z+27	; 0x1b
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <isr()+0x98>
_ZN14SoftwareSerial11setRxIntMskEb():
    1958:	a3 89       	ldd	r26, Z+19	; 0x13
    195a:	b4 89       	ldd	r27, Z+20	; 0x14
    195c:	8c 91       	ld	r24, X
    195e:	95 89       	ldd	r25, Z+21	; 0x15
    1960:	89 2b       	or	r24, r25
    1962:	8c 93       	st	X, r24
_ZL3isrv():
    1964:	08 95       	ret
_ZN14SoftwareSerial4recvEv():
    1966:	86 8d       	ldd	r24, Z+30	; 0x1e
    1968:	81 60       	ori	r24, 0x01	; 1
    196a:	86 8f       	std	Z+30, r24	; 0x1e
    196c:	f1 cf       	rjmp	.-30     	; 0x1950 <isr()+0x94>

0000196e <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
    196e:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    1972:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1976:	28 17       	cp	r18, r24
    1978:	39 07       	cpc	r19, r25
    197a:	b9 f4       	brne	.+46     	; 0x19aa <SoftwareSerial::read()+0x3c>
    197c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1980:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1984:	98 17       	cp	r25, r24
    1986:	89 f0       	breq	.+34     	; 0x19aa <SoftwareSerial::read()+0x3c>
    1988:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	e9 55       	subi	r30, 0x59	; 89
    1990:	fc 4f       	sbci	r31, 0xFC	; 252
    1992:	80 81       	ld	r24, Z
    1994:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	2f 73       	andi	r18, 0x3F	; 63
    19a0:	33 27       	eor	r19, r19
    19a2:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	08 95       	ret
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
    19ae:	08 95       	ret

000019b0 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	dc 01       	movw	r26, r24
    19be:	5c 96       	adiw	r26, 0x1c	; 28
    19c0:	ed 90       	ld	r14, X+
    19c2:	fc 90       	ld	r15, X
    19c4:	5d 97       	sbiw	r26, 0x1d	; 29
    19c6:	e1 14       	cp	r14, r1
    19c8:	f1 04       	cpc	r15, r1
    19ca:	79 f4       	brne	.+30     	; 0x19ea <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	13 96       	adiw	r26, 0x03	; 3
    19d2:	9c 93       	st	X, r25
    19d4:	8e 93       	st	-X, r24
    19d6:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	08 95       	ret
    19ea:	51 96       	adiw	r26, 0x11	; 17
    19ec:	ed 91       	ld	r30, X+
    19ee:	fc 91       	ld	r31, X
    19f0:	52 97       	sbiw	r26, 0x12	; 18
    19f2:	50 96       	adiw	r26, 0x10	; 16
    19f4:	8c 91       	ld	r24, X
    19f6:	50 97       	sbiw	r26, 0x10	; 16
    19f8:	98 2f       	mov	r25, r24
    19fa:	90 95       	com	r25
    19fc:	0f b7       	in	r16, 0x3f	; 63
    19fe:	5e 96       	adiw	r26, 0x1e	; 30
    1a00:	2c 91       	ld	r18, X
    1a02:	5e 97       	sbiw	r26, 0x1e	; 30
    1a04:	12 2f       	mov	r17, r18
    1a06:	12 70       	andi	r17, 0x02	; 2
    1a08:	21 fd       	sbrc	r18, 1
    1a0a:	60 95       	com	r22
    1a0c:	f8 94       	cli
    1a0e:	20 81       	ld	r18, Z
    1a10:	11 23       	and	r17, r17
    1a12:	19 f1       	breq	.+70     	; 0x1a5a <SoftwareSerial::write(unsigned char)+0xaa>
    1a14:	28 2b       	or	r18, r24
    1a16:	20 83       	st	Z, r18
_delay_loop_2():
    1a18:	e7 01       	movw	r28, r14
    1a1a:	21 97       	sbiw	r28, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <SoftwareSerial::write(unsigned char)+0x6a>
    1a1e:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
    1a20:	46 2f       	mov	r20, r22
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	30 81       	ld	r19, Z
    1a26:	60 ff       	sbrs	r22, 0
    1a28:	1a c0       	rjmp	.+52     	; 0x1a5e <SoftwareSerial::write(unsigned char)+0xae>
    1a2a:	38 2b       	or	r19, r24
    1a2c:	30 83       	st	Z, r19
_delay_loop_2():
    1a2e:	e7 01       	movw	r28, r14
    1a30:	21 97       	sbiw	r28, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
    1a34:	ba 01       	movw	r22, r20
    1a36:	75 95       	asr	r23
    1a38:	67 95       	ror	r22
    1a3a:	21 50       	subi	r18, 0x01	; 1
    1a3c:	89 f7       	brne	.-30     	; 0x1a20 <SoftwareSerial::write(unsigned char)+0x70>
    1a3e:	11 23       	and	r17, r17
    1a40:	81 f0       	breq	.+32     	; 0x1a62 <SoftwareSerial::write(unsigned char)+0xb2>
    1a42:	80 81       	ld	r24, Z
    1a44:	89 23       	and	r24, r25
    1a46:	80 83       	st	Z, r24
    1a48:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
    1a4a:	5c 96       	adiw	r26, 0x1c	; 28
    1a4c:	8d 91       	ld	r24, X+
    1a4e:	9c 91       	ld	r25, X
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	c1 cf       	rjmp	.-126    	; 0x19dc <SoftwareSerial::write(unsigned char)+0x2c>
    1a5a:	29 23       	and	r18, r25
    1a5c:	dc cf       	rjmp	.-72     	; 0x1a16 <SoftwareSerial::write(unsigned char)+0x66>
    1a5e:	39 23       	and	r19, r25
    1a60:	e5 cf       	rjmp	.-54     	; 0x1a2c <SoftwareSerial::write(unsigned char)+0x7c>
    1a62:	90 81       	ld	r25, Z
    1a64:	89 2b       	or	r24, r25
    1a66:	ef cf       	rjmp	.-34     	; 0x1a46 <SoftwareSerial::write(unsigned char)+0x96>

00001a68 <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
    1a68:	08 95       	ret

00001a6a <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
    1a6a:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    1a6e:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	71 f4       	brne	.+28     	; 0x1a94 <SoftwareSerial::peek()+0x2a>
    1a78:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1a7c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1a80:	98 17       	cp	r25, r24
    1a82:	41 f0       	breq	.+16     	; 0x1a94 <SoftwareSerial::peek()+0x2a>
    1a84:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	e9 55       	subi	r30, 0x59	; 89
    1a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8e:	80 81       	ld	r24, Z
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	08 95       	ret
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	9f ef       	ldi	r25, 0xFF	; 255
    1a98:	08 95       	ret

00001a9a <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
    1a9a:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    1a9e:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1aa2:	28 17       	cp	r18, r24
    1aa4:	39 07       	cpc	r19, r25
    1aa6:	61 f4       	brne	.+24     	; 0x1ac0 <SoftwareSerial::available()+0x26>
    1aa8:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1aac:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	80 5c       	subi	r24, 0xC0	; 192
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	82 1b       	sub	r24, r18
    1ab8:	91 09       	sbc	r25, r1
    1aba:	8f 73       	andi	r24, 0x3F	; 63
    1abc:	99 27       	eor	r25, r25
    1abe:	08 95       	ret
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	08 95       	ret

00001ac6 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
    1ac6:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    1aca:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1ace:	e8 17       	cp	r30, r24
    1ad0:	f9 07       	cpc	r31, r25
    1ad2:	69 f4       	brne	.+26     	; 0x1aee <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
    1ad4:	a3 89       	ldd	r26, Z+19	; 0x13
    1ad6:	b4 89       	ldd	r27, Z+20	; 0x14
    1ad8:	9c 91       	ld	r25, X
    1ada:	85 89       	ldd	r24, Z+21	; 0x15
    1adc:	80 95       	com	r24
    1ade:	89 23       	and	r24, r25
    1ae0:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
    1ae2:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1ae6:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <SoftwareSerial::active_object>
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	08 95       	ret
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	08 95       	ret

00001af2 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	ec 01       	movw	r28, r24
    1af8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1afa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1afc:	89 2b       	or	r24, r25
    1afe:	01 f1       	breq	.+64     	; 0x1b40 <SoftwareSerial::listen()+0x4e>
    1b00:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    1b04:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1b08:	8c 17       	cp	r24, r28
    1b0a:	9d 07       	cpc	r25, r29
    1b0c:	c9 f0       	breq	.+50     	; 0x1b40 <SoftwareSerial::listen()+0x4e>
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <SoftwareSerial::listen()+0x24>
    1b12:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <SoftwareSerial::stopListening()>
    1b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b18:	8e 7f       	andi	r24, 0xFE	; 254
    1b1a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b1c:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1b20:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1b24:	d0 93 e8 03 	sts	0x03E8, r29	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1b28:	c0 93 e7 03 	sts	0x03E7, r28	; 0x8003e7 <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
    1b2c:	eb 89       	ldd	r30, Y+19	; 0x13
    1b2e:	fc 89       	ldd	r31, Y+20	; 0x14
    1b30:	80 81       	ld	r24, Z
    1b32:	9d 89       	ldd	r25, Y+21	; 0x15
    1b34:	89 2b       	or	r24, r25
    1b36:	80 83       	st	Z, r24
    1b38:	81 e0       	ldi	r24, 0x01	; 1
_ZN14SoftwareSerial6listenEv():
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	fb cf       	rjmp	.-10     	; 0x1b3a <SoftwareSerial::listen()+0x48>

00001b44 <__vector_10>:
__vector_11():
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	0b b6       	in	r0, 0x3b	; 59
    1b50:	0f 92       	push	r0
    1b52:	2f 93       	push	r18
    1b54:	3f 93       	push	r19
    1b56:	4f 93       	push	r20
    1b58:	5f 93       	push	r21
    1b5a:	6f 93       	push	r22
    1b5c:	7f 93       	push	r23
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	ef 93       	push	r30
    1b68:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
    1b6a:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <SoftwareSerial::active_object>
    1b6e:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <SoftwareSerial::active_object+0x1>
    1b72:	30 97       	sbiw	r30, 0x00	; 0
    1b74:	49 f0       	breq	.+18     	; 0x1b88 <__vector_10+0x44>
    1b76:	a6 85       	ldd	r26, Z+14	; 0x0e
    1b78:	b7 85       	ldd	r27, Z+15	; 0x0f
    1b7a:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
    1b7c:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b7e:	91 ff       	sbrs	r25, 1
    1b80:	16 c0       	rjmp	.+44     	; 0x1bae <__vector_10+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
    1b82:	9c 91       	ld	r25, X
    1b84:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    1b86:	b1 f4       	brne	.+44     	; 0x1bb4 <__vector_10+0x70>
__vector_11():
    1b88:	ff 91       	pop	r31
    1b8a:	ef 91       	pop	r30
    1b8c:	bf 91       	pop	r27
    1b8e:	af 91       	pop	r26
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	7f 91       	pop	r23
    1b96:	6f 91       	pop	r22
    1b98:	5f 91       	pop	r21
    1b9a:	4f 91       	pop	r20
    1b9c:	3f 91       	pop	r19
    1b9e:	2f 91       	pop	r18
    1ba0:	0f 90       	pop	r0
    1ba2:	0b be       	out	0x3b, r0	; 59
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
    1bae:	9c 91       	ld	r25, X
    1bb0:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    1bb2:	51 f7       	brne	.-44     	; 0x1b88 <__vector_10+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
    1bb4:	a3 89       	ldd	r26, Z+19	; 0x13
    1bb6:	b4 89       	ldd	r27, Z+20	; 0x14
    1bb8:	9c 91       	ld	r25, X
    1bba:	85 89       	ldd	r24, Z+21	; 0x15
    1bbc:	80 95       	com	r24
    1bbe:	89 23       	and	r24, r25
    1bc0:	8c 93       	st	X, r24
_delay_loop_2():
    1bc2:	86 89       	ldd	r24, Z+22	; 0x16
    1bc4:	97 89       	ldd	r25, Z+23	; 0x17
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <__vector_10+0x82>
_ZN14SoftwareSerial4recvEv():
    1bca:	60 8d       	ldd	r22, Z+24	; 0x18
    1bcc:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
    1bce:	a6 85       	ldd	r26, Z+14	; 0x0e
    1bd0:	b7 85       	ldd	r27, Z+15	; 0x0f
    1bd2:	55 85       	ldd	r21, Z+13	; 0x0d
    1bd4:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
    1bd8:	cb 01       	movw	r24, r22
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <__vector_10+0x96>
_ZN14SoftwareSerial4recvEv():
    1bde:	82 2f       	mov	r24, r18
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	95 95       	asr	r25
    1be4:	87 95       	ror	r24
    1be6:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
    1be8:	4c 91       	ld	r20, X
    1bea:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <__vector_10+0xac>
    1bee:	20 68       	ori	r18, 0x80	; 128
    1bf0:	31 50       	subi	r19, 0x01	; 1
    1bf2:	91 f7       	brne	.-28     	; 0x1bd8 <__vector_10+0x94>
    1bf4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bf6:	81 fd       	sbrc	r24, 1
    1bf8:	20 95       	com	r18
    1bfa:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	8f 73       	andi	r24, 0x3F	; 63
    1c04:	99 27       	eor	r25, r25
    1c06:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <SoftwareSerial::_receive_buffer_head>
    1c0a:	38 17       	cp	r19, r24
    1c0c:	99 f0       	breq	.+38     	; 0x1c34 <__vector_10+0xf0>
    1c0e:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	a9 55       	subi	r26, 0x59	; 89
    1c16:	bc 4f       	sbci	r27, 0xFC	; 252
    1c18:	2c 93       	st	X, r18
    1c1a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
    1c1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c20:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <__vector_10+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
    1c26:	a3 89       	ldd	r26, Z+19	; 0x13
    1c28:	b4 89       	ldd	r27, Z+20	; 0x14
    1c2a:	8c 91       	ld	r24, X
    1c2c:	95 89       	ldd	r25, Z+21	; 0x15
    1c2e:	89 2b       	or	r24, r25
    1c30:	8c 93       	st	X, r24
__vector_11():
    1c32:	aa cf       	rjmp	.-172    	; 0x1b88 <__vector_10+0x44>
_ZN14SoftwareSerial4recvEv():
    1c34:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c36:	81 60       	ori	r24, 0x01	; 1
    1c38:	86 8f       	std	Z+30, r24	; 0x1e
    1c3a:	f1 cf       	rjmp	.-30     	; 0x1c1e <__vector_10+0xda>

00001c3c <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
    1c3c:	24 e5       	ldi	r18, 0x54	; 84
    1c3e:	32 e0       	ldi	r19, 0x02	; 2
    1c40:	fc 01       	movw	r30, r24
    1c42:	31 83       	std	Z+1, r19	; 0x01
    1c44:	20 83       	st	Z, r18
_ZN14SoftwareSerial3endEv():
    1c46:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <SoftwareSerial::stopListening()>

00001c4a <SoftwareSerial::setTX(signed char)>:
_ZN14SoftwareSerial5setTXEa():
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	16 2f       	mov	r17, r22
    1c54:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c56:	66 95       	lsr	r22
    1c58:	61 70       	andi	r22, 0x01	; 1
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	68 27       	eor	r22, r24
    1c5e:	81 2f       	mov	r24, r17
    1c60:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	81 2f       	mov	r24, r17
    1c68:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
    1c6c:	81 2f       	mov	r24, r17
    1c6e:	11 0f       	add	r17, r17
    1c70:	99 0b       	sbc	r25, r25
    1c72:	fc 01       	movw	r30, r24
    1c74:	e5 5b       	subi	r30, 0xB5	; 181
    1c76:	fd 4f       	sbci	r31, 0xFD	; 253
    1c78:	e4 91       	lpm	r30, Z
    1c7a:	e8 8b       	std	Y+16, r30	; 0x10
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	ef 55       	subi	r30, 0x5F	; 95
    1c80:	fd 4f       	sbci	r31, 0xFD	; 253
    1c82:	e4 91       	lpm	r30, Z
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	ef 5e       	subi	r30, 0xEF	; 239
    1c8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c8e:	85 91       	lpm	r24, Z+
    1c90:	94 91       	lpm	r25, Z
    1c92:	9a 8b       	std	Y+18, r25	; 0x12
    1c94:	89 8b       	std	Y+17, r24	; 0x11
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	08 95       	ret

00001c9e <SoftwareSerial::setRX(signed char)>:
_ZN14SoftwareSerial5setRXEa():
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	ec 01       	movw	r28, r24
    1ca6:	16 2f       	mov	r17, r22
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	81 2f       	mov	r24, r17
    1cac:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
    1cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb2:	81 fd       	sbrc	r24, 1
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <SoftwareSerial::setRX(signed char)+0x20>
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	81 2f       	mov	r24, r17
    1cba:	0e 94 c9 19 	call	0x3392	; 0x3392 <digitalWrite>
    1cbe:	1c 87       	std	Y+12, r17	; 0x0c
    1cc0:	81 2f       	mov	r24, r17
    1cc2:	11 0f       	add	r17, r17
    1cc4:	99 0b       	sbc	r25, r25
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e5 5b       	subi	r30, 0xB5	; 181
    1cca:	fd 4f       	sbci	r31, 0xFD	; 253
    1ccc:	e4 91       	lpm	r30, Z
    1cce:	ed 87       	std	Y+13, r30	; 0x0d
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	ef 55       	subi	r30, 0x5F	; 95
    1cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd6:	e4 91       	lpm	r30, Z
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	e9 50       	subi	r30, 0x09	; 9
    1ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce2:	85 91       	lpm	r24, Z+
    1ce4:	94 91       	lpm	r25, Z
    1ce6:	9f 87       	std	Y+15, r25	; 0x0f
    1ce8:	8e 87       	std	Y+14, r24	; 0x0e
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	08 95       	ret

00001cf2 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>:
_ZN14SoftwareSerialC2Eaab():
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	ec 01       	movw	r28, r24
    1cfa:	16 2f       	mov	r17, r22
_ZN5PrintC4Ev():
    1cfc:	1b 82       	std	Y+3, r1	; 0x03
    1cfe:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
    1d00:	88 ee       	ldi	r24, 0xE8	; 232
    1d02:	93 e0       	ldi	r25, 0x03	; 3
    1d04:	a0 e0       	ldi	r26, 0x00	; 0
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	8c 83       	std	Y+4, r24	; 0x04
    1d0a:	9d 83       	std	Y+5, r25	; 0x05
    1d0c:	ae 83       	std	Y+6, r26	; 0x06
    1d0e:	bf 83       	std	Y+7, r27	; 0x07
_ZN14SoftwareSerialC2Eaab():
    1d10:	84 e5       	ldi	r24, 0x54	; 84
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	99 83       	std	Y+1, r25	; 0x01
    1d16:	88 83       	st	Y, r24
    1d18:	1f 8a       	std	Y+23, r1	; 0x17
    1d1a:	1e 8a       	std	Y+22, r1	; 0x16
    1d1c:	19 8e       	std	Y+25, r1	; 0x19
    1d1e:	18 8e       	std	Y+24, r1	; 0x18
    1d20:	1b 8e       	std	Y+27, r1	; 0x1b
    1d22:	1a 8e       	std	Y+26, r1	; 0x1a
    1d24:	1d 8e       	std	Y+29, r1	; 0x1d
    1d26:	1c 8e       	std	Y+28, r1	; 0x1c
    1d28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d2a:	8e 7f       	andi	r24, 0xFE	; 254
    1d2c:	20 fb       	bst	r18, 0
    1d2e:	81 f9       	bld	r24, 1
    1d30:	8e 8f       	std	Y+30, r24	; 0x1e
    1d32:	64 2f       	mov	r22, r20
    1d34:	ce 01       	movw	r24, r28
    1d36:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <SoftwareSerial::setTX(signed char)>
    1d3a:	61 2f       	mov	r22, r17
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <SoftwareSerial::setRX(signed char)>

00001d48 <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:315
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	ec 01       	movw	r28, r24
    1d62:	9a 01       	movw	r18, r20
    1d64:	ab 01       	movw	r20, r22
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1d66:	1b 8e       	std	Y+27, r1	; 0x1b
    1d68:	1a 8e       	std	Y+26, r1	; 0x1a
    1d6a:	19 8e       	std	Y+25, r1	; 0x19
    1d6c:	18 8e       	std	Y+24, r1	; 0x18
    1d6e:	1f 8a       	std	Y+23, r1	; 0x17
    1d70:	1e 8a       	std	Y+22, r1	; 0x16
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:319

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    1d72:	60 e4       	ldi	r22, 0x40	; 64
    1d74:	72 e4       	ldi	r23, 0x42	; 66
    1d76:	8f e0       	ldi	r24, 0x0F	; 15
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    1d7e:	49 01       	movw	r8, r18
    1d80:	69 01       	movw	r12, r18
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    1d82:	c9 01       	movw	r24, r18
    1d84:	03 97       	sbiw	r24, 0x03	; 3
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1d86:	24 e0       	ldi	r18, 0x04	; 4
    1d88:	82 16       	cp	r8, r18
    1d8a:	91 04       	cpc	r9, r1
    1d8c:	10 f4       	brcc	.+4      	; 0x1d92 <SoftwareSerial::begin(long)+0x4a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    1d92:	9d 8f       	std	Y+29, r25	; 0x1d
    1d94:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    1d96:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d98:	86 ef       	ldi	r24, 0xF6	; 246
    1d9a:	89 0f       	add	r24, r25
    1d9c:	74 01       	movw	r14, r8
    1d9e:	f6 94       	lsr	r15
    1da0:	e7 94       	ror	r14
    1da2:	84 01       	movw	r16, r8
    1da4:	00 0f       	add	r16, r16
    1da6:	11 1f       	adc	r17, r17
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	48 f0       	brcs	.+18     	; 0x1dbe <SoftwareSerial::begin(long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330 (discriminator 1)
    1dac:	2e ec       	ldi	r18, 0xCE	; 206
    1dae:	29 0f       	add	r18, r25
    1db0:	24 30       	cpi	r18, 0x04	; 4
    1db2:	28 f0       	brcs	.+10     	; 0x1dbe <SoftwareSerial::begin(long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330 (discriminator 2)
    1db4:	22 ec       	ldi	r18, 0xC2	; 194
    1db6:	29 0f       	add	r18, r25
    1db8:	28 30       	cpi	r18, 0x08	; 8
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <SoftwareSerial::begin(long)+0x76>
    1dbc:	9b c0       	rjmp	.+310    	; 0x1ef4 <SoftwareSerial::begin(long)+0x1ac>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1dbe:	24 e1       	ldi	r18, 0x14	; 20
    1dc0:	e2 16       	cp	r14, r18
    1dc2:	f1 04       	cpc	r15, r1
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <SoftwareSerial::begin(long)+0x80>
    1dc6:	71 c0       	rjmp	.+226    	; 0x1eaa <SoftwareSerial::begin(long)+0x162>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    1dc8:	97 01       	movw	r18, r14
    1dca:	23 51       	subi	r18, 0x13	; 19
    1dcc:	31 09       	sbc	r19, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1dce:	3f 8b       	std	Y+23, r19	; 0x17
    1dd0:	2e 8b       	std	Y+22, r18	; 0x16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1dd2:	26 e0       	ldi	r18, 0x06	; 6
    1dd4:	c2 16       	cp	r12, r18
    1dd6:	d1 04       	cpc	r13, r1
    1dd8:	08 f4       	brcc	.+2      	; 0x1ddc <SoftwareSerial::begin(long)+0x94>
    1dda:	6a c0       	rjmp	.+212    	; 0x1eb0 <SoftwareSerial::begin(long)+0x168>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    1ddc:	94 01       	movw	r18, r8
    1dde:	25 50       	subi	r18, 0x05	; 5
    1de0:	31 09       	sbc	r19, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1de2:	39 8f       	std	Y+25, r19	; 0x19
    1de4:	28 8f       	std	Y+24, r18	; 0x18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1de6:	08 0d       	add	r16, r8
    1de8:	19 1d       	adc	r17, r9
    1dea:	16 95       	lsr	r17
    1dec:	07 95       	ror	r16
    1dee:	16 95       	lsr	r17
    1df0:	07 95       	ror	r16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1df2:	0d 30       	cpi	r16, 0x0D	; 13
    1df4:	11 05       	cpc	r17, r1
    1df6:	08 f4       	brcc	.+2      	; 0x1dfa <SoftwareSerial::begin(long)+0xb2>
    1df8:	5e c0       	rjmp	.+188    	; 0x1eb6 <SoftwareSerial::begin(long)+0x16e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    1dfa:	0c 50       	subi	r16, 0x0C	; 12
    1dfc:	11 09       	sbc	r17, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1dfe:	1b 8f       	std	Y+27, r17	; 0x1b
    1e00:	0a 8f       	std	Y+26, r16	; 0x1a
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	50 f0       	brcs	.+20     	; 0x1e1a <SoftwareSerial::begin(long)+0xd2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 2)
    1e06:	2e ec       	ldi	r18, 0xCE	; 206
    1e08:	29 0f       	add	r18, r25
    1e0a:	24 30       	cpi	r18, 0x04	; 4
    1e0c:	30 f0       	brcs	.+12     	; 0x1e1a <SoftwareSerial::begin(long)+0xd2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 4)
    1e0e:	22 ec       	ldi	r18, 0xC2	; 194
    1e10:	29 0f       	add	r18, r25
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	e0 e0       	ldi	r30, 0x00	; 0
    1e16:	28 30       	cpi	r18, 0x08	; 8
    1e18:	10 f4       	brcc	.+4      	; 0x1e1e <SoftwareSerial::begin(long)+0xd6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    1e1a:	e8 e6       	ldi	r30, 0x68	; 104
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 8)
    1e1e:	20 81       	ld	r18, Z
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	28 f0       	brcs	.+10     	; 0x1e2e <SoftwareSerial::begin(long)+0xe6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 9)
    1e24:	32 ec       	ldi	r19, 0xC2	; 194
    1e26:	39 0f       	add	r19, r25
    1e28:	38 30       	cpi	r19, 0x08	; 8
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <SoftwareSerial::begin(long)+0xe6>
    1e2c:	47 c0       	rjmp	.+142    	; 0x1ebc <SoftwareSerial::begin(long)+0x174>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    1e2e:	31 e0       	ldi	r19, 0x01	; 1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 18)
    1e30:	23 2b       	or	r18, r19
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	48 f0       	brcs	.+18     	; 0x1e48 <SoftwareSerial::begin(long)+0x100>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 20)
    1e36:	8e ec       	ldi	r24, 0xCE	; 206
    1e38:	89 0f       	add	r24, r25
    1e3a:	84 30       	cpi	r24, 0x04	; 4
    1e3c:	28 f0       	brcs	.+10     	; 0x1e48 <SoftwareSerial::begin(long)+0x100>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 22)
    1e3e:	9e 53       	subi	r25, 0x3E	; 62
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	e0 e0       	ldi	r30, 0x00	; 0
    1e44:	98 30       	cpi	r25, 0x08	; 8
    1e46:	10 f4       	brcc	.+4      	; 0x1e4c <SoftwareSerial::begin(long)+0x104>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    1e48:	e8 e6       	ldi	r30, 0x68	; 104
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 26)
    1e4c:	20 83       	st	Z, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 26)
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1e4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e50:	96 ef       	ldi	r25, 0xF6	; 246
    1e52:	98 0f       	add	r25, r24
    1e54:	94 30       	cpi	r25, 0x04	; 4
    1e56:	a0 f1       	brcs	.+104    	; 0x1ec0 <SoftwareSerial::begin(long)+0x178>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 1)
    1e58:	2e ec       	ldi	r18, 0xCE	; 206
    1e5a:	28 0f       	add	r18, r24
    1e5c:	24 30       	cpi	r18, 0x04	; 4
    1e5e:	80 f1       	brcs	.+96     	; 0x1ec0 <SoftwareSerial::begin(long)+0x178>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 3)
    1e60:	22 ec       	ldi	r18, 0xC2	; 194
    1e62:	28 0f       	add	r18, r24
    1e64:	28 30       	cpi	r18, 0x08	; 8
    1e66:	78 f5       	brcc	.+94     	; 0x1ec6 <SoftwareSerial::begin(long)+0x17e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    1e68:	2d e6       	ldi	r18, 0x6D	; 109
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 10)
    1e6c:	3c 8b       	std	Y+20, r19	; 0x14
    1e6e:	2b 8b       	std	Y+19, r18	; 0x13
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 10)
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1e70:	94 30       	cpi	r25, 0x04	; 4
    1e72:	60 f5       	brcc	.+88     	; 0x1ecc <SoftwareSerial::begin(long)+0x184>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 1)
    1e74:	9a ef       	ldi	r25, 0xFA	; 250
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 10)
    1e76:	98 0f       	add	r25, r24
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <SoftwareSerial::begin(long)+0x136>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	9a 95       	dec	r25
    1e80:	ea f7       	brpl	.-6      	; 0x1e7c <SoftwareSerial::begin(long)+0x134>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 24)
    1e82:	8d 8b       	std	Y+21, r24	; 0x15
_delay_loop_2():
c:\users\dh\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1e84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <SoftwareSerial::begin(long)+0x140>
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:434
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1e8c:	ce 01       	movw	r24, r28
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:435
}
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	bf 90       	pop	r11
    1ea0:	af 90       	pop	r10
    1ea2:	9f 90       	pop	r9
    1ea4:	8f 90       	pop	r8
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:434
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1ea6:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <SoftwareSerial::listen()>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1eaa:	21 e0       	ldi	r18, 0x01	; 1
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	8f cf       	rjmp	.-226    	; 0x1dce <SoftwareSerial::begin(long)+0x86>
    1eb0:	21 e0       	ldi	r18, 0x01	; 1
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	96 cf       	rjmp	.-212    	; 0x1de2 <SoftwareSerial::begin(long)+0x9a>
    1eb6:	01 e0       	ldi	r16, 0x01	; 1
    1eb8:	10 e0       	ldi	r17, 0x00	; 0
    1eba:	a1 cf       	rjmp	.-190    	; 0x1dfe <SoftwareSerial::begin(long)+0xb6>
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1ebc:	34 e0       	ldi	r19, 0x04	; 4
    1ebe:	b8 cf       	rjmp	.-144    	; 0x1e30 <SoftwareSerial::begin(long)+0xe8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1ec0:	2b e6       	ldi	r18, 0x6B	; 107
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	d3 cf       	rjmp	.-90     	; 0x1e6c <SoftwareSerial::begin(long)+0x124>
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	d0 cf       	rjmp	.-96     	; 0x1e6c <SoftwareSerial::begin(long)+0x124>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 2)
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1ecc:	82 33       	cpi	r24, 0x32	; 50
    1ece:	51 f0       	breq	.+20     	; 0x1ee4 <SoftwareSerial::begin(long)+0x19c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 4)
    1ed0:	83 33       	cpi	r24, 0x33	; 51
    1ed2:	51 f0       	breq	.+20     	; 0x1ee8 <SoftwareSerial::begin(long)+0x1a0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 6)
    1ed4:	84 33       	cpi	r24, 0x34	; 52
    1ed6:	51 f0       	breq	.+20     	; 0x1eec <SoftwareSerial::begin(long)+0x1a4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 8)
    1ed8:	92 ec       	ldi	r25, 0xC2	; 194
    1eda:	98 0f       	add	r25, r24
    1edc:	98 30       	cpi	r25, 0x08	; 8
    1ede:	40 f4       	brcc	.+16     	; 0x1ef0 <SoftwareSerial::begin(long)+0x1a8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 10)
    1ee0:	92 ec       	ldi	r25, 0xC2	; 194
    1ee2:	c9 cf       	rjmp	.-110    	; 0x1e76 <SoftwareSerial::begin(long)+0x12e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    1ee4:	88 e0       	ldi	r24, 0x08	; 8
    1ee6:	cd cf       	rjmp	.-102    	; 0x1e82 <SoftwareSerial::begin(long)+0x13a>
    1ee8:	84 e0       	ldi	r24, 0x04	; 4
    1eea:	cb cf       	rjmp	.-106    	; 0x1e82 <SoftwareSerial::begin(long)+0x13a>
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	c9 cf       	rjmp	.-110    	; 0x1e82 <SoftwareSerial::begin(long)+0x13a>
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	c7 cf       	rjmp	.-114    	; 0x1e82 <SoftwareSerial::begin(long)+0x13a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387
  else
#endif
#if defined(INT_ONLY) || defined(INT_AND_PCINT)
  {
     // Direct interrupts
     attachInterrupt(digitalPinToInterrupt(_receivePin), isr, CHANGE);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	92 30       	cpi	r25, 0x02	; 2
    1ef8:	49 f0       	breq	.+18     	; 0x1f0c <SoftwareSerial::begin(long)+0x1c4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 1)
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	93 30       	cpi	r25, 0x03	; 3
    1efe:	31 f0       	breq	.+12     	; 0x1f0c <SoftwareSerial::begin(long)+0x1c4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 3)
    1f00:	8e ee       	ldi	r24, 0xEE	; 238
    1f02:	89 0f       	add	r24, r25
    1f04:	84 30       	cpi	r24, 0x04	; 4
    1f06:	40 f5       	brcc	.+80     	; 0x1f58 <SoftwareSerial::begin(long)+0x210>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 5)
    1f08:	87 e1       	ldi	r24, 0x17	; 23
    1f0a:	89 1b       	sub	r24, r25
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 12)
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	6e e5       	ldi	r22, 0x5E	; 94
    1f12:	7c e0       	ldi	r23, 0x0C	; 12
    1f14:	0e 94 22 16 	call	0x2c44	; 0x2c44 <attachInterrupt>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304 (discriminator 12)
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1f18:	84 e1       	ldi	r24, 0x14	; 20
    1f1a:	e8 16       	cp	r14, r24
    1f1c:	f1 04       	cpc	r15, r1
    1f1e:	f0 f0       	brcs	.+60     	; 0x1f5c <SoftwareSerial::begin(long)+0x214>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    1f20:	c7 01       	movw	r24, r14
    1f22:	43 97       	sbiw	r24, 0x13	; 19
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:403
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1f24:	9f 8b       	std	Y+23, r25	; 0x17
    1f26:	8e 8b       	std	Y+22, r24	; 0x16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    1f28:	c4 01       	movw	r24, r8
    1f2a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1f2c:	26 e0       	ldi	r18, 0x06	; 6
    1f2e:	c2 16       	cp	r12, r18
    1f30:	d1 04       	cpc	r13, r1
    1f32:	10 f4       	brcc	.+4      	; 0x1f38 <SoftwareSerial::begin(long)+0x1f0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:406
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1f38:	99 8f       	std	Y+25, r25	; 0x19
    1f3a:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:415
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1f3c:	08 0d       	add	r16, r8
    1f3e:	19 1d       	adc	r17, r9
    1f40:	16 95       	lsr	r17
    1f42:	07 95       	ror	r16
    1f44:	16 95       	lsr	r17
    1f46:	07 95       	ror	r16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1f48:	0d 30       	cpi	r16, 0x0D	; 13
    1f4a:	11 05       	cpc	r17, r1
    1f4c:	50 f0       	brcs	.+20     	; 0x1f62 <SoftwareSerial::begin(long)+0x21a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    1f4e:	0c 50       	subi	r16, 0x0C	; 12
    1f50:	11 09       	sbc	r17, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:415
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1f52:	1b 8f       	std	Y+27, r17	; 0x1b
    1f54:	0a 8f       	std	Y+26, r16	; 0x1a
    1f56:	96 cf       	rjmp	.-212    	; 0x1e84 <SoftwareSerial::begin(long)+0x13c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387
  else
#endif
#if defined(INT_ONLY) || defined(INT_AND_PCINT)
  {
     // Direct interrupts
     attachInterrupt(digitalPinToInterrupt(_receivePin), isr, CHANGE);
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	d8 cf       	rjmp	.-80     	; 0x1f0c <SoftwareSerial::begin(long)+0x1c4>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	e1 cf       	rjmp	.-62     	; 0x1f24 <SoftwareSerial::begin(long)+0x1dc>
    1f62:	01 e0       	ldi	r16, 0x01	; 1
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	f5 cf       	rjmp	.-22     	; 0x1f52 <SoftwareSerial::begin(long)+0x20a>

00001f68 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
#endif
  *_ucsrc = config;
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
  *_ucsrb &= ~_BV(UDRIE0);
}
    1f68:	fc 01       	movw	r30, r24
    1f6a:	91 8d       	ldd	r25, Z+25	; 0x19
    1f6c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f6e:	89 2f       	mov	r24, r25
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	80 5c       	subi	r24, 0xC0	; 192
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	82 1b       	sub	r24, r18
    1f78:	91 09       	sbc	r25, r1
    1f7a:	8f 73       	andi	r24, 0x3F	; 63
    1f7c:	99 27       	eor	r25, r25
    1f7e:	08 95       	ret

00001f80 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
    1f80:	fc 01       	movw	r30, r24
    1f82:	91 8d       	ldd	r25, Z+25	; 0x19
    1f84:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f86:	98 17       	cp	r25, r24
    1f88:	31 f0       	breq	.+12     	; 0x1f96 <HardwareSerial::peek()+0x16>
    1f8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f8c:	e8 0f       	add	r30, r24
    1f8e:	f1 1d       	adc	r31, r1
    1f90:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	08 95       	ret
    1f96:	8f ef       	ldi	r24, 0xFF	; 255
    1f98:	9f ef       	ldi	r25, 0xFF	; 255
    1f9a:	08 95       	ret

00001f9c <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	91 8d       	ldd	r25, Z+25	; 0x19
    1fa0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fa2:	98 17       	cp	r25, r24
    1fa4:	61 f0       	breq	.+24     	; 0x1fbe <HardwareSerial::read()+0x22>
    1fa6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fa8:	ae 0f       	add	r26, r30
    1faa:	bf 2f       	mov	r27, r31
    1fac:	b1 1d       	adc	r27, r1
    1fae:	5d 96       	adiw	r26, 0x1d	; 29
    1fb0:	8c 91       	ld	r24, X
    1fb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fb4:	9f 5f       	subi	r25, 0xFF	; 255
    1fb6:	9f 73       	andi	r25, 0x3F	; 63
    1fb8:	92 8f       	std	Z+26, r25	; 0x1a
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	08 95       	ret
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	08 95       	ret

00001fc4 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	53 8d       	ldd	r21, Z+27	; 0x1b
    1fc8:	44 8d       	ldd	r20, Z+28	; 0x1c
    1fca:	25 2f       	mov	r18, r21
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	84 2f       	mov	r24, r20
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	82 1b       	sub	r24, r18
    1fd4:	93 0b       	sbc	r25, r19
    1fd6:	54 17       	cp	r21, r20
    1fd8:	10 f0       	brcs	.+4      	; 0x1fde <HardwareSerial::availableForWrite()+0x1a>
    1fda:	cf 96       	adiw	r24, 0x3f	; 63
    1fdc:	08 95       	ret
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	08 95       	ret

00001fe2 <serialEventRun()>:
_Z14serialEventRunv():
    1fe2:	81 e2       	ldi	r24, 0x21	; 33
    1fe4:	91 e1       	ldi	r25, 0x11	; 17
    1fe6:	89 2b       	or	r24, r25
    1fe8:	49 f0       	breq	.+18     	; 0x1ffc <serialEventRun()+0x1a>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	89 2b       	or	r24, r25
    1ff0:	29 f0       	breq	.+10     	; 0x1ffc <serialEventRun()+0x1a>
    1ff2:	0e 94 21 11 	call	0x2242	; 0x2242 <Serial0_available()>
    1ff6:	81 11       	cpse	r24, r1
    1ff8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ffc:	88 eb       	ldi	r24, 0xB8	; 184
    1ffe:	91 e1       	ldi	r25, 0x11	; 17
    2000:	89 2b       	or	r24, r25
    2002:	49 f0       	breq	.+18     	; 0x2016 <serialEventRun()+0x34>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	89 2b       	or	r24, r25
    200a:	29 f0       	breq	.+10     	; 0x2016 <serialEventRun()+0x34>
    200c:	0e 94 b8 11 	call	0x2370	; 0x2370 <Serial1_available()>
    2010:	81 11       	cpse	r24, r1
    2012:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	89 2b       	or	r24, r25
    201c:	49 f0       	breq	.+18     	; 0x2030 <serialEventRun()+0x4e>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	89 2b       	or	r24, r25
    2024:	29 f0       	breq	.+10     	; 0x2030 <serialEventRun()+0x4e>
    2026:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    202a:	81 11       	cpse	r24, r1
    202c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	89 2b       	or	r24, r25
    2036:	49 f0       	breq	.+18     	; 0x204a <serialEventRun()+0x68>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	89 2b       	or	r24, r25
    203e:	29 f0       	breq	.+10     	; 0x204a <serialEventRun()+0x68>
    2040:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2044:	81 11       	cpse	r24, r1
    2046:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    204a:	08 95       	ret

0000204c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
    204c:	fc 01       	movw	r30, r24
    204e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2050:	a8 0f       	add	r26, r24
    2052:	b9 2f       	mov	r27, r25
    2054:	b1 1d       	adc	r27, r1
    2056:	a3 5a       	subi	r26, 0xA3	; 163
    2058:	bf 4f       	sbci	r27, 0xFF	; 255
    205a:	2c 91       	ld	r18, X
    205c:	84 8d       	ldd	r24, Z+28	; 0x1c
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	8f 73       	andi	r24, 0x3F	; 63
    2064:	99 27       	eor	r25, r25
    2066:	84 8f       	std	Z+28, r24	; 0x1c
    2068:	a6 89       	ldd	r26, Z+22	; 0x16
    206a:	b7 89       	ldd	r27, Z+23	; 0x17
    206c:	2c 93       	st	X, r18
    206e:	a0 89       	ldd	r26, Z+16	; 0x10
    2070:	b1 89       	ldd	r27, Z+17	; 0x11
    2072:	8c 91       	ld	r24, X
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	8c 93       	st	X, r24
    2078:	93 8d       	ldd	r25, Z+27	; 0x1b
    207a:	84 8d       	ldd	r24, Z+28	; 0x1c
    207c:	98 13       	cpse	r25, r24
    207e:	06 c0       	rjmp	.+12     	; 0x208c <HardwareSerial::_tx_udr_empty_irq()+0x40>
    2080:	02 88       	ldd	r0, Z+18	; 0x12
    2082:	f3 89       	ldd	r31, Z+19	; 0x13
    2084:	e0 2d       	mov	r30, r0
    2086:	80 81       	ld	r24, Z
    2088:	8f 7d       	andi	r24, 0xDF	; 223
    208a:	80 83       	st	Z, r24
    208c:	08 95       	ret

0000208e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	ec 01       	movw	r28, r24
    2094:	88 8d       	ldd	r24, Y+24	; 0x18
    2096:	88 23       	and	r24, r24
    2098:	b9 f0       	breq	.+46     	; 0x20c8 <HardwareSerial::flush()+0x3a>
    209a:	aa 89       	ldd	r26, Y+18	; 0x12
    209c:	bb 89       	ldd	r27, Y+19	; 0x13
    209e:	e8 89       	ldd	r30, Y+16	; 0x10
    20a0:	f9 89       	ldd	r31, Y+17	; 0x11
    20a2:	8c 91       	ld	r24, X
    20a4:	85 fd       	sbrc	r24, 5
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <HardwareSerial::flush()+0x20>
    20a8:	80 81       	ld	r24, Z
    20aa:	86 fd       	sbrc	r24, 6
    20ac:	0d c0       	rjmp	.+26     	; 0x20c8 <HardwareSerial::flush()+0x3a>
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	07 fc       	sbrc	r0, 7
    20b2:	f7 cf       	rjmp	.-18     	; 0x20a2 <HardwareSerial::flush()+0x14>
    20b4:	8c 91       	ld	r24, X
    20b6:	85 ff       	sbrs	r24, 5
    20b8:	f2 cf       	rjmp	.-28     	; 0x209e <HardwareSerial::flush()+0x10>
    20ba:	80 81       	ld	r24, Z
    20bc:	85 ff       	sbrs	r24, 5
    20be:	ed cf       	rjmp	.-38     	; 0x209a <HardwareSerial::flush()+0xc>
    20c0:	ce 01       	movw	r24, r28
    20c2:	0e 94 26 10 	call	0x204c	; 0x204c <HardwareSerial::_tx_udr_empty_irq()>
    20c6:	e9 cf       	rjmp	.-46     	; 0x209a <HardwareSerial::flush()+0xc>
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	08 95       	ret

000020ce <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	88 8f       	std	Y+24, r24	; 0x18
    20e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20e4:	98 13       	cpse	r25, r24
    20e6:	16 c0       	rjmp	.+44     	; 0x2114 <HardwareSerial::write(unsigned char)+0x46>
    20e8:	e8 89       	ldd	r30, Y+16	; 0x10
    20ea:	f9 89       	ldd	r31, Y+17	; 0x11
    20ec:	80 81       	ld	r24, Z
    20ee:	85 ff       	sbrs	r24, 5
    20f0:	11 c0       	rjmp	.+34     	; 0x2114 <HardwareSerial::write(unsigned char)+0x46>
    20f2:	ee 89       	ldd	r30, Y+22	; 0x16
    20f4:	ff 89       	ldd	r31, Y+23	; 0x17
    20f6:	60 83       	st	Z, r22
    20f8:	e8 89       	ldd	r30, Y+16	; 0x10
    20fa:	f9 89       	ldd	r31, Y+17	; 0x11
    20fc:	80 81       	ld	r24, Z
    20fe:	80 64       	ori	r24, 0x40	; 64
    2100:	80 83       	st	Z, r24
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	08 95       	ret
    2114:	f6 2e       	mov	r15, r22
    2116:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2118:	10 e0       	ldi	r17, 0x00	; 0
    211a:	0f 5f       	subi	r16, 0xFF	; 255
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	0f 73       	andi	r16, 0x3F	; 63
    2120:	11 27       	eor	r17, r17
    2122:	e0 2e       	mov	r14, r16
    2124:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2126:	8e 11       	cpse	r24, r14
    2128:	0c c0       	rjmp	.+24     	; 0x2142 <HardwareSerial::write(unsigned char)+0x74>
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	07 fc       	sbrc	r0, 7
    212e:	fa cf       	rjmp	.-12     	; 0x2124 <HardwareSerial::write(unsigned char)+0x56>
    2130:	e8 89       	ldd	r30, Y+16	; 0x10
    2132:	f9 89       	ldd	r31, Y+17	; 0x11
    2134:	80 81       	ld	r24, Z
    2136:	85 ff       	sbrs	r24, 5
    2138:	f5 cf       	rjmp	.-22     	; 0x2124 <HardwareSerial::write(unsigned char)+0x56>
    213a:	ce 01       	movw	r24, r28
    213c:	0e 94 26 10 	call	0x204c	; 0x204c <HardwareSerial::_tx_udr_empty_irq()>
    2140:	f1 cf       	rjmp	.-30     	; 0x2124 <HardwareSerial::write(unsigned char)+0x56>
    2142:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2144:	ec 0f       	add	r30, r28
    2146:	fd 2f       	mov	r31, r29
    2148:	f1 1d       	adc	r31, r1
    214a:	e3 5a       	subi	r30, 0xA3	; 163
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	f0 82       	st	Z, r15
    2150:	0b 8f       	std	Y+27, r16	; 0x1b
    2152:	ea 89       	ldd	r30, Y+18	; 0x12
    2154:	fb 89       	ldd	r31, Y+19	; 0x13
    2156:	80 81       	ld	r24, Z
    2158:	80 62       	ori	r24, 0x20	; 32
    215a:	d2 cf       	rjmp	.-92     	; 0x2100 <HardwareSerial::write(unsigned char)+0x32>

0000215c <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	ec 01       	movw	r28, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    2162:	e8 81       	ld	r30, Y
    2164:	f9 81       	ldd	r31, Y+1	; 0x01
    2166:	06 80       	ldd	r0, Z+6	; 0x06
    2168:	f7 81       	ldd	r31, Z+7	; 0x07
    216a:	e0 2d       	mov	r30, r0
    216c:	19 95       	eicall
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    216e:	ea 89       	ldd	r30, Y+18	; 0x12
    2170:	fb 89       	ldd	r31, Y+19	; 0x13
    2172:	80 81       	ld	r24, Z
    2174:	87 74       	andi	r24, 0x47	; 71
    2176:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    2178:	8a 8d       	ldd	r24, Y+26	; 0x1a
    217a:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <__vector_25>:
__vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2182:	1f 92       	push	r1
    2184:	0f 92       	push	r0
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	0f 92       	push	r0
    218a:	11 24       	eor	r1, r1
    218c:	0b b6       	in	r0, 0x3b	; 59
    218e:	0f 92       	push	r0
    2190:	2f 93       	push	r18
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    219a:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <Serial+0x10>
    219e:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <Serial+0x11>
    21a2:	80 81       	ld	r24, Z
    21a4:	e0 91 ff 03 	lds	r30, 0x03FF	; 0x8003ff <Serial+0x16>
    21a8:	f0 91 00 04 	lds	r31, 0x0400	; 0x800400 <Serial+0x17>
    21ac:	82 fd       	sbrc	r24, 2
    21ae:	1d c0       	rjmp	.+58     	; 0x21ea <__vector_25+0x68>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    21b0:	90 81       	ld	r25, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    21b2:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <Serial+0x19>
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    21ba:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <Serial+0x1a>
    21be:	82 17       	cp	r24, r18
    21c0:	41 f0       	breq	.+16     	; 0x21d2 <__vector_25+0x50>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    21c2:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <Serial+0x19>
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	e7 51       	subi	r30, 0x17	; 23
    21ca:	fc 4f       	sbci	r31, 0xFC	; 252
    21cc:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    21ce:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <Serial+0x19>
__vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    21d2:	ff 91       	pop	r31
    21d4:	ef 91       	pop	r30
    21d6:	9f 91       	pop	r25
    21d8:	8f 91       	pop	r24
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0b be       	out	0x3b, r0	; 59
    21e0:	0f 90       	pop	r0
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	0f 90       	pop	r0
    21e6:	1f 90       	pop	r1
    21e8:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    21ea:	80 81       	ld	r24, Z
__vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    21ec:	f2 cf       	rjmp	.-28     	; 0x21d2 <__vector_25+0x50>

000021ee <__vector_26>:
__vector_26():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    21ee:	1f 92       	push	r1
    21f0:	0f 92       	push	r0
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	0f 92       	push	r0
    21f6:	11 24       	eor	r1, r1
    21f8:	0b b6       	in	r0, 0x3b	; 59
    21fa:	0f 92       	push	r0
    21fc:	2f 93       	push	r18
    21fe:	3f 93       	push	r19
    2200:	4f 93       	push	r20
    2202:	5f 93       	push	r21
    2204:	6f 93       	push	r22
    2206:	7f 93       	push	r23
    2208:	8f 93       	push	r24
    220a:	9f 93       	push	r25
    220c:	af 93       	push	r26
    220e:	bf 93       	push	r27
    2210:	ef 93       	push	r30
    2212:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2214:	89 ee       	ldi	r24, 0xE9	; 233
    2216:	93 e0       	ldi	r25, 0x03	; 3
    2218:	0e 94 26 10 	call	0x204c	; 0x204c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    221c:	ff 91       	pop	r31
    221e:	ef 91       	pop	r30
    2220:	bf 91       	pop	r27
    2222:	af 91       	pop	r26
    2224:	9f 91       	pop	r25
    2226:	8f 91       	pop	r24
    2228:	7f 91       	pop	r23
    222a:	6f 91       	pop	r22
    222c:	5f 91       	pop	r21
    222e:	4f 91       	pop	r20
    2230:	3f 91       	pop	r19
    2232:	2f 91       	pop	r18
    2234:	0f 90       	pop	r0
    2236:	0b be       	out	0x3b, r0	; 59
    2238:	0f 90       	pop	r0
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	0f 90       	pop	r0
    223e:	1f 90       	pop	r1
    2240:	18 95       	reti

00002242 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2242:	89 ee       	ldi	r24, 0xE9	; 233
    2244:	93 e0       	ldi	r25, 0x03	; 3
    2246:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <HardwareSerial::available()>
    224a:	21 e0       	ldi	r18, 0x01	; 1
    224c:	89 2b       	or	r24, r25
    224e:	09 f4       	brne	.+2      	; 0x2252 <Serial0_available()+0x10>
    2250:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2252:	82 2f       	mov	r24, r18
    2254:	08 95       	ret

00002256 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    2256:	e9 ee       	ldi	r30, 0xE9	; 233
    2258:	f3 e0       	ldi	r31, 0x03	; 3
    225a:	13 82       	std	Z+3, r1	; 0x03
    225c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    225e:	88 ee       	ldi	r24, 0xE8	; 232
    2260:	93 e0       	ldi	r25, 0x03	; 3
    2262:	a0 e0       	ldi	r26, 0x00	; 0
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	84 83       	std	Z+4, r24	; 0x04
    2268:	95 83       	std	Z+5, r25	; 0x05
    226a:	a6 83       	std	Z+6, r26	; 0x06
    226c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    226e:	86 e6       	ldi	r24, 0x66	; 102
    2270:	92 e0       	ldi	r25, 0x02	; 2
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	85 ec       	ldi	r24, 0xC5	; 197
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	95 87       	std	Z+13, r25	; 0x0d
    227c:	84 87       	std	Z+12, r24	; 0x0c
    227e:	84 ec       	ldi	r24, 0xC4	; 196
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	97 87       	std	Z+15, r25	; 0x0f
    2284:	86 87       	std	Z+14, r24	; 0x0e
    2286:	80 ec       	ldi	r24, 0xC0	; 192
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	91 8b       	std	Z+17, r25	; 0x11
    228c:	80 8b       	std	Z+16, r24	; 0x10
    228e:	81 ec       	ldi	r24, 0xC1	; 193
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	93 8b       	std	Z+19, r25	; 0x13
    2294:	82 8b       	std	Z+18, r24	; 0x12
    2296:	82 ec       	ldi	r24, 0xC2	; 194
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	95 8b       	std	Z+21, r25	; 0x15
    229c:	84 8b       	std	Z+20, r24	; 0x14
    229e:	86 ec       	ldi	r24, 0xC6	; 198
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	97 8b       	std	Z+23, r25	; 0x17
    22a4:	86 8b       	std	Z+22, r24	; 0x16
    22a6:	11 8e       	std	Z+25, r1	; 0x19
    22a8:	12 8e       	std	Z+26, r1	; 0x1a
    22aa:	13 8e       	std	Z+27, r1	; 0x1b
    22ac:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    22ae:	08 95       	ret

000022b0 <__vector_36>:
__vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    22b0:	1f 92       	push	r1
    22b2:	0f 92       	push	r0
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	0f 92       	push	r0
    22b8:	11 24       	eor	r1, r1
    22ba:	0b b6       	in	r0, 0x3b	; 59
    22bc:	0f 92       	push	r0
    22be:	2f 93       	push	r18
    22c0:	8f 93       	push	r24
    22c2:	9f 93       	push	r25
    22c4:	ef 93       	push	r30
    22c6:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    22c8:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <Serial1+0x10>
    22cc:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <Serial1+0x11>
    22d0:	80 81       	ld	r24, Z
    22d2:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <Serial1+0x16>
    22d6:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <Serial1+0x17>
    22da:	82 fd       	sbrc	r24, 2
    22dc:	1d c0       	rjmp	.+58     	; 0x2318 <__vector_36+0x68>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    22de:	90 81       	ld	r25, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    22e0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <Serial1+0x19>
    22e4:	8f 5f       	subi	r24, 0xFF	; 255
    22e6:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    22e8:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Serial1+0x1a>
    22ec:	82 17       	cp	r24, r18
    22ee:	41 f0       	breq	.+16     	; 0x2300 <__vector_36+0x50>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    22f0:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <Serial1+0x19>
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	ea 57       	subi	r30, 0x7A	; 122
    22f8:	fb 4f       	sbci	r31, 0xFB	; 251
    22fa:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    22fc:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <Serial1+0x19>
__vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    2300:	ff 91       	pop	r31
    2302:	ef 91       	pop	r30
    2304:	9f 91       	pop	r25
    2306:	8f 91       	pop	r24
    2308:	2f 91       	pop	r18
    230a:	0f 90       	pop	r0
    230c:	0b be       	out	0x3b, r0	; 59
    230e:	0f 90       	pop	r0
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	0f 90       	pop	r0
    2314:	1f 90       	pop	r1
    2316:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2318:	80 81       	ld	r24, Z
__vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    231a:	f2 cf       	rjmp	.-28     	; 0x2300 <__vector_36+0x50>

0000231c <__vector_37>:
__vector_37():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    231c:	1f 92       	push	r1
    231e:	0f 92       	push	r0
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	0f 92       	push	r0
    2324:	11 24       	eor	r1, r1
    2326:	0b b6       	in	r0, 0x3b	; 59
    2328:	0f 92       	push	r0
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    2342:	86 e8       	ldi	r24, 0x86	; 134
    2344:	94 e0       	ldi	r25, 0x04	; 4
    2346:	0e 94 26 10 	call	0x204c	; 0x204c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    234a:	ff 91       	pop	r31
    234c:	ef 91       	pop	r30
    234e:	bf 91       	pop	r27
    2350:	af 91       	pop	r26
    2352:	9f 91       	pop	r25
    2354:	8f 91       	pop	r24
    2356:	7f 91       	pop	r23
    2358:	6f 91       	pop	r22
    235a:	5f 91       	pop	r21
    235c:	4f 91       	pop	r20
    235e:	3f 91       	pop	r19
    2360:	2f 91       	pop	r18
    2362:	0f 90       	pop	r0
    2364:	0b be       	out	0x3b, r0	; 59
    2366:	0f 90       	pop	r0
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	0f 90       	pop	r0
    236c:	1f 90       	pop	r1
    236e:	18 95       	reti

00002370 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2370:	86 e8       	ldi	r24, 0x86	; 134
    2372:	94 e0       	ldi	r25, 0x04	; 4
    2374:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <HardwareSerial::available()>
    2378:	21 e0       	ldi	r18, 0x01	; 1
    237a:	89 2b       	or	r24, r25
    237c:	09 f4       	brne	.+2      	; 0x2380 <Serial1_available()+0x10>
    237e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    2380:	82 2f       	mov	r24, r18
    2382:	08 95       	ret

00002384 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    2384:	e6 e8       	ldi	r30, 0x86	; 134
    2386:	f4 e0       	ldi	r31, 0x04	; 4
    2388:	13 82       	std	Z+3, r1	; 0x03
    238a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    238c:	88 ee       	ldi	r24, 0xE8	; 232
    238e:	93 e0       	ldi	r25, 0x03	; 3
    2390:	a0 e0       	ldi	r26, 0x00	; 0
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	84 83       	std	Z+4, r24	; 0x04
    2396:	95 83       	std	Z+5, r25	; 0x05
    2398:	a6 83       	std	Z+6, r26	; 0x06
    239a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    239c:	86 e6       	ldi	r24, 0x66	; 102
    239e:	92 e0       	ldi	r25, 0x02	; 2
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	8d ec       	ldi	r24, 0xCD	; 205
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	95 87       	std	Z+13, r25	; 0x0d
    23aa:	84 87       	std	Z+12, r24	; 0x0c
    23ac:	8c ec       	ldi	r24, 0xCC	; 204
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	97 87       	std	Z+15, r25	; 0x0f
    23b2:	86 87       	std	Z+14, r24	; 0x0e
    23b4:	88 ec       	ldi	r24, 0xC8	; 200
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	91 8b       	std	Z+17, r25	; 0x11
    23ba:	80 8b       	std	Z+16, r24	; 0x10
    23bc:	89 ec       	ldi	r24, 0xC9	; 201
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	93 8b       	std	Z+19, r25	; 0x13
    23c2:	82 8b       	std	Z+18, r24	; 0x12
    23c4:	8a ec       	ldi	r24, 0xCA	; 202
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	95 8b       	std	Z+21, r25	; 0x15
    23ca:	84 8b       	std	Z+20, r24	; 0x14
    23cc:	8e ec       	ldi	r24, 0xCE	; 206
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	97 8b       	std	Z+23, r25	; 0x17
    23d2:	86 8b       	std	Z+22, r24	; 0x16
    23d4:	11 8e       	std	Z+25, r1	; 0x19
    23d6:	12 8e       	std	Z+26, r1	; 0x1a
    23d8:	13 8e       	std	Z+27, r1	; 0x1b
    23da:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    23dc:	08 95       	ret

000023de <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	6c 01       	movw	r12, r24
    23f4:	7b 01       	movw	r14, r22
    23f6:	8b 01       	movw	r16, r22
    23f8:	04 0f       	add	r16, r20
    23fa:	15 1f       	adc	r17, r21
    23fc:	eb 01       	movw	r28, r22
    23fe:	5e 01       	movw	r10, r28
    2400:	ae 18       	sub	r10, r14
    2402:	bf 08       	sbc	r11, r15
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    2404:	c0 17       	cp	r28, r16
    2406:	d1 07       	cpc	r29, r17
    2408:	59 f0       	breq	.+22     	; 0x2420 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    240a:	69 91       	ld	r22, Y+
    240c:	d6 01       	movw	r26, r12
    240e:	ed 91       	ld	r30, X+
    2410:	fc 91       	ld	r31, X
    2412:	01 90       	ld	r0, Z+
    2414:	f0 81       	ld	r31, Z
    2416:	e0 2d       	mov	r30, r0
    2418:	c6 01       	movw	r24, r12
    241a:	19 95       	eicall
    241c:	89 2b       	or	r24, r25
    241e:	79 f7       	brne	.-34     	; 0x23fe <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    2420:	c5 01       	movw	r24, r10
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	08 95       	ret

00002438 <tone(unsigned char, unsigned int, unsigned long)>:
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:281


// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    2438:	4f 92       	push	r4
    243a:	5f 92       	push	r5
    243c:	6f 92       	push	r6
    243e:	7f 92       	push	r7
    2440:	8f 92       	push	r8
    2442:	9f 92       	push	r9
    2444:	af 92       	push	r10
    2446:	bf 92       	push	r11
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	00 d0       	rcall	.+0      	; 0x245a <tone(unsigned char, unsigned int, unsigned long)+0x22>
    245a:	1f 92       	push	r1
    245c:	1f 92       	push	r1
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	8b 01       	movw	r16, r22
    2464:	49 01       	movw	r8, r18
    2466:	5a 01       	movw	r10, r20
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:171
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2468:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <tone_pins>
    246c:	89 17       	cp	r24, r25
    246e:	c9 f0       	breq	.+50     	; 0x24a2 <tone(unsigned char, unsigned int, unsigned long)+0x6a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:178
    }
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    2470:	9f 3f       	cpi	r25, 0xFF	; 255
    2472:	09 f4       	brne	.+2      	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
    2474:	ea c0       	rjmp	.+468    	; 0x264a <tone(unsigned char, unsigned int, unsigned long)+0x212>
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	1f 91       	pop	r17
    2486:	0f 91       	pop	r16
    2488:	ff 90       	pop	r15
    248a:	ef 90       	pop	r14
    248c:	df 90       	pop	r13
    248e:	cf 90       	pop	r12
    2490:	bf 90       	pop	r11
    2492:	af 90       	pop	r10
    2494:	9f 90       	pop	r9
    2496:	8f 90       	pop	r8
    2498:	7f 90       	pop	r7
    249a:	6f 90       	pop	r6
    249c:	5f 90       	pop	r5
    249e:	4f 90       	pop	r4
    24a0:	08 95       	ret
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:172
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    24a2:	e4 ef       	ldi	r30, 0xF4	; 244
    24a4:	f1 e0       	ldi	r31, 0x01	; 1
    24a6:	24 91       	lpm	r18, Z
    24a8:	2d 83       	std	Y+5, r18	; 0x05
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    24aa:	27 fd       	sbrc	r18, 7
    24ac:	e4 cf       	rjmp	.-56     	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    24ae:	61 e0       	ldi	r22, 0x01	; 1
    24b0:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    24b4:	2d 81       	ldd	r18, Y+5	; 0x05
    24b6:	22 23       	and	r18, r18
    24b8:	21 f0       	breq	.+8      	; 0x24c2 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295 (discriminator 1)
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	09 f0       	breq	.+2      	; 0x24c2 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
    24c0:	e4 c1       	rjmp	.+968    	; 0x288a <tone(unsigned char, unsigned int, unsigned long)+0x452>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:297
    {
      ocr = F_CPU / frequency / 2 - 1;
    24c2:	28 01       	movw	r4, r16
    24c4:	71 2c       	mov	r7, r1
    24c6:	61 2c       	mov	r6, r1
    24c8:	60 e8       	ldi	r22, 0x80	; 128
    24ca:	74 e8       	ldi	r23, 0x84	; 132
    24cc:	8e e1       	ldi	r24, 0x1E	; 30
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a3 01       	movw	r20, r6
    24d2:	98 01       	movw	r18, r16
    24d4:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    24d8:	29 83       	std	Y+1, r18	; 0x01
    24da:	3a 83       	std	Y+2, r19	; 0x02
    24dc:	4b 83       	std	Y+3, r20	; 0x03
    24de:	5c 83       	std	Y+4, r21	; 0x04
    24e0:	69 01       	movw	r12, r18
    24e2:	7a 01       	movw	r14, r20
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	c9 1a       	sub	r12, r25
    24e8:	d1 08       	sbc	r13, r1
    24ea:	e1 08       	sbc	r14, r1
    24ec:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:299
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    24ee:	af ef       	ldi	r26, 0xFF	; 255
    24f0:	ca 16       	cp	r12, r26
    24f2:	d1 04       	cpc	r13, r1
    24f4:	e1 04       	cpc	r14, r1
    24f6:	f1 04       	cpc	r15, r1
    24f8:	09 f0       	breq	.+2      	; 0x24fc <tone(unsigned char, unsigned int, unsigned long)+0xc4>
    24fa:	0c f4       	brge	.+2      	; 0x24fe <tone(unsigned char, unsigned int, unsigned long)+0xc6>
    24fc:	a7 c1       	rjmp	.+846    	; 0x284c <tone(unsigned char, unsigned int, unsigned long)+0x414>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:301
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    24fe:	60 e9       	ldi	r22, 0x90	; 144
    2500:	70 ed       	ldi	r23, 0xD0	; 208
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a3 01       	movw	r20, r6
    2508:	98 01       	movw	r18, r16
    250a:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    250e:	69 01       	movw	r12, r18
    2510:	7a 01       	movw	r14, r20
    2512:	b1 e0       	ldi	r27, 0x01	; 1
    2514:	cb 1a       	sub	r12, r27
    2516:	d1 08       	sbc	r13, r1
    2518:	e1 08       	sbc	r14, r1
    251a:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    251c:	2d 81       	ldd	r18, Y+5	; 0x05
    251e:	22 30       	cpi	r18, 0x02	; 2
    2520:	09 f0       	breq	.+2      	; 0x2524 <tone(unsigned char, unsigned int, unsigned long)+0xec>
    2522:	93 c2       	rjmp	.+1318   	; 0x2a4a <tone(unsigned char, unsigned int, unsigned long)+0x612>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304 (discriminator 1)
    2524:	8f ef       	ldi	r24, 0xFF	; 255
    2526:	c8 16       	cp	r12, r24
    2528:	d1 04       	cpc	r13, r1
    252a:	e1 04       	cpc	r14, r1
    252c:	f1 04       	cpc	r15, r1
    252e:	09 f0       	breq	.+2      	; 0x2532 <tone(unsigned char, unsigned int, unsigned long)+0xfa>
    2530:	0c f4       	brge	.+2      	; 0x2534 <tone(unsigned char, unsigned int, unsigned long)+0xfc>
    2532:	d6 c2       	rjmp	.+1452   	; 0x2ae0 <tone(unsigned char, unsigned int, unsigned long)+0x6a8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:306
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2534:	64 e2       	ldi	r22, 0x24	; 36
    2536:	74 ef       	ldi	r23, 0xF4	; 244
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a3 01       	movw	r20, r6
    253e:	98 01       	movw	r18, r16
    2540:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    2544:	69 01       	movw	r12, r18
    2546:	7a 01       	movw	r14, r20
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	c9 1a       	sub	r12, r25
    254c:	d1 08       	sbc	r13, r1
    254e:	e1 08       	sbc	r14, r1
    2550:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:307
          prescalarbits = 0b011;
    2552:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        }

        if (ocr > 255)
    2554:	af ef       	ldi	r26, 0xFF	; 255
    2556:	ca 16       	cp	r12, r26
    2558:	d1 04       	cpc	r13, r1
    255a:	e1 04       	cpc	r14, r1
    255c:	f1 04       	cpc	r15, r1
    255e:	09 f0       	breq	.+2      	; 0x2562 <tone(unsigned char, unsigned int, unsigned long)+0x12a>
    2560:	08 f4       	brcc	.+2      	; 0x2564 <tone(unsigned char, unsigned int, unsigned long)+0x12c>
    2562:	57 c0       	rjmp	.+174    	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2564:	62 e1       	ldi	r22, 0x12	; 18
    2566:	7a e7       	ldi	r23, 0x7A	; 122
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a3 01       	movw	r20, r6
    256e:	98 01       	movw	r18, r16
    2570:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    2574:	69 01       	movw	r12, r18
    2576:	7a 01       	movw	r14, r20
    2578:	b1 e0       	ldi	r27, 0x01	; 1
    257a:	cb 1a       	sub	r12, r27
    257c:	d1 08       	sbc	r13, r1
    257e:	e1 08       	sbc	r14, r1
    2580:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:313
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b011 : 0b100;
    2582:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:315

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2584:	2f ef       	ldi	r18, 0xFF	; 255
    2586:	c2 16       	cp	r12, r18
    2588:	d1 04       	cpc	r13, r1
    258a:	e1 04       	cpc	r14, r1
    258c:	f1 04       	cpc	r15, r1
    258e:	09 f0       	breq	.+2      	; 0x2592 <tone(unsigned char, unsigned int, unsigned long)+0x15a>
    2590:	08 f4       	brcc	.+2      	; 0x2594 <tone(unsigned char, unsigned int, unsigned long)+0x15c>
    2592:	3f c0       	rjmp	.+126    	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:317
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    2594:	69 e0       	ldi	r22, 0x09	; 9
    2596:	7d e3       	ldi	r23, 0x3D	; 61
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a3 01       	movw	r20, r6
    259e:	98 01       	movw	r18, r16
    25a0:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    25a4:	69 01       	movw	r12, r18
    25a6:	7a 01       	movw	r14, r20
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	c8 1a       	sub	r12, r24
    25ac:	d1 08       	sbc	r13, r1
    25ae:	e1 08       	sbc	r14, r1
    25b0:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:318
            prescalarbits = 0b101;
    25b2:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          }

          if (ocr > 255)
    25b4:	9f ef       	ldi	r25, 0xFF	; 255
    25b6:	c9 16       	cp	r12, r25
    25b8:	d1 04       	cpc	r13, r1
    25ba:	e1 04       	cpc	r14, r1
    25bc:	f1 04       	cpc	r15, r1
    25be:	49 f1       	breq	.+82     	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
    25c0:	40 f1       	brcs	.+80     	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	ab 81       	ldd	r26, Y+3	; 0x03
    25c8:	bc 81       	ldd	r27, Y+4	; 0x04
    25ca:	c9 2e       	mov	r12, r25
    25cc:	da 2e       	mov	r13, r26
    25ce:	eb 2e       	mov	r14, r27
    25d0:	ff 24       	eor	r15, r15
    25d2:	e7 fc       	sbrc	r14, 7
    25d4:	fa 94       	dec	r15
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	c9 1a       	sub	r12, r25
    25da:	d1 08       	sbc	r13, r1
    25dc:	e1 08       	sbc	r14, r1
    25de:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:324
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
    25e0:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            if (ocr > 255)
    25e2:	af ef       	ldi	r26, 0xFF	; 255
    25e4:	ca 16       	cp	r12, r26
    25e6:	d1 04       	cpc	r13, r1
    25e8:	e1 04       	cpc	r14, r1
    25ea:	f1 04       	cpc	r15, r1
    25ec:	91 f0       	breq	.+36     	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
    25ee:	88 f0       	brcs	.+34     	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    25f0:	c9 80       	ldd	r12, Y+1	; 0x01
    25f2:	da 80       	ldd	r13, Y+2	; 0x02
    25f4:	eb 80       	ldd	r14, Y+3	; 0x03
    25f6:	fc 80       	ldd	r15, Y+4	; 0x04
    25f8:	8a e0       	ldi	r24, 0x0A	; 10
    25fa:	f5 94       	asr	r15
    25fc:	e7 94       	ror	r14
    25fe:	d7 94       	ror	r13
    2600:	c7 94       	ror	r12
    2602:	8a 95       	dec	r24
    2604:	d1 f7       	brne	.-12     	; 0x25fa <tone(unsigned char, unsigned int, unsigned long)+0x1c2>
    2606:	21 e0       	ldi	r18, 0x01	; 1
    2608:	c2 1a       	sub	r12, r18
    260a:	d1 08       	sbc	r13, r1
    260c:	e1 08       	sbc	r14, r1
    260e:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    2610:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:344
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    2612:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2616:	98 7f       	andi	r25, 0xF8	; 248
    2618:	89 2b       	or	r24, r25
    261a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    261e:	2f ef       	ldi	r18, 0xFF	; 255
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2624:	81 14       	cp	r8, r1
    2626:	91 04       	cpc	r9, r1
    2628:	a1 04       	cpc	r10, r1
    262a:	b1 04       	cpc	r11, r1
    262c:	09 f0       	breq	.+2      	; 0x2630 <tone(unsigned char, unsigned int, unsigned long)+0x1f8>
    262e:	1f c1       	rjmp	.+574    	; 0x286e <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2630:	bd 81       	ldd	r27, Y+5	; 0x05
    2632:	b2 30       	cpi	r27, 0x02	; 2
    2634:	09 f4       	brne	.+2      	; 0x2638 <tone(unsigned char, unsigned int, unsigned long)+0x200>
    2636:	f9 c1       	rjmp	.+1010   	; 0x2a2a <tone(unsigned char, unsigned int, unsigned long)+0x5f2>
    2638:	0c f0       	brlt	.+2      	; 0x263c <tone(unsigned char, unsigned int, unsigned long)+0x204>
    263a:	e0 c1       	rjmp	.+960    	; 0x29fc <tone(unsigned char, unsigned int, unsigned long)+0x5c4>
    263c:	bb 23       	and	r27, r27
    263e:	09 f4       	brne	.+2      	; 0x2642 <tone(unsigned char, unsigned int, unsigned long)+0x20a>
    2640:	e5 c1       	rjmp	.+970    	; 0x2a0c <tone(unsigned char, unsigned int, unsigned long)+0x5d4>
    2642:	b1 30       	cpi	r27, 0x01	; 1
    2644:	09 f4       	brne	.+2      	; 0x2648 <tone(unsigned char, unsigned int, unsigned long)+0x210>
    2646:	4a c1       	rjmp	.+660    	; 0x28dc <tone(unsigned char, unsigned int, unsigned long)+0x4a4>
    2648:	16 cf       	rjmp	.-468    	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:179
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    264a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <tone_pins>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:180
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    264e:	e4 ef       	ldi	r30, 0xF4	; 244
    2650:	f1 e0       	ldi	r31, 0x01	; 1
    2652:	94 91       	lpm	r25, Z
    2654:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:185
      break;
    }
  }

  if (_timer != -1)
    2656:	9f 3f       	cpi	r25, 0xFF	; 255
    2658:	09 f4       	brne	.+2      	; 0x265c <tone(unsigned char, unsigned int, unsigned long)+0x224>
    265a:	0d cf       	rjmp	.-486    	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    265c:	92 30       	cpi	r25, 0x02	; 2
    265e:	09 f4       	brne	.+2      	; 0x2662 <tone(unsigned char, unsigned int, unsigned long)+0x22a>
    2660:	81 c0       	rjmp	.+258    	; 0x2764 <tone(unsigned char, unsigned int, unsigned long)+0x32c>
    2662:	60 f4       	brcc	.+24     	; 0x267c <tone(unsigned char, unsigned int, unsigned long)+0x244>
    2664:	99 23       	and	r25, r25
    2666:	09 f4       	brne	.+2      	; 0x266a <tone(unsigned char, unsigned int, unsigned long)+0x232>
    2668:	37 c0       	rjmp	.+110    	; 0x26d8 <tone(unsigned char, unsigned int, unsigned long)+0x2a0>
    266a:	91 30       	cpi	r25, 0x01	; 1
    266c:	09 f4       	brne	.+2      	; 0x2670 <tone(unsigned char, unsigned int, unsigned long)+0x238>
    266e:	54 c0       	rjmp	.+168    	; 0x2718 <tone(unsigned char, unsigned int, unsigned long)+0x2e0>
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    2670:	97 fd       	sbrc	r25, 7
    2672:	01 cf       	rjmp	.-510    	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	0e 94 8d 19 	call	0x331a	; 0x331a <pinMode>
    267a:	1f cf       	rjmp	.-450    	; 0x24ba <tone(unsigned char, unsigned int, unsigned long)+0x82>
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    267c:	ad 81       	ldd	r26, Y+5	; 0x05
    267e:	a4 30       	cpi	r26, 0x04	; 4
    2680:	09 f4       	brne	.+2      	; 0x2684 <tone(unsigned char, unsigned int, unsigned long)+0x24c>
    2682:	be c0       	rjmp	.+380    	; 0x2800 <tone(unsigned char, unsigned int, unsigned long)+0x3c8>
    2684:	08 f4       	brcc	.+2      	; 0x2688 <tone(unsigned char, unsigned int, unsigned long)+0x250>
    2686:	94 c0       	rjmp	.+296    	; 0x27b0 <tone(unsigned char, unsigned int, unsigned long)+0x378>
    2688:	a5 30       	cpi	r26, 0x05	; 5
    268a:	91 f7       	brne	.-28     	; 0x2670 <tone(unsigned char, unsigned int, unsigned long)+0x238>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:262
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    268c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:263
        TCCR5B = 0;
    2690:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:264
        bitWrite(TCCR5B, WGM52, 1);
    2694:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2698:	98 60       	ori	r25, 0x08	; 8
    269a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:265
        bitWrite(TCCR5B, CS50, 1);
    269e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    26a2:	91 60       	ori	r25, 0x01	; 1
    26a4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:266
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	f9 01       	movw	r30, r18
    26ae:	ef 55       	subi	r30, 0x5F	; 95
    26b0:	fd 4f       	sbci	r31, 0xFD	; 253
    26b2:	e4 91       	lpm	r30, Z
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	ef 5e       	subi	r30, 0xEF	; 239
    26bc:	fc 4f       	sbci	r31, 0xFC	; 252
    26be:	45 91       	lpm	r20, Z+
    26c0:	54 91       	lpm	r21, Z
    26c2:	50 93 25 05 	sts	0x0525, r21	; 0x800525 <timer5_pin_port+0x1>
    26c6:	40 93 24 05 	sts	0x0524, r20	; 0x800524 <timer5_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:267
        timer5_pin_mask = digitalPinToBitMask(_pin);
    26ca:	f9 01       	movw	r30, r18
    26cc:	e5 5b       	subi	r30, 0xB5	; 181
    26ce:	fd 4f       	sbci	r31, 0xFD	; 253
    26d0:	e4 91       	lpm	r30, Z
    26d2:	e0 93 23 05 	sts	0x0523, r30	; 0x800523 <timer5_pin_mask>
    26d6:	eb ce       	rjmp	.-554    	; 0x24ae <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:196
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    26d8:	14 bc       	out	0x24, r1	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:197
        TCCR0B = 0;
    26da:	15 bc       	out	0x25, r1	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:198
        bitWrite(TCCR0A, WGM01, 1);
    26dc:	94 b5       	in	r25, 0x24	; 36
    26de:	92 60       	ori	r25, 0x02	; 2
    26e0:	94 bd       	out	0x24, r25	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:199
        bitWrite(TCCR0B, CS00, 1);
    26e2:	95 b5       	in	r25, 0x25	; 37
    26e4:	91 60       	ori	r25, 0x01	; 1
    26e6:	95 bd       	out	0x25, r25	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:200
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	f9 01       	movw	r30, r18
    26ee:	ef 55       	subi	r30, 0x5F	; 95
    26f0:	fd 4f       	sbci	r31, 0xFD	; 253
    26f2:	e4 91       	lpm	r30, Z
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	ef 5e       	subi	r30, 0xEF	; 239
    26fc:	fc 4f       	sbci	r31, 0xFC	; 252
    26fe:	45 91       	lpm	r20, Z+
    2700:	54 91       	lpm	r21, Z
    2702:	50 93 48 05 	sts	0x0548, r21	; 0x800548 <timer0_pin_port+0x1>
    2706:	40 93 47 05 	sts	0x0547, r20	; 0x800547 <timer0_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:201
        timer0_pin_mask = digitalPinToBitMask(_pin);
    270a:	f9 01       	movw	r30, r18
    270c:	e5 5b       	subi	r30, 0xB5	; 181
    270e:	fd 4f       	sbci	r31, 0xFD	; 253
    2710:	e4 91       	lpm	r30, Z
    2712:	e0 93 46 05 	sts	0x0546, r30	; 0x800546 <timer0_pin_mask>
    2716:	cb ce       	rjmp	.-618    	; 0x24ae <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:208
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    2718:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:209
        TCCR1B = 0;
    271c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:210
        bitWrite(TCCR1B, WGM12, 1);
    2720:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2724:	98 60       	ori	r25, 0x08	; 8
    2726:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:211
        bitWrite(TCCR1B, CS10, 1);
    272a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    272e:	91 60       	ori	r25, 0x01	; 1
    2730:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:212
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	f9 01       	movw	r30, r18
    273a:	ef 55       	subi	r30, 0x5F	; 95
    273c:	fd 4f       	sbci	r31, 0xFD	; 253
    273e:	e4 91       	lpm	r30, Z
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	ee 0f       	add	r30, r30
    2744:	ff 1f       	adc	r31, r31
    2746:	ef 5e       	subi	r30, 0xEF	; 239
    2748:	fc 4f       	sbci	r31, 0xFC	; 252
    274a:	45 91       	lpm	r20, Z+
    274c:	54 91       	lpm	r21, Z
    274e:	50 93 41 05 	sts	0x0541, r21	; 0x800541 <timer1_pin_port+0x1>
    2752:	40 93 40 05 	sts	0x0540, r20	; 0x800540 <timer1_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:213
        timer1_pin_mask = digitalPinToBitMask(_pin);
    2756:	f9 01       	movw	r30, r18
    2758:	e5 5b       	subi	r30, 0xB5	; 181
    275a:	fd 4f       	sbci	r31, 0xFD	; 253
    275c:	e4 91       	lpm	r30, Z
    275e:	e0 93 3f 05 	sts	0x053F, r30	; 0x80053f <timer1_pin_mask>
    2762:	a5 ce       	rjmp	.-694    	; 0x24ae <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:220
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    2764:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:221
        TCCR2B = 0;
    2768:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:222
        bitWrite(TCCR2A, WGM21, 1);
    276c:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2770:	92 60       	ori	r25, 0x02	; 2
    2772:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:223
        bitWrite(TCCR2B, CS20, 1);
    2776:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    277a:	91 60       	ori	r25, 0x01	; 1
    277c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:224
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	f9 01       	movw	r30, r18
    2786:	ef 55       	subi	r30, 0x5F	; 95
    2788:	fd 4f       	sbci	r31, 0xFD	; 253
    278a:	e4 91       	lpm	r30, Z
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	ef 5e       	subi	r30, 0xEF	; 239
    2794:	fc 4f       	sbci	r31, 0xFC	; 252
    2796:	45 91       	lpm	r20, Z+
    2798:	54 91       	lpm	r21, Z
    279a:	50 93 3a 05 	sts	0x053A, r21	; 0x80053a <timer2_pin_port+0x1>
    279e:	40 93 39 05 	sts	0x0539, r20	; 0x800539 <timer2_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:225
        timer2_pin_mask = digitalPinToBitMask(_pin);
    27a2:	f9 01       	movw	r30, r18
    27a4:	e5 5b       	subi	r30, 0xB5	; 181
    27a6:	fd 4f       	sbci	r31, 0xFD	; 253
    27a8:	e4 91       	lpm	r30, Z
    27aa:	e0 93 38 05 	sts	0x0538, r30	; 0x800538 <timer2_pin_mask>
    27ae:	7f ce       	rjmp	.-770    	; 0x24ae <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:232
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    27b0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:233
        TCCR3B = 0;
    27b4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:234
        bitWrite(TCCR3B, WGM32, 1);
    27b8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    27bc:	98 60       	ori	r25, 0x08	; 8
    27be:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:235
        bitWrite(TCCR3B, CS30, 1);
    27c2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    27c6:	91 60       	ori	r25, 0x01	; 1
    27c8:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:236
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	f9 01       	movw	r30, r18
    27d2:	ef 55       	subi	r30, 0x5F	; 95
    27d4:	fd 4f       	sbci	r31, 0xFD	; 253
    27d6:	e4 91       	lpm	r30, Z
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ef 5e       	subi	r30, 0xEF	; 239
    27e0:	fc 4f       	sbci	r31, 0xFC	; 252
    27e2:	45 91       	lpm	r20, Z+
    27e4:	54 91       	lpm	r21, Z
    27e6:	50 93 33 05 	sts	0x0533, r21	; 0x800533 <timer3_pin_port+0x1>
    27ea:	40 93 32 05 	sts	0x0532, r20	; 0x800532 <timer3_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:237
        timer3_pin_mask = digitalPinToBitMask(_pin);
    27ee:	f9 01       	movw	r30, r18
    27f0:	e5 5b       	subi	r30, 0xB5	; 181
    27f2:	fd 4f       	sbci	r31, 0xFD	; 253
    27f4:	e4 91       	lpm	r30, Z
    27f6:	e0 93 31 05 	sts	0x0531, r30	; 0x800531 <timer3_pin_mask>
    27fa:	b3 e0       	ldi	r27, 0x03	; 3
    27fc:	bd 83       	std	Y+5, r27	; 0x05
    27fe:	57 ce       	rjmp	.-850    	; 0x24ae <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:244
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    2800:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:245
        TCCR4B = 0;
    2804:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:247
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    2808:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    280c:	98 60       	ori	r25, 0x08	; 8
    280e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:253
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    2812:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2816:	91 60       	ori	r25, 0x01	; 1
    2818:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:254
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	f9 01       	movw	r30, r18
    2822:	ef 55       	subi	r30, 0x5F	; 95
    2824:	fd 4f       	sbci	r31, 0xFD	; 253
    2826:	e4 91       	lpm	r30, Z
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	ee 0f       	add	r30, r30
    282c:	ff 1f       	adc	r31, r31
    282e:	ef 5e       	subi	r30, 0xEF	; 239
    2830:	fc 4f       	sbci	r31, 0xFC	; 252
    2832:	45 91       	lpm	r20, Z+
    2834:	54 91       	lpm	r21, Z
    2836:	50 93 2c 05 	sts	0x052C, r21	; 0x80052c <timer4_pin_port+0x1>
    283a:	40 93 2b 05 	sts	0x052B, r20	; 0x80052b <timer4_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:255
        timer4_pin_mask = digitalPinToBitMask(_pin);
    283e:	f9 01       	movw	r30, r18
    2840:	e5 5b       	subi	r30, 0xB5	; 181
    2842:	fd 4f       	sbci	r31, 0xFD	; 253
    2844:	e4 91       	lpm	r30, Z
    2846:	e0 93 2a 05 	sts	0x052A, r30	; 0x80052a <timer4_pin_mask>
    284a:	31 ce       	rjmp	.-926    	; 0x24ae <tone(unsigned char, unsigned int, unsigned long)+0x76>
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:298

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    284c:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:336
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    284e:	bd 81       	ldd	r27, Y+5	; 0x05
    2850:	b1 11       	cpse	r27, r1
    2852:	df ce       	rjmp	.-578    	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:338
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    2854:	95 b5       	in	r25, 0x25	; 37
    2856:	98 7f       	andi	r25, 0xF8	; 248
    2858:	89 2b       	or	r24, r25
    285a:	85 bd       	out	0x25, r24	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    285c:	2f ef       	ldi	r18, 0xFF	; 255
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2862:	81 14       	cp	r8, r1
    2864:	91 04       	cpc	r9, r1
    2866:	a1 04       	cpc	r10, r1
    2868:	b1 04       	cpc	r11, r1
    286a:	09 f4       	brne	.+2      	; 0x286e <tone(unsigned char, unsigned int, unsigned long)+0x436>
    286c:	cf c0       	rjmp	.+414    	; 0x2a0c <tone(unsigned char, unsigned int, unsigned long)+0x5d4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:389
    {
      toggle_count = 2 * frequency * duration / 1000;
    286e:	d8 01       	movw	r26, r16
    2870:	aa 0f       	add	r26, r26
    2872:	bb 1f       	adc	r27, r27
    2874:	a5 01       	movw	r20, r10
    2876:	94 01       	movw	r18, r8
    2878:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__muluhisi3>
    287c:	28 ee       	ldi	r18, 0xE8	; 232
    287e:	33 e0       	ldi	r19, 0x03	; 3
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	0e 94 21 1a 	call	0x3442	; 0x3442 <__udivmodsi4>
    2888:	d3 ce       	rjmp	.-602    	; 0x2630 <tone(unsigned char, unsigned int, unsigned long)+0x1f8>
    288a:	71 2c       	mov	r7, r1
    288c:	61 2c       	mov	r6, r1
    288e:	60 e8       	ldi	r22, 0x80	; 128
    2890:	74 e8       	ldi	r23, 0x84	; 132
    2892:	8e e1       	ldi	r24, 0x1E	; 30
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a3 01       	movw	r20, r6
    2898:	98 01       	movw	r18, r16
    289a:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    289e:	69 01       	movw	r12, r18
    28a0:	7a 01       	movw	r14, r20
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	c8 1a       	sub	r12, r24
    28a6:	d1 08       	sbc	r13, r1
    28a8:	e1 08       	sbc	r14, r1
    28aa:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:358
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    28ac:	c1 14       	cp	r12, r1
    28ae:	d1 04       	cpc	r13, r1
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	e9 06       	cpc	r14, r25
    28b4:	f1 04       	cpc	r15, r1
    28b6:	24 f5       	brge	.+72     	; 0x2900 <tone(unsigned char, unsigned int, unsigned long)+0x4c8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:357
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    28b8:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:364
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    28ba:	bd 81       	ldd	r27, Y+5	; 0x05
    28bc:	b1 30       	cpi	r27, 0x01	; 1
    28be:	89 f5       	brne	.+98     	; 0x2922 <tone(unsigned char, unsigned int, unsigned long)+0x4ea>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:367
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    28c0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    28c4:	88 7f       	andi	r24, 0xF8	; 248
    28c6:	89 2b       	or	r24, r25
    28c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    28cc:	2f ef       	ldi	r18, 0xFF	; 255
    28ce:	3f ef       	ldi	r19, 0xFF	; 255
    28d0:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    28d2:	81 14       	cp	r8, r1
    28d4:	91 04       	cpc	r9, r1
    28d6:	a1 04       	cpc	r10, r1
    28d8:	b1 04       	cpc	r11, r1
    28da:	49 f6       	brne	.-110    	; 0x286e <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:412
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    28dc:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    28e0:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:413
        timer1_toggle_count = toggle_count;
    28e4:	20 93 42 05 	sts	0x0542, r18	; 0x800542 <timer1_toggle_count>
    28e8:	30 93 43 05 	sts	0x0543, r19	; 0x800543 <timer1_toggle_count+0x1>
    28ec:	40 93 44 05 	sts	0x0544, r20	; 0x800544 <timer1_toggle_count+0x2>
    28f0:	50 93 45 05 	sts	0x0545, r21	; 0x800545 <timer1_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:414
        bitWrite(TIMSK1, OCIE1A, 1);
    28f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    28f8:	82 60       	ori	r24, 0x02	; 2
    28fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:421
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    28fe:	bb cd       	rjmp	.-1162   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:360
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    2900:	62 e1       	ldi	r22, 0x12	; 18
    2902:	7a e7       	ldi	r23, 0x7A	; 122
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a3 01       	movw	r20, r6
    290a:	98 01       	movw	r18, r16
    290c:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    2910:	69 01       	movw	r12, r18
    2912:	7a 01       	movw	r14, r20
    2914:	a1 e0       	ldi	r26, 0x01	; 1
    2916:	ca 1a       	sub	r12, r26
    2918:	d1 08       	sbc	r13, r1
    291a:	e1 08       	sbc	r14, r1
    291c:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:361
        prescalarbits = 0b011;
    291e:	93 e0       	ldi	r25, 0x03	; 3
    2920:	cc cf       	rjmp	.-104    	; 0x28ba <tone(unsigned char, unsigned int, unsigned long)+0x482>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:371
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    2922:	2d 81       	ldd	r18, Y+5	; 0x05
    2924:	23 30       	cpi	r18, 0x03	; 3
    2926:	09 f5       	brne	.+66     	; 0x296a <tone(unsigned char, unsigned int, unsigned long)+0x532>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:372
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    2928:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    292c:	88 7f       	andi	r24, 0xF8	; 248
    292e:	89 2b       	or	r24, r25
    2930:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    293a:	81 14       	cp	r8, r1
    293c:	91 04       	cpc	r9, r1
    293e:	a1 04       	cpc	r10, r1
    2940:	b1 04       	cpc	r11, r1
    2942:	09 f0       	breq	.+2      	; 0x2946 <tone(unsigned char, unsigned int, unsigned long)+0x50e>
    2944:	94 cf       	rjmp	.-216    	; 0x286e <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:433
        break;
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    2946:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    294a:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:434
        timer3_toggle_count = toggle_count;
    294e:	20 93 34 05 	sts	0x0534, r18	; 0x800534 <timer3_toggle_count>
    2952:	30 93 35 05 	sts	0x0535, r19	; 0x800535 <timer3_toggle_count+0x1>
    2956:	40 93 36 05 	sts	0x0536, r20	; 0x800536 <timer3_toggle_count+0x2>
    295a:	50 93 37 05 	sts	0x0537, r21	; 0x800537 <timer3_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:435
        bitWrite(TIMSK3, OCIE3A, 1);
    295e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2962:	82 60       	ori	r24, 0x02	; 2
    2964:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:436
        break;
    2968:	86 cd       	rjmp	.-1268   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:375
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	09 f5       	brne	.+66     	; 0x29b2 <tone(unsigned char, unsigned int, unsigned long)+0x57a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:376
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    2970:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2974:	88 7f       	andi	r24, 0xF8	; 248
    2976:	89 2b       	or	r24, r25
    2978:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    297c:	2f ef       	ldi	r18, 0xFF	; 255
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2982:	81 14       	cp	r8, r1
    2984:	91 04       	cpc	r9, r1
    2986:	a1 04       	cpc	r10, r1
    2988:	b1 04       	cpc	r11, r1
    298a:	09 f0       	breq	.+2      	; 0x298e <tone(unsigned char, unsigned int, unsigned long)+0x556>
    298c:	70 cf       	rjmp	.-288    	; 0x286e <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:441
        break;
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    298e:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2992:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:442
        timer4_toggle_count = toggle_count;
    2996:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <timer4_toggle_count>
    299a:	30 93 2e 05 	sts	0x052E, r19	; 0x80052e <timer4_toggle_count+0x1>
    299e:	40 93 2f 05 	sts	0x052F, r20	; 0x80052f <timer4_toggle_count+0x2>
    29a2:	50 93 30 05 	sts	0x0530, r21	; 0x800530 <timer4_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:443
        bitWrite(TIMSK4, OCIE4A, 1);
    29a6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    29aa:	82 60       	ori	r24, 0x02	; 2
    29ac:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:444
        break;
    29b0:	62 cd       	rjmp	.-1340   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:379
#if defined(TCCR4B)
      else if (_timer == 4)
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    29b2:	ad 81       	ldd	r26, Y+5	; 0x05
    29b4:	a5 30       	cpi	r26, 0x05	; 5
    29b6:	09 f0       	breq	.+2      	; 0x29ba <tone(unsigned char, unsigned int, unsigned long)+0x582>
    29b8:	32 ce       	rjmp	.-924    	; 0x261e <tone(unsigned char, unsigned int, unsigned long)+0x1e6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:380
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    29ba:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    29be:	88 7f       	andi	r24, 0xF8	; 248
    29c0:	89 2b       	or	r24, r25
    29c2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    29c6:	2f ef       	ldi	r18, 0xFF	; 255
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    29cc:	81 14       	cp	r8, r1
    29ce:	91 04       	cpc	r9, r1
    29d0:	a1 04       	cpc	r10, r1
    29d2:	b1 04       	cpc	r11, r1
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <tone(unsigned char, unsigned int, unsigned long)+0x5a0>
    29d6:	4b cf       	rjmp	.-362    	; 0x286e <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:449
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    29d8:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    29dc:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:450
        timer5_toggle_count = toggle_count;
    29e0:	20 93 26 05 	sts	0x0526, r18	; 0x800526 <timer5_toggle_count>
    29e4:	30 93 27 05 	sts	0x0527, r19	; 0x800527 <timer5_toggle_count+0x1>
    29e8:	40 93 28 05 	sts	0x0528, r20	; 0x800528 <timer5_toggle_count+0x2>
    29ec:	50 93 29 05 	sts	0x0529, r21	; 0x800529 <timer5_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:451
        bitWrite(TIMSK5, OCIE5A, 1);
    29f0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    29f4:	82 60       	ori	r24, 0x02	; 2
    29f6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    29fa:	3d cd       	rjmp	.-1414   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	84 30       	cpi	r24, 0x04	; 4
    2a00:	31 f2       	breq	.-116    	; 0x298e <tone(unsigned char, unsigned int, unsigned long)+0x556>
    2a02:	0c f4       	brge	.+2      	; 0x2a06 <tone(unsigned char, unsigned int, unsigned long)+0x5ce>
    2a04:	a0 cf       	rjmp	.-192    	; 0x2946 <tone(unsigned char, unsigned int, unsigned long)+0x50e>
    2a06:	85 30       	cpi	r24, 0x05	; 5
    2a08:	39 f3       	breq	.-50     	; 0x29d8 <tone(unsigned char, unsigned int, unsigned long)+0x5a0>
    2a0a:	35 cd       	rjmp	.-1430   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:404
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    2a0c:	c7 bc       	out	0x27, r12	; 39
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:405
        timer0_toggle_count = toggle_count;
    2a0e:	20 93 49 05 	sts	0x0549, r18	; 0x800549 <timer0_toggle_count>
    2a12:	30 93 4a 05 	sts	0x054A, r19	; 0x80054a <timer0_toggle_count+0x1>
    2a16:	40 93 4b 05 	sts	0x054B, r20	; 0x80054b <timer0_toggle_count+0x2>
    2a1a:	50 93 4c 05 	sts	0x054C, r21	; 0x80054c <timer0_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:406
        bitWrite(TIMSK0, OCIE0A, 1);
    2a1e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    2a22:	82 60       	ori	r24, 0x02	; 2
    2a24:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:407
        break;
    2a28:	26 cd       	rjmp	.-1460   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:425
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    2a2a:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:426
        timer2_toggle_count = toggle_count;
    2a2e:	20 93 3b 05 	sts	0x053B, r18	; 0x80053b <timer2_toggle_count>
    2a32:	30 93 3c 05 	sts	0x053C, r19	; 0x80053c <timer2_toggle_count+0x1>
    2a36:	40 93 3d 05 	sts	0x053D, r20	; 0x80053d <timer2_toggle_count+0x2>
    2a3a:	50 93 3e 05 	sts	0x053E, r21	; 0x80053e <timer2_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:427
        bitWrite(TIMSK2, OCIE2A, 1);
    2a3e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2a42:	82 60       	ori	r24, 0x02	; 2
    2a44:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:428
        break;
    2a48:	16 cd       	rjmp	.-1492   	; 0x2476 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2a4c:	bf ef       	ldi	r27, 0xFF	; 255
    2a4e:	cb 16       	cp	r12, r27
    2a50:	d1 04       	cpc	r13, r1
    2a52:	e1 04       	cpc	r14, r1
    2a54:	f1 04       	cpc	r15, r1
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <tone(unsigned char, unsigned int, unsigned long)+0x622>
    2a58:	0c f4       	brge	.+2      	; 0x2a5c <tone(unsigned char, unsigned int, unsigned long)+0x624>
    2a5a:	f9 ce       	rjmp	.-526    	; 0x284e <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2a5c:	62 e1       	ldi	r22, 0x12	; 18
    2a5e:	7a e7       	ldi	r23, 0x7A	; 122
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	a3 01       	movw	r20, r6
    2a66:	92 01       	movw	r18, r4
    2a68:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodsi4>
    2a6c:	69 01       	movw	r12, r18
    2a6e:	7a 01       	movw	r14, r20
    2a70:	91 e0       	ldi	r25, 0x01	; 1
    2a72:	c9 1a       	sub	r12, r25
    2a74:	d1 08       	sbc	r13, r1
    2a76:	e1 08       	sbc	r14, r1
    2a78:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	af ef       	ldi	r26, 0xFF	; 255
    2a7e:	ca 16       	cp	r12, r26
    2a80:	d1 04       	cpc	r13, r1
    2a82:	e1 04       	cpc	r14, r1
    2a84:	f1 04       	cpc	r15, r1
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <tone(unsigned char, unsigned int, unsigned long)+0x652>
    2a88:	08 f4       	brcc	.+2      	; 0x2a8c <tone(unsigned char, unsigned int, unsigned long)+0x654>
    2a8a:	e1 ce       	rjmp	.-574    	; 0x284e <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	ab 81       	ldd	r26, Y+3	; 0x03
    2a92:	bc 81       	ldd	r27, Y+4	; 0x04
    2a94:	c9 2e       	mov	r12, r25
    2a96:	da 2e       	mov	r13, r26
    2a98:	eb 2e       	mov	r14, r27
    2a9a:	ff 24       	eor	r15, r15
    2a9c:	e7 fc       	sbrc	r14, 7
    2a9e:	fa 94       	dec	r15
    2aa0:	91 e0       	ldi	r25, 0x01	; 1
    2aa2:	c9 1a       	sub	r12, r25
    2aa4:	d1 08       	sbc	r13, r1
    2aa6:	e1 08       	sbc	r14, r1
    2aa8:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    2aaa:	84 e0       	ldi	r24, 0x04	; 4
    2aac:	af ef       	ldi	r26, 0xFF	; 255
    2aae:	ca 16       	cp	r12, r26
    2ab0:	d1 04       	cpc	r13, r1
    2ab2:	e1 04       	cpc	r14, r1
    2ab4:	f1 04       	cpc	r15, r1
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <tone(unsigned char, unsigned int, unsigned long)+0x682>
    2ab8:	08 f4       	brcc	.+2      	; 0x2abc <tone(unsigned char, unsigned int, unsigned long)+0x684>
    2aba:	c9 ce       	rjmp	.-622    	; 0x284e <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2abc:	c9 80       	ldd	r12, Y+1	; 0x01
    2abe:	da 80       	ldd	r13, Y+2	; 0x02
    2ac0:	eb 80       	ldd	r14, Y+3	; 0x03
    2ac2:	fc 80       	ldd	r15, Y+4	; 0x04
    2ac4:	9a e0       	ldi	r25, 0x0A	; 10
    2ac6:	f5 94       	asr	r15
    2ac8:	e7 94       	ror	r14
    2aca:	d7 94       	ror	r13
    2acc:	c7 94       	ror	r12
    2ace:	9a 95       	dec	r25
    2ad0:	d1 f7       	brne	.-12     	; 0x2ac6 <tone(unsigned char, unsigned int, unsigned long)+0x68e>
    2ad2:	b1 e0       	ldi	r27, 0x01	; 1
    2ad4:	cb 1a       	sub	r12, r27
    2ad6:	d1 08       	sbc	r13, r1
    2ad8:	e1 08       	sbc	r14, r1
    2ada:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    2adc:	85 e0       	ldi	r24, 0x05	; 5
    2ade:	b7 ce       	rjmp	.-658    	; 0x284e <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2ae0:	82 e0       	ldi	r24, 0x02	; 2
    2ae2:	97 cd       	rjmp	.-1234   	; 0x2612 <tone(unsigned char, unsigned int, unsigned long)+0x1da>

00002ae4 <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2ae4:	82 30       	cpi	r24, 0x02	; 2
    2ae6:	a9 f0       	breq	.+42     	; 0x2b12 <disableTimer(unsigned char)+0x2e>
    2ae8:	28 f4       	brcc	.+10     	; 0x2af4 <disableTimer(unsigned char)+0x10>
    2aea:	88 23       	and	r24, r24
    2aec:	49 f0       	breq	.+18     	; 0x2b00 <disableTimer(unsigned char)+0x1c>
    2aee:	81 30       	cpi	r24, 0x01	; 1
    2af0:	51 f0       	breq	.+20     	; 0x2b06 <disableTimer(unsigned char)+0x22>
    2af2:	08 95       	ret
    2af4:	84 30       	cpi	r24, 0x04	; 4
    2af6:	21 f1       	breq	.+72     	; 0x2b40 <disableTimer(unsigned char)+0x5c>
    2af8:	e8 f0       	brcs	.+58     	; 0x2b34 <disableTimer(unsigned char)+0x50>
    2afa:	85 30       	cpi	r24, 0x05	; 5
    2afc:	39 f1       	breq	.+78     	; 0x2b4c <disableTimer(unsigned char)+0x68>
    2afe:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:469
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    2b00:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:473
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2b04:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:477

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2b06:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    2b0a:	8d 7f       	andi	r24, 0xFD	; 253
    2b0c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:478
      break;
    2b10:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:483
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2b12:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2b16:	8d 7f       	andi	r24, 0xFD	; 253
    2b18:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2b22:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2b26:	88 7f       	andi	r24, 0xF8	; 248
    2b28:	84 60       	ori	r24, 0x04	; 4
    2b2a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    2b2e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    2b32:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:498
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    2b34:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2b38:	8d 7f       	andi	r24, 0xFD	; 253
    2b3a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:499
      break;
    2b3e:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:504
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    2b40:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2b44:	8d 7f       	andi	r24, 0xFD	; 253
    2b46:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:505
      break;
    2b4a:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:510
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    2b4c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2b50:	8d 7f       	andi	r24, 0xFD	; 253
    2b52:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:514
      break;
#endif
  }
}
    2b56:	08 95       	ret

00002b58 <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:518


void noTone(uint8_t _pin)
{
    2b58:	cf 93       	push	r28
    2b5a:	c8 2f       	mov	r28, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:522
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2b5c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <tone_pins>
    2b60:	c8 13       	cpse	r28, r24
    2b62:	0d c0       	rjmp	.+26     	; 0x2b7e <noTone(unsigned char)+0x26>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2b64:	e4 ef       	ldi	r30, 0xF4	; 244
    2b66:	f1 e0       	ldi	r31, 0x01	; 1
    2b68:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
    2b6a:	9f ef       	ldi	r25, 0xFF	; 255
    2b6c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <tone_pins>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:529
      break;
    }
  }

  disableTimer(_timer);
    2b70:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <disableTimer(unsigned char)>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531

  digitalWrite(_pin, 0);
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	8c 2f       	mov	r24, r28
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:532
}
    2b78:	cf 91       	pop	r28
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
    2b7a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <digitalWrite>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:519
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    2b7e:	8f ef       	ldi	r24, 0xFF	; 255
    2b80:	f7 cf       	rjmp	.-18     	; 0x2b70 <noTone(unsigned char)+0x18>

00002b82 <__vector_13>:
__vector_13():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    2b82:	1f 92       	push	r1
    2b84:	0f 92       	push	r0
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	0f 92       	push	r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	0b b6       	in	r0, 0x3b	; 59
    2b8e:	0f 92       	push	r0
    2b90:	2f 93       	push	r18
    2b92:	3f 93       	push	r19
    2b94:	4f 93       	push	r20
    2b96:	5f 93       	push	r21
    2b98:	6f 93       	push	r22
    2b9a:	7f 93       	push	r23
    2b9c:	8f 93       	push	r24
    2b9e:	9f 93       	push	r25
    2ba0:	af 93       	push	r26
    2ba2:	bf 93       	push	r27
    2ba4:	ef 93       	push	r30
    2ba6:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    2ba8:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer2_toggle_count>
    2bac:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer2_toggle_count+0x1>
    2bb0:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer2_toggle_count+0x2>
    2bb4:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer2_toggle_count+0x3>
    2bb8:	89 2b       	or	r24, r25
    2bba:	8a 2b       	or	r24, r26
    2bbc:	8b 2b       	or	r24, r27
    2bbe:	e1 f1       	breq	.+120    	; 0x2c38 <__vector_13+0xb6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    2bc0:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <timer2_pin_mask>
    2bc4:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <timer2_pin_port>
    2bc8:	f0 91 3a 05 	lds	r31, 0x053A	; 0x80053a <timer2_pin_port+0x1>
    2bcc:	80 81       	ld	r24, Z
    2bce:	89 27       	eor	r24, r25
    2bd0:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    2bd2:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer2_toggle_count>
    2bd6:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer2_toggle_count+0x1>
    2bda:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer2_toggle_count+0x2>
    2bde:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer2_toggle_count+0x3>
    2be2:	18 16       	cp	r1, r24
    2be4:	19 06       	cpc	r1, r25
    2be6:	1a 06       	cpc	r1, r26
    2be8:	1b 06       	cpc	r1, r27
    2bea:	9c f4       	brge	.+38     	; 0x2c12 <__vector_13+0x90>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    2bec:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <timer2_toggle_count>
    2bf0:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <timer2_toggle_count+0x1>
    2bf4:	a0 91 3d 05 	lds	r26, 0x053D	; 0x80053d <timer2_toggle_count+0x2>
    2bf8:	b0 91 3e 05 	lds	r27, 0x053E	; 0x80053e <timer2_toggle_count+0x3>
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	a1 09       	sbc	r26, r1
    2c00:	b1 09       	sbc	r27, r1
    2c02:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <timer2_toggle_count>
    2c06:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <timer2_toggle_count+0x1>
    2c0a:	a0 93 3d 05 	sts	0x053D, r26	; 0x80053d <timer2_toggle_count+0x2>
    2c0e:	b0 93 3e 05 	sts	0x053E, r27	; 0x80053e <timer2_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2c12:	ff 91       	pop	r31
    2c14:	ef 91       	pop	r30
    2c16:	bf 91       	pop	r27
    2c18:	af 91       	pop	r26
    2c1a:	9f 91       	pop	r25
    2c1c:	8f 91       	pop	r24
    2c1e:	7f 91       	pop	r23
    2c20:	6f 91       	pop	r22
    2c22:	5f 91       	pop	r21
    2c24:	4f 91       	pop	r20
    2c26:	3f 91       	pop	r19
    2c28:	2f 91       	pop	r18
    2c2a:	0f 90       	pop	r0
    2c2c:	0b be       	out	0x3b, r0	; 59
    2c2e:	0f 90       	pop	r0
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	0f 90       	pop	r0
    2c34:	1f 90       	pop	r1
    2c36:	18 95       	reti
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2c38:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <tone_pins>
    2c3c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <noTone(unsigned char)>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2c40:	e8 cf       	rjmp	.-48     	; 0x2c12 <__vector_13+0x90>

00002c42 <nothing>:
nothing():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:323
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
          break;
    2c42:	08 95       	ret

00002c44 <attachInterrupt>:
attachInterrupt():
    2c44:	88 30       	cpi	r24, 0x08	; 8
    2c46:	08 f0       	brcs	.+2      	; 0x2c4a <attachInterrupt+0x6>
    2c48:	76 c0       	rjmp	.+236    	; 0x2d36 <attachInterrupt+0xf2>
    2c4a:	e8 2f       	mov	r30, r24
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	ee 0f       	add	r30, r30
    2c50:	ff 1f       	adc	r31, r31
    2c52:	ea 5f       	subi	r30, 0xFA	; 250
    2c54:	fd 4f       	sbci	r31, 0xFD	; 253
    2c56:	71 83       	std	Z+1, r23	; 0x01
    2c58:	60 83       	st	Z, r22
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	87 30       	cpi	r24, 0x07	; 7
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <attachInterrupt+0x1e>
    2c60:	3d c0       	rjmp	.+122    	; 0x2cdc <attachInterrupt+0x98>
    2c62:	e8 2f       	mov	r30, r24
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	88 27       	eor	r24, r24
    2c68:	e7 5c       	subi	r30, 0xC7	; 199
    2c6a:	f9 4e       	sbci	r31, 0xE9	; 233
    2c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c6e:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__tablejump2__>
    2c72:	76 16       	cp	r7, r22
    2c74:	40 16       	cp	r4, r16
    2c76:	48 16       	cp	r4, r24
    2c78:	54 16       	cp	r5, r20
    2c7a:	61 16       	cp	r6, r17
    2c7c:	82 16       	cp	r8, r18
    2c7e:	8f 16       	cp	r8, r31
    2c80:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2c84:	8c 7f       	andi	r24, 0xFC	; 252
    2c86:	48 2b       	or	r20, r24
    2c88:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2c8c:	e8 9a       	sbi	0x1d, 0	; 29
    2c8e:	08 95       	ret
    2c90:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2c94:	83 7f       	andi	r24, 0xF3	; 243
    2c96:	44 0f       	add	r20, r20
    2c98:	55 1f       	adc	r21, r21
    2c9a:	44 0f       	add	r20, r20
    2c9c:	55 1f       	adc	r21, r21
    2c9e:	48 2b       	or	r20, r24
    2ca0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2ca4:	e9 9a       	sbi	0x1d, 1	; 29
    2ca6:	08 95       	ret
    2ca8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2cac:	8f 7c       	andi	r24, 0xCF	; 207
    2cae:	74 e0       	ldi	r23, 0x04	; 4
    2cb0:	44 0f       	add	r20, r20
    2cb2:	55 1f       	adc	r21, r21
    2cb4:	7a 95       	dec	r23
    2cb6:	e1 f7       	brne	.-8      	; 0x2cb0 <attachInterrupt+0x6c>
    2cb8:	48 2b       	or	r20, r24
    2cba:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2cbe:	ea 9a       	sbi	0x1d, 2	; 29
    2cc0:	08 95       	ret
    2cc2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2cc6:	8f 73       	andi	r24, 0x3F	; 63
    2cc8:	66 e0       	ldi	r22, 0x06	; 6
    2cca:	44 0f       	add	r20, r20
    2ccc:	55 1f       	adc	r21, r21
    2cce:	6a 95       	dec	r22
    2cd0:	e1 f7       	brne	.-8      	; 0x2cca <attachInterrupt+0x86>
    2cd2:	48 2b       	or	r20, r24
    2cd4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    2cd8:	eb 9a       	sbi	0x1d, 3	; 29
    2cda:	08 95       	ret
    2cdc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2ce0:	8c 7f       	andi	r24, 0xFC	; 252
    2ce2:	48 2b       	or	r20, r24
    2ce4:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2ce8:	ec 9a       	sbi	0x1d, 4	; 29
    2cea:	08 95       	ret
    2cec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2cf0:	83 7f       	andi	r24, 0xF3	; 243
    2cf2:	44 0f       	add	r20, r20
    2cf4:	55 1f       	adc	r21, r21
    2cf6:	44 0f       	add	r20, r20
    2cf8:	55 1f       	adc	r21, r21
    2cfa:	48 2b       	or	r20, r24
    2cfc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2d00:	ed 9a       	sbi	0x1d, 5	; 29
    2d02:	08 95       	ret
    2d04:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2d08:	8f 7c       	andi	r24, 0xCF	; 207
    2d0a:	24 e0       	ldi	r18, 0x04	; 4
    2d0c:	44 0f       	add	r20, r20
    2d0e:	55 1f       	adc	r21, r21
    2d10:	2a 95       	dec	r18
    2d12:	e1 f7       	brne	.-8      	; 0x2d0c <attachInterrupt+0xc8>
    2d14:	48 2b       	or	r20, r24
    2d16:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2d1a:	ee 9a       	sbi	0x1d, 6	; 29
    2d1c:	08 95       	ret
    2d1e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2d22:	8f 73       	andi	r24, 0x3F	; 63
    2d24:	96 e0       	ldi	r25, 0x06	; 6
    2d26:	44 0f       	add	r20, r20
    2d28:	55 1f       	adc	r21, r21
    2d2a:	9a 95       	dec	r25
    2d2c:	e1 f7       	brne	.-8      	; 0x2d26 <attachInterrupt+0xe2>
    2d2e:	48 2b       	or	r20, r24
    2d30:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    2d34:	ef 9a       	sbi	0x1d, 7	; 29
    2d36:	08 95       	ret

00002d38 <__vector_1>:
__vector_1():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:438
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega640, ATmega1280, ATmega2560 - Arduino MEGA compatible pinout
#elif defined(MEGACORE_100_PIN_MEGA_PINOUT) && (defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__))
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    2d38:	1f 92       	push	r1
    2d3a:	0f 92       	push	r0
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	0f 92       	push	r0
    2d40:	11 24       	eor	r1, r1
    2d42:	0b b6       	in	r0, 0x3b	; 59
    2d44:	0f 92       	push	r0
    2d46:	2f 93       	push	r18
    2d48:	3f 93       	push	r19
    2d4a:	4f 93       	push	r20
    2d4c:	5f 93       	push	r21
    2d4e:	6f 93       	push	r22
    2d50:	7f 93       	push	r23
    2d52:	8f 93       	push	r24
    2d54:	9f 93       	push	r25
    2d56:	af 93       	push	r26
    2d58:	bf 93       	push	r27
    2d5a:	ef 93       	push	r30
    2d5c:	ff 93       	push	r31
    2d5e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x4>
    2d62:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x5>
    2d66:	19 95       	eicall
    2d68:	ff 91       	pop	r31
    2d6a:	ef 91       	pop	r30
    2d6c:	bf 91       	pop	r27
    2d6e:	af 91       	pop	r26
    2d70:	9f 91       	pop	r25
    2d72:	8f 91       	pop	r24
    2d74:	7f 91       	pop	r23
    2d76:	6f 91       	pop	r22
    2d78:	5f 91       	pop	r21
    2d7a:	4f 91       	pop	r20
    2d7c:	3f 91       	pop	r19
    2d7e:	2f 91       	pop	r18
    2d80:	0f 90       	pop	r0
    2d82:	0b be       	out	0x3b, r0	; 59
    2d84:	0f 90       	pop	r0
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	0f 90       	pop	r0
    2d8a:	1f 90       	pop	r1
    2d8c:	18 95       	reti

00002d8e <__vector_2>:
__vector_2():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:439
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    2d8e:	1f 92       	push	r1
    2d90:	0f 92       	push	r0
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	0f 92       	push	r0
    2d96:	11 24       	eor	r1, r1
    2d98:	0b b6       	in	r0, 0x3b	; 59
    2d9a:	0f 92       	push	r0
    2d9c:	2f 93       	push	r18
    2d9e:	3f 93       	push	r19
    2da0:	4f 93       	push	r20
    2da2:	5f 93       	push	r21
    2da4:	6f 93       	push	r22
    2da6:	7f 93       	push	r23
    2da8:	8f 93       	push	r24
    2daa:	9f 93       	push	r25
    2dac:	af 93       	push	r26
    2dae:	bf 93       	push	r27
    2db0:	ef 93       	push	r30
    2db2:	ff 93       	push	r31
    2db4:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x6>
    2db8:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x7>
    2dbc:	19 95       	eicall
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	bf 91       	pop	r27
    2dc4:	af 91       	pop	r26
    2dc6:	9f 91       	pop	r25
    2dc8:	8f 91       	pop	r24
    2dca:	7f 91       	pop	r23
    2dcc:	6f 91       	pop	r22
    2dce:	5f 91       	pop	r21
    2dd0:	4f 91       	pop	r20
    2dd2:	3f 91       	pop	r19
    2dd4:	2f 91       	pop	r18
    2dd6:	0f 90       	pop	r0
    2dd8:	0b be       	out	0x3b, r0	; 59
    2dda:	0f 90       	pop	r0
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	0f 90       	pop	r0
    2de0:	1f 90       	pop	r1
    2de2:	18 95       	reti

00002de4 <__vector_3>:
__vector_3():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:440
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    2de4:	1f 92       	push	r1
    2de6:	0f 92       	push	r0
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	0f 92       	push	r0
    2dec:	11 24       	eor	r1, r1
    2dee:	0b b6       	in	r0, 0x3b	; 59
    2df0:	0f 92       	push	r0
    2df2:	2f 93       	push	r18
    2df4:	3f 93       	push	r19
    2df6:	4f 93       	push	r20
    2df8:	5f 93       	push	r21
    2dfa:	6f 93       	push	r22
    2dfc:	7f 93       	push	r23
    2dfe:	8f 93       	push	r24
    2e00:	9f 93       	push	r25
    2e02:	af 93       	push	r26
    2e04:	bf 93       	push	r27
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
    2e0a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0x8>
    2e0e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0x9>
    2e12:	19 95       	eicall
    2e14:	ff 91       	pop	r31
    2e16:	ef 91       	pop	r30
    2e18:	bf 91       	pop	r27
    2e1a:	af 91       	pop	r26
    2e1c:	9f 91       	pop	r25
    2e1e:	8f 91       	pop	r24
    2e20:	7f 91       	pop	r23
    2e22:	6f 91       	pop	r22
    2e24:	5f 91       	pop	r21
    2e26:	4f 91       	pop	r20
    2e28:	3f 91       	pop	r19
    2e2a:	2f 91       	pop	r18
    2e2c:	0f 90       	pop	r0
    2e2e:	0b be       	out	0x3b, r0	; 59
    2e30:	0f 90       	pop	r0
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	0f 90       	pop	r0
    2e36:	1f 90       	pop	r1
    2e38:	18 95       	reti

00002e3a <__vector_4>:
__vector_4():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:441
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    2e3a:	1f 92       	push	r1
    2e3c:	0f 92       	push	r0
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	0f 92       	push	r0
    2e42:	11 24       	eor	r1, r1
    2e44:	0b b6       	in	r0, 0x3b	; 59
    2e46:	0f 92       	push	r0
    2e48:	2f 93       	push	r18
    2e4a:	3f 93       	push	r19
    2e4c:	4f 93       	push	r20
    2e4e:	5f 93       	push	r21
    2e50:	6f 93       	push	r22
    2e52:	7f 93       	push	r23
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25
    2e58:	af 93       	push	r26
    2e5a:	bf 93       	push	r27
    2e5c:	ef 93       	push	r30
    2e5e:	ff 93       	push	r31
    2e60:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xa>
    2e64:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xb>
    2e68:	19 95       	eicall
    2e6a:	ff 91       	pop	r31
    2e6c:	ef 91       	pop	r30
    2e6e:	bf 91       	pop	r27
    2e70:	af 91       	pop	r26
    2e72:	9f 91       	pop	r25
    2e74:	8f 91       	pop	r24
    2e76:	7f 91       	pop	r23
    2e78:	6f 91       	pop	r22
    2e7a:	5f 91       	pop	r21
    2e7c:	4f 91       	pop	r20
    2e7e:	3f 91       	pop	r19
    2e80:	2f 91       	pop	r18
    2e82:	0f 90       	pop	r0
    2e84:	0b be       	out	0x3b, r0	; 59
    2e86:	0f 90       	pop	r0
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	0f 90       	pop	r0
    2e8c:	1f 90       	pop	r1
    2e8e:	18 95       	reti

00002e90 <__vector_5>:
__vector_5():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:442
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    2e90:	1f 92       	push	r1
    2e92:	0f 92       	push	r0
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	0f 92       	push	r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	0b b6       	in	r0, 0x3b	; 59
    2e9c:	0f 92       	push	r0
    2e9e:	2f 93       	push	r18
    2ea0:	3f 93       	push	r19
    2ea2:	4f 93       	push	r20
    2ea4:	5f 93       	push	r21
    2ea6:	6f 93       	push	r22
    2ea8:	7f 93       	push	r23
    2eaa:	8f 93       	push	r24
    2eac:	9f 93       	push	r25
    2eae:	af 93       	push	r26
    2eb0:	bf 93       	push	r27
    2eb2:	ef 93       	push	r30
    2eb4:	ff 93       	push	r31
    2eb6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc>
    2eba:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x1>
    2ebe:	19 95       	eicall
    2ec0:	ff 91       	pop	r31
    2ec2:	ef 91       	pop	r30
    2ec4:	bf 91       	pop	r27
    2ec6:	af 91       	pop	r26
    2ec8:	9f 91       	pop	r25
    2eca:	8f 91       	pop	r24
    2ecc:	7f 91       	pop	r23
    2ece:	6f 91       	pop	r22
    2ed0:	5f 91       	pop	r21
    2ed2:	4f 91       	pop	r20
    2ed4:	3f 91       	pop	r19
    2ed6:	2f 91       	pop	r18
    2ed8:	0f 90       	pop	r0
    2eda:	0b be       	out	0x3b, r0	; 59
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	0f 90       	pop	r0
    2ee2:	1f 90       	pop	r1
    2ee4:	18 95       	reti

00002ee6 <__vector_6>:
__vector_6():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:443
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    2ee6:	1f 92       	push	r1
    2ee8:	0f 92       	push	r0
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	0f 92       	push	r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	0b b6       	in	r0, 0x3b	; 59
    2ef2:	0f 92       	push	r0
    2ef4:	2f 93       	push	r18
    2ef6:	3f 93       	push	r19
    2ef8:	4f 93       	push	r20
    2efa:	5f 93       	push	r21
    2efc:	6f 93       	push	r22
    2efe:	7f 93       	push	r23
    2f00:	8f 93       	push	r24
    2f02:	9f 93       	push	r25
    2f04:	af 93       	push	r26
    2f06:	bf 93       	push	r27
    2f08:	ef 93       	push	r30
    2f0a:	ff 93       	push	r31
    2f0c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x2>
    2f10:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x3>
    2f14:	19 95       	eicall
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	bf 91       	pop	r27
    2f1c:	af 91       	pop	r26
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	7f 91       	pop	r23
    2f24:	6f 91       	pop	r22
    2f26:	5f 91       	pop	r21
    2f28:	4f 91       	pop	r20
    2f2a:	3f 91       	pop	r19
    2f2c:	2f 91       	pop	r18
    2f2e:	0f 90       	pop	r0
    2f30:	0b be       	out	0x3b, r0	; 59
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <__vector_7>:
__vector_7():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:444
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    2f3c:	1f 92       	push	r1
    2f3e:	0f 92       	push	r0
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	0f 92       	push	r0
    2f44:	11 24       	eor	r1, r1
    2f46:	0b b6       	in	r0, 0x3b	; 59
    2f48:	0f 92       	push	r0
    2f4a:	2f 93       	push	r18
    2f4c:	3f 93       	push	r19
    2f4e:	4f 93       	push	r20
    2f50:	5f 93       	push	r21
    2f52:	6f 93       	push	r22
    2f54:	7f 93       	push	r23
    2f56:	8f 93       	push	r24
    2f58:	9f 93       	push	r25
    2f5a:	af 93       	push	r26
    2f5c:	bf 93       	push	r27
    2f5e:	ef 93       	push	r30
    2f60:	ff 93       	push	r31
    2f62:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xc>
    2f66:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xd>
    2f6a:	19 95       	eicall
    2f6c:	ff 91       	pop	r31
    2f6e:	ef 91       	pop	r30
    2f70:	bf 91       	pop	r27
    2f72:	af 91       	pop	r26
    2f74:	9f 91       	pop	r25
    2f76:	8f 91       	pop	r24
    2f78:	7f 91       	pop	r23
    2f7a:	6f 91       	pop	r22
    2f7c:	5f 91       	pop	r21
    2f7e:	4f 91       	pop	r20
    2f80:	3f 91       	pop	r19
    2f82:	2f 91       	pop	r18
    2f84:	0f 90       	pop	r0
    2f86:	0b be       	out	0x3b, r0	; 59
    2f88:	0f 90       	pop	r0
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	0f 90       	pop	r0
    2f8e:	1f 90       	pop	r1
    2f90:	18 95       	reti

00002f92 <__vector_8>:
__vector_8():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:445
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    2f92:	1f 92       	push	r1
    2f94:	0f 92       	push	r0
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	0f 92       	push	r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	0b b6       	in	r0, 0x3b	; 59
    2f9e:	0f 92       	push	r0
    2fa0:	2f 93       	push	r18
    2fa2:	3f 93       	push	r19
    2fa4:	4f 93       	push	r20
    2fa6:	5f 93       	push	r21
    2fa8:	6f 93       	push	r22
    2faa:	7f 93       	push	r23
    2fac:	8f 93       	push	r24
    2fae:	9f 93       	push	r25
    2fb0:	af 93       	push	r26
    2fb2:	bf 93       	push	r27
    2fb4:	ef 93       	push	r30
    2fb6:	ff 93       	push	r31
    2fb8:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <intFunc+0xe>
    2fbc:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <intFunc+0xf>
    2fc0:	19 95       	eicall
    2fc2:	ff 91       	pop	r31
    2fc4:	ef 91       	pop	r30
    2fc6:	bf 91       	pop	r27
    2fc8:	af 91       	pop	r26
    2fca:	9f 91       	pop	r25
    2fcc:	8f 91       	pop	r24
    2fce:	7f 91       	pop	r23
    2fd0:	6f 91       	pop	r22
    2fd2:	5f 91       	pop	r21
    2fd4:	4f 91       	pop	r20
    2fd6:	3f 91       	pop	r19
    2fd8:	2f 91       	pop	r18
    2fda:	0f 90       	pop	r0
    2fdc:	0b be       	out	0x3b, r0	; 59
    2fde:	0f 90       	pop	r0
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	0f 90       	pop	r0
    2fe4:	1f 90       	pop	r1
    2fe6:	18 95       	reti

00002fe8 <initVariant>:
initVariant():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2fe8:	08 95       	ret

00002fea <main>:
main():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2fea:	0e 94 b8 18 	call	0x3170	; 0x3170 <init>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2fee:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <initVariant>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2ff2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <setup>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2ff6:	c1 ef       	ldi	r28, 0xF1	; 241
    2ff8:	df e0       	ldi	r29, 0x0F	; 15
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2ffa:	0e 94 b0 07 	call	0xf60	; 0xf60 <loop>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2ffe:	20 97       	sbiw	r28, 0x00	; 0
    3000:	e1 f3       	breq	.-8      	; 0x2ffa <main+0x10>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    3002:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <serialEventRun()>
    3006:	f9 cf       	rjmp	.-14     	; 0x2ffa <main+0x10>

00003008 <__vector_23>:
__vector_23():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    3008:	1f 92       	push	r1
    300a:	0f 92       	push	r0
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	0f 92       	push	r0
    3010:	11 24       	eor	r1, r1
    3012:	2f 93       	push	r18
    3014:	3f 93       	push	r19
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
    301e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <timer0_millis>
    3022:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <timer0_millis+0x1>
    3026:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <timer0_millis+0x2>
    302a:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <timer0_millis+0x3>
    302e:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <timer0_fract>
    3032:	2c e0       	ldi	r18, 0x0C	; 12
    3034:	23 0f       	add	r18, r19
    3036:	2d 37       	cpi	r18, 0x7D	; 125
    3038:	68 f1       	brcs	.+90     	; 0x3094 <__vector_23+0x8c>
    303a:	2f e8       	ldi	r18, 0x8F	; 143
    303c:	23 0f       	add	r18, r19
    303e:	05 96       	adiw	r24, 0x05	; 5
    3040:	a1 1d       	adc	r26, r1
    3042:	b1 1d       	adc	r27, r1
    3044:	20 93 51 05 	sts	0x0551, r18	; 0x800551 <timer0_fract>
    3048:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <timer0_millis>
    304c:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <timer0_millis+0x1>
    3050:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <timer0_millis+0x2>
    3054:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <timer0_millis+0x3>
    3058:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <timer0_overflow_count>
    305c:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <timer0_overflow_count+0x1>
    3060:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <timer0_overflow_count+0x2>
    3064:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <timer0_overflow_count+0x3>
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	a1 1d       	adc	r26, r1
    306c:	b1 1d       	adc	r27, r1
    306e:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <timer0_overflow_count>
    3072:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <timer0_overflow_count+0x1>
    3076:	a0 93 4f 05 	sts	0x054F, r26	; 0x80054f <timer0_overflow_count+0x2>
    307a:	b0 93 50 05 	sts	0x0550, r27	; 0x800550 <timer0_overflow_count+0x3>
    307e:	bf 91       	pop	r27
    3080:	af 91       	pop	r26
    3082:	9f 91       	pop	r25
    3084:	8f 91       	pop	r24
    3086:	3f 91       	pop	r19
    3088:	2f 91       	pop	r18
    308a:	0f 90       	pop	r0
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	0f 90       	pop	r0
    3090:	1f 90       	pop	r1
    3092:	18 95       	reti
    3094:	04 96       	adiw	r24, 0x04	; 4
    3096:	a1 1d       	adc	r26, r1
    3098:	b1 1d       	adc	r27, r1
    309a:	d4 cf       	rjmp	.-88     	; 0x3044 <__vector_23+0x3c>

0000309c <millis>:
millis():
    309c:	2f b7       	in	r18, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <timer0_millis>
    30a4:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <timer0_millis+0x1>
    30a8:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <timer0_millis+0x2>
    30ac:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <timer0_millis+0x3>
    30b0:	2f bf       	out	0x3f, r18	; 63
    30b2:	08 95       	ret

000030b4 <micros>:
micros():
    30b4:	3f b7       	in	r19, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <timer0_overflow_count>
    30bc:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <timer0_overflow_count+0x1>
    30c0:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <timer0_overflow_count+0x2>
    30c4:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <timer0_overflow_count+0x3>
    30c8:	26 b5       	in	r18, 0x26	; 38
    30ca:	a8 9b       	sbis	0x15, 0	; 21
    30cc:	05 c0       	rjmp	.+10     	; 0x30d8 <micros+0x24>
    30ce:	2f 3f       	cpi	r18, 0xFF	; 255
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <micros+0x24>
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	a1 1d       	adc	r26, r1
    30d6:	b1 1d       	adc	r27, r1
    30d8:	3f bf       	out	0x3f, r19	; 63
    30da:	ba 2f       	mov	r27, r26
    30dc:	a9 2f       	mov	r26, r25
    30de:	98 2f       	mov	r25, r24
    30e0:	88 27       	eor	r24, r24
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	62 0f       	add	r22, r18
    30e8:	71 1d       	adc	r23, r1
    30ea:	81 1d       	adc	r24, r1
    30ec:	91 1d       	adc	r25, r1
    30ee:	44 e0       	ldi	r20, 0x04	; 4
    30f0:	66 0f       	add	r22, r22
    30f2:	77 1f       	adc	r23, r23
    30f4:	88 1f       	adc	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	4a 95       	dec	r20
    30fa:	d1 f7       	brne	.-12     	; 0x30f0 <micros+0x3c>
    30fc:	08 95       	ret

000030fe <delay>:
delay():
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	6b 01       	movw	r12, r22
    3110:	7c 01       	movw	r14, r24
    3112:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    3116:	4b 01       	movw	r8, r22
    3118:	5c 01       	movw	r10, r24
    311a:	c1 14       	cp	r12, r1
    311c:	d1 04       	cpc	r13, r1
    311e:	e1 04       	cpc	r14, r1
    3120:	f1 04       	cpc	r15, r1
    3122:	e9 f0       	breq	.+58     	; 0x315e <delay+0x60>
    3124:	0e 94 20 1a 	call	0x3440	; 0x3440 <yield>
    3128:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <micros>
    312c:	68 19       	sub	r22, r8
    312e:	79 09       	sbc	r23, r9
    3130:	8a 09       	sbc	r24, r10
    3132:	9b 09       	sbc	r25, r11
    3134:	68 3e       	cpi	r22, 0xE8	; 232
    3136:	73 40       	sbci	r23, 0x03	; 3
    3138:	81 05       	cpc	r24, r1
    313a:	91 05       	cpc	r25, r1
    313c:	70 f3       	brcs	.-36     	; 0x311a <delay+0x1c>
    313e:	21 e0       	ldi	r18, 0x01	; 1
    3140:	c2 1a       	sub	r12, r18
    3142:	d1 08       	sbc	r13, r1
    3144:	e1 08       	sbc	r14, r1
    3146:	f1 08       	sbc	r15, r1
    3148:	88 ee       	ldi	r24, 0xE8	; 232
    314a:	88 0e       	add	r8, r24
    314c:	83 e0       	ldi	r24, 0x03	; 3
    314e:	98 1e       	adc	r9, r24
    3150:	a1 1c       	adc	r10, r1
    3152:	b1 1c       	adc	r11, r1
    3154:	c1 14       	cp	r12, r1
    3156:	d1 04       	cpc	r13, r1
    3158:	e1 04       	cpc	r14, r1
    315a:	f1 04       	cpc	r15, r1
    315c:	29 f7       	brne	.-54     	; 0x3128 <delay+0x2a>
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	bf 90       	pop	r11
    3168:	af 90       	pop	r10
    316a:	9f 90       	pop	r9
    316c:	8f 90       	pop	r8
    316e:	08 95       	ret

00003170 <init>:
init():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3170:	78 94       	sei
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:949

  // Set internal oscillator prescaler if defined (in boards.txt)
#if defined(CLKPR) && defined(OSC_PRESCALER)
  CLKPR = 0x80;          // Enable prescaler
    3172:	e1 e6       	ldi	r30, 0x61	; 97
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 e8       	ldi	r24, 0x80	; 128
    3178:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:950
  CLKPR = OSC_PRESCALER; // Set prescaler
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    317e:	84 b5       	in	r24, 0x24	; 36
    3180:	83 60       	ori	r24, 0x03	; 3
    3182:	84 bd       	out	0x24, r24	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3184:	85 b5       	in	r24, 0x25	; 37
    3186:	83 60       	ori	r24, 0x03	; 3
    3188:	85 bd       	out	0x25, r24	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    318a:	ee e6       	ldi	r30, 0x6E	; 110
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	81 60       	ori	r24, 0x01	; 1
    3192:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    319a:	e0 e8       	ldi	r30, 0x80	; 128
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	81 60       	ori	r24, 0x01	; 1
    31a2:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    31a4:	e1 eb       	ldi	r30, 0xB1	; 177
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	84 60       	ori	r24, 0x04	; 4
    31ac:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    31ae:	e0 eb       	ldi	r30, 0xB0	; 176
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	81 60       	ori	r24, 0x01	; 1
    31b6:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    31b8:	e1 e9       	ldi	r30, 0x91	; 145
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	83 60       	ori	r24, 0x03	; 3
    31c0:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    31c2:	e0 e9       	ldi	r30, 0x90	; 144
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	81 60       	ori	r24, 0x01	; 1
    31ca:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    31cc:	e1 ea       	ldi	r30, 0xA1	; 161
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	83 60       	ori	r24, 0x03	; 3
    31d4:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    31d6:	e0 ea       	ldi	r30, 0xA0	; 160
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	81 60       	ori	r24, 0x01	; 1
    31de:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    31e0:	e1 e2       	ldi	r30, 0x21	; 33
    31e2:	f1 e0       	ldi	r31, 0x01	; 1
    31e4:	80 81       	ld	r24, Z
    31e6:	83 60       	ori	r24, 0x03	; 3
    31e8:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    31ea:	e0 e2       	ldi	r30, 0x20	; 32
    31ec:	f1 e0       	ldi	r31, 0x01	; 1
    31ee:	80 81       	ld	r24, Z
    31f0:	81 60       	ori	r24, 0x01	; 1
    31f2:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1054
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
  #elif F_CPU >= 4000000 // 4 MHz / 32 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS0) | _BV(ADEN);
    31f4:	85 e8       	ldi	r24, 0x85	; 133
    31f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    31fa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    31fe:	08 95       	ret

00003200 <analogRead>:
analogRead():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    3200:	80 31       	cpi	r24, 0x10	; 16
    3202:	20 f0       	brcs	.+8      	; 0x320c <analogRead+0xc>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    3204:	85 33       	cpi	r24, 0x35	; 53
    3206:	08 f4       	brcc	.+2      	; 0x320a <analogRead+0xa>
    3208:	85 e3       	ldi	r24, 0x35	; 53
    320a:	86 53       	subi	r24, 0x36	; 54
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:62 (discriminator 4)
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    320c:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    3210:	98 2f       	mov	r25, r24
    3212:	98 70       	andi	r25, 0x08	; 8
    3214:	27 7f       	andi	r18, 0xF7	; 247
    3216:	92 2b       	or	r25, r18
    3218:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    321c:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <analog_reference>
    3220:	90 e4       	ldi	r25, 0x40	; 64
    3222:	29 9f       	mul	r18, r25
    3224:	90 01       	movw	r18, r0
    3226:	11 24       	eor	r1, r1
    3228:	87 70       	andi	r24, 0x07	; 7
    322a:	82 2b       	or	r24, r18
    322c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    3230:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    3234:	80 64       	ori	r24, 0x40	; 64
    3236:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    323a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    323e:	86 fd       	sbrc	r24, 6
    3240:	fc cf       	rjmp	.-8      	; 0x323a <analogRead+0x3a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    3242:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    3246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    324a:	08 95       	ret

0000324c <turnOffPWM>:
turnOffPWM():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    324c:	82 50       	subi	r24, 0x02	; 2
    324e:	82 31       	cpi	r24, 0x12	; 18
    3250:	08 f0       	brcs	.+2      	; 0x3254 <turnOffPWM+0x8>
    3252:	5f c0       	rjmp	.+190    	; 0x3312 <turnOffPWM+0xc6>
    3254:	e8 2f       	mov	r30, r24
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	88 27       	eor	r24, r24
    325a:	ee 5c       	subi	r30, 0xCE	; 206
    325c:	f6 4e       	sbci	r31, 0xE6	; 230
    325e:	8f 4f       	sbci	r24, 0xFF	; 255
    3260:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__tablejump2__>
    3264:	86 19       	sub	r24, r6
    3266:	8a 19       	sub	r24, r10
    3268:	44 19       	sub	r20, r4
    326a:	4a 19       	sub	r20, r10
    326c:	4e 19       	sub	r20, r14
    326e:	89 19       	sub	r24, r9
    3270:	52 19       	sub	r21, r2
    3272:	58 19       	sub	r21, r8
    3274:	5c 19       	sub	r21, r12
    3276:	62 19       	sub	r22, r2
    3278:	66 19       	sub	r22, r6
    327a:	6a 19       	sub	r22, r10
    327c:	70 19       	sub	r23, r0
    327e:	74 19       	sub	r23, r4
    3280:	89 19       	sub	r24, r9
    3282:	78 19       	sub	r23, r8
    3284:	7e 19       	sub	r23, r14
    3286:	82 19       	sub	r24, r2
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    3288:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    328c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    328e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    3292:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    3294:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3298:	8f 7d       	andi	r24, 0xDF	; 223
    329a:	f9 cf       	rjmp	.-14     	; 0x328e <turnOffPWM+0x42>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    329c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    32a0:	87 7f       	andi	r24, 0xF7	; 247
    32a2:	f5 cf       	rjmp	.-22     	; 0x328e <turnOffPWM+0x42>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    32a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    32a8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    32aa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    32ae:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    32b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    32b4:	8f 7d       	andi	r24, 0xDF	; 223
    32b6:	f9 cf       	rjmp	.-14     	; 0x32aa <turnOffPWM+0x5e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    32b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    32bc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    32be:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    32c2:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    32c4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    32c8:	8f 7d       	andi	r24, 0xDF	; 223
    32ca:	f9 cf       	rjmp	.-14     	; 0x32be <turnOffPWM+0x72>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    32cc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    32d0:	87 7f       	andi	r24, 0xF7	; 247
    32d2:	f5 cf       	rjmp	.-22     	; 0x32be <turnOffPWM+0x72>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    32d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    32d8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    32da:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    32de:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    32e0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    32e4:	8f 7d       	andi	r24, 0xDF	; 223
    32e6:	f9 cf       	rjmp	.-14     	; 0x32da <turnOffPWM+0x8e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    32e8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    32ec:	87 7f       	andi	r24, 0xF7	; 247
    32ee:	f5 cf       	rjmp	.-22     	; 0x32da <turnOffPWM+0x8e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    32f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    32f4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    32f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    32fa:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    32fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3300:	8f 7d       	andi	r24, 0xDF	; 223
    3302:	f9 cf       	rjmp	.-14     	; 0x32f6 <turnOffPWM+0xaa>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    3304:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3308:	87 7f       	andi	r24, 0xF7	; 247
    330a:	f5 cf       	rjmp	.-22     	; 0x32f6 <turnOffPWM+0xaa>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    330c:	84 b5       	in	r24, 0x24	; 36
    330e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    3310:	84 bd       	out	0x24, r24	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    3312:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    3314:	84 b5       	in	r24, 0x24	; 36
    3316:	8f 7d       	andi	r24, 0xDF	; 223
    3318:	fb cf       	rjmp	.-10     	; 0x3310 <turnOffPWM+0xc4>

0000331a <pinMode>:
pinMode():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	fc 01       	movw	r30, r24
    3322:	e5 5b       	subi	r30, 0xB5	; 181
    3324:	fd 4f       	sbci	r31, 0xFD	; 253
    3326:	24 91       	lpm	r18, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    3328:	8f 55       	subi	r24, 0x5F	; 95
    332a:	9d 4f       	sbci	r25, 0xFD	; 253
    332c:	fc 01       	movw	r30, r24
    332e:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    3330:	88 23       	and	r24, r24
    3332:	c9 f0       	breq	.+50     	; 0x3366 <pinMode+0x4c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	fc 01       	movw	r30, r24
    333c:	e5 5d       	subi	r30, 0xD5	; 213
    333e:	fc 4f       	sbci	r31, 0xFC	; 252
    3340:	a5 91       	lpm	r26, Z+
    3342:	b4 91       	lpm	r27, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    3344:	fc 01       	movw	r30, r24
    3346:	ef 5e       	subi	r30, 0xEF	; 239
    3348:	fc 4f       	sbci	r31, 0xFC	; 252
    334a:	c5 91       	lpm	r28, Z+
    334c:	d4 91       	lpm	r29, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    334e:	61 11       	cpse	r22, r1
    3350:	0d c0       	rjmp	.+26     	; 0x336c <pinMode+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    3352:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    3354:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    3356:	8c 91       	ld	r24, X
    3358:	20 95       	com	r18
    335a:	82 23       	and	r24, r18
    335c:	8c 93       	st	X, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    335e:	88 81       	ld	r24, Y
    3360:	28 23       	and	r18, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    3362:	28 83       	st	Y, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    3364:	9f bf       	out	0x3f, r25	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    336c:	62 30       	cpi	r22, 0x02	; 2
    336e:	51 f4       	brne	.+20     	; 0x3384 <pinMode+0x6a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    3370:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    3372:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    3374:	3c 91       	ld	r19, X
    3376:	82 2f       	mov	r24, r18
    3378:	80 95       	com	r24
    337a:	83 23       	and	r24, r19
    337c:	8c 93       	st	X, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    337e:	e8 81       	ld	r30, Y
    3380:	2e 2b       	or	r18, r30
    3382:	ef cf       	rjmp	.-34     	; 0x3362 <pinMode+0x48>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    3384:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    3386:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    3388:	ec 91       	ld	r30, X
    338a:	2e 2b       	or	r18, r30
    338c:	2c 93       	st	X, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    338e:	8f bf       	out	0x3f, r24	; 63
    3390:	ea cf       	rjmp	.-44     	; 0x3366 <pinMode+0x4c>

00003392 <digitalWrite>:
digitalWrite():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	f9 01       	movw	r30, r18
    339e:	eb 50       	subi	r30, 0x0B	; 11
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    33a4:	f9 01       	movw	r30, r18
    33a6:	e5 5b       	subi	r30, 0xB5	; 181
    33a8:	fd 4f       	sbci	r31, 0xFD	; 253
    33aa:	d4 91       	lpm	r29, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    33ac:	f9 01       	movw	r30, r18
    33ae:	ef 55       	subi	r30, 0x5F	; 95
    33b0:	fd 4f       	sbci	r31, 0xFD	; 253
    33b2:	c4 91       	lpm	r28, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    33b4:	cc 23       	and	r28, r28
    33b6:	a9 f0       	breq	.+42     	; 0x33e2 <digitalWrite+0x50>
    33b8:	16 2f       	mov	r17, r22
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33ba:	81 11       	cpse	r24, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    33bc:	0e 94 26 19 	call	0x324c	; 0x324c <turnOffPWM>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    33c0:	ec 2f       	mov	r30, r28
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	ef 5e       	subi	r30, 0xEF	; 239
    33ca:	fc 4f       	sbci	r31, 0xFC	; 252
    33cc:	a5 91       	lpm	r26, Z+
    33ce:	b4 91       	lpm	r27, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    33d0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    33d2:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    33d4:	ec 91       	ld	r30, X
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    33d6:	11 11       	cpse	r17, r1
    33d8:	08 c0       	rjmp	.+16     	; 0x33ea <digitalWrite+0x58>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    33da:	d0 95       	com	r29
    33dc:	de 23       	and	r29, r30
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    33de:	dc 93       	st	X, r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    33e0:	8f bf       	out	0x3f, r24	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    33ea:	de 2b       	or	r29, r30
    33ec:	f8 cf       	rjmp	.-16     	; 0x33de <digitalWrite+0x4c>

000033ee <digitalRead>:
digitalRead():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	f9 01       	movw	r30, r18
    33f8:	eb 50       	subi	r30, 0x0B	; 11
    33fa:	fe 4f       	sbci	r31, 0xFE	; 254
    33fc:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    33fe:	f9 01       	movw	r30, r18
    3400:	e5 5b       	subi	r30, 0xB5	; 181
    3402:	fd 4f       	sbci	r31, 0xFD	; 253
    3404:	d4 91       	lpm	r29, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    3406:	f9 01       	movw	r30, r18
    3408:	ef 55       	subi	r30, 0x5F	; 95
    340a:	fd 4f       	sbci	r31, 0xFD	; 253
    340c:	c4 91       	lpm	r28, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    340e:	cc 23       	and	r28, r28
    3410:	a1 f0       	breq	.+40     	; 0x343a <digitalRead+0x4c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3412:	81 11       	cpse	r24, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    3414:	0e 94 26 19 	call	0x324c	; 0x324c <turnOffPWM>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    3418:	ec 2f       	mov	r30, r28
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31
    3420:	e9 50       	subi	r30, 0x09	; 9
    3422:	fd 4f       	sbci	r31, 0xFD	; 253
    3424:	a5 91       	lpm	r26, Z+
    3426:	b4 91       	lpm	r27, Z
    3428:	ec 91       	ld	r30, X
    342a:	ed 23       	and	r30, r29
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	09 f4       	brne	.+2      	; 0x3434 <digitalRead+0x46>
    3432:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	fa cf       	rjmp	.-12     	; 0x3434 <digitalRead+0x46>

00003440 <yield>:
__empty():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    3440:	08 95       	ret

00003442 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3442:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3444:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3446:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3448:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    344a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    344c:	0d c0       	rjmp	.+26     	; 0x3468 <__udivmodsi4_ep>

0000344e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    344e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3450:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3452:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3454:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3456:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3458:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    345a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    345c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    345e:	20 f0       	brcs	.+8      	; 0x3468 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3460:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3462:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3464:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3466:	f5 0b       	sbc	r31, r21

00003468 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3468:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    346a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    346c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    346e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3470:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3472:	69 f7       	brne	.-38     	; 0x344e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3474:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3476:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3478:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    347a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    347c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    347e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3480:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3482:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3484:	08 95       	ret

00003486 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3486:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3488:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    348a:	1e f4       	brtc	.+6      	; 0x3492 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    348c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    348e:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3492:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3494:	07 d0       	rcall	.+14     	; 0x34a4 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3496:	0e 94 21 1a 	call	0x3442	; 0x3442 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    349a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    349c:	03 d0       	rcall	.+6      	; 0x34a4 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    349e:	4e f4       	brtc	.+18     	; 0x34b2 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    34a0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__negsi2>

000034a4 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    34a4:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    34a6:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    34a8:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    34aa:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    34ae:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    34b0:	5f 4f       	sbci	r21, 0xFF	; 255

000034b2 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    34b2:	08 95       	ret

000034b4 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    34b4:	90 95       	com	r25
    34b6:	80 95       	com	r24
    34b8:	70 95       	com	r23
    34ba:	61 95       	neg	r22
    34bc:	7f 4f       	sbci	r23, 0xFF	; 255
    34be:	8f 4f       	sbci	r24, 0xFF	; 255
    34c0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    34c2:	08 95       	ret

000034c4 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    34c4:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    34c6:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    34c8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    34ca:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    34cc:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    34ce:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    34d0:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    34d2:	19 94       	eijmp

000034d4 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    34d4:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    34d8:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    34da:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    34dc:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    34de:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    34e0:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    34e2:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    34e4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    34e6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    34e8:	08 95       	ret

000034ea <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    34ea:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    34ec:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    34ee:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    34f0:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    34f2:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    34f4:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    34f6:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    34f8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    34fa:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    34fc:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    34fe:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3500:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3502:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3504:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3506:	08 95       	ret

00003508 <eeprom_read_byte>:
eeprom_read_byte():
    3508:	f9 99       	sbic	0x1f, 1	; 31
    350a:	fe cf       	rjmp	.-4      	; 0x3508 <eeprom_read_byte>
    350c:	92 bd       	out	0x22, r25	; 34
    350e:	81 bd       	out	0x21, r24	; 33
    3510:	f8 9a       	sbi	0x1f, 0	; 31
    3512:	99 27       	eor	r25, r25
    3514:	80 b5       	in	r24, 0x20	; 32
    3516:	08 95       	ret

00003518 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    3518:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    351a:	c7 ea       	ldi	r28, 0xA7	; 167
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    351c:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2500
    351e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    3520:	06 c0       	rjmp	.+12     	; 0x352e <__do_global_dtors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2505
    3522:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    3524:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    3526:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    352a:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2512
    352c:	01 1d       	adc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    352e:	c8 3a       	cpi	r28, 0xA8	; 168
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    3530:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2518
    3532:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2519
    3534:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    3536:	a9 f7       	brne	.-22     	; 0x3522 <__do_global_dtors+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3538:	f8 94       	cli

0000353a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    353a:	ff cf       	rjmp	.-2      	; 0x353a <__stop_program>
