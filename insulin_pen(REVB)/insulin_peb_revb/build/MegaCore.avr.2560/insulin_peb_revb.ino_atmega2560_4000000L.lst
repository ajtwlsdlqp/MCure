
C:\Users\DH\AppData\Local\Temp\arduino-sketch-5BDA2A1E7137BCA818DA396074475103/insulin_peb_revb.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__dtors_end>
       4:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__vector_1>
       8:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__vector_2>
       c:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__vector_3>
      10:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__vector_4>
      14:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__vector_5>
      18:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__vector_6>
      1c:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__vector_7>
      20:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__vector_8>
      24:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__vector_10>
      28:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__vector_10>
      2c:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__vector_10>
      30:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      34:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__vector_13>
      38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      44:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      54:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      5c:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__vector_23>
      60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      64:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__vector_25>
      68:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__vector_26>
      6c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      70:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      74:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      78:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      7c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      80:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      84:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      88:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      8c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      90:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__vector_36>
      94:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__vector_37>
      98:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      9c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_39>
      a0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      a8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      ac:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      b0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      b4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      b8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      bc:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      c0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      c4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      c8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      cc:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      d0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      d4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      d8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      dc:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
      e0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <Melody_Proc()+0x15e>
      e8:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <turnOffPWM+0x94>
      ec:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <Melody_Proc()+0xc6>
      f0:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <turnOffPWM+0x48>
      f4:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <turnOffPWM+0x9c>
      f8:	0c 94 26 10 	jmp	0x204c	; 0x204c <SoftwareSerial::available()>
      fc:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     100:	0c 94 45 08 	jmp	0x108a	; 0x108a <Melody_Proc()+0xa0>
     104:	0c 94 99 12 	jmp	0x2532	; 0x2532 <HardwareSerial::peek()>
     108:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <turnOffPWM+0xa4>
     10c:	0c 94 0e 10 	jmp	0x201c	; 0x201c <SoftwareSerial::peek()>
     110:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <Print::write(unsigned char const*, unsigned int)>
     114:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <turnOffPWM+0x3c>
     118:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <SoftwareSerial::write(unsigned char)>
     11c:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <turnOffPWM+0x64>
     120:	0c 94 80 08 	jmp	0x1100	; 0x1100 <Melody_Proc()+0x116>
     124:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <Melody_Proc()+0x1b8>
     128:	0c 94 4f 19 	jmp	0x329e	; 0x329e <attachInterrupt+0xa8>
     12c:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <TwoWire::read()>
     130:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <TwoWire::peek()>
     134:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <TwoWire::flush()>
     138:	0c 94 21 19 	jmp	0x3242	; 0x3242 <attachInterrupt+0x4c>
     13c:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <turnOffPWM+0x88>
     140:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <attachInterrupt+0xda>
     144:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <Melody_Proc()+0x16e>
     148:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <Print::availableForWrite()>
     14c:	0c 94 19 19 	jmp	0x3232	; 0x3232 <attachInterrupt+0x3c>
     150:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <TwoWire::available()>
     154:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <TwoWire::write(unsigned char)>
     158:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <updateLED()+0x1c4>
     15c:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <turnOffPWM+0x80>
     160:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <Melody_Proc()+0xec>
     164:	0c 94 11 07 	jmp	0xe22	; 0xe22 <updateLED()+0x18a>
     168:	0c 94 35 1c 	jmp	0x386a	; 0x386a <turnOffPWM+0x6c>
     16c:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <turnOffPWM+0xb0>
     170:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <isr()>
     174:	0c 94 27 1c 	jmp	0x384e	; 0x384e <turnOffPWM+0x50>
     178:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <_GLOBAL__sub_I___vector_36>
     17c:	0c 94 40 13 	jmp	0x2680	; 0x2680 <HardwareSerial::write(unsigned char)>
     180:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <turnOffPWM+0xb8>
     184:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <turnOffPWM+0xc0>
     188:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <turnOffPWM+0xc6>
     18c:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <Melody_Proc()+0xd2>
     190:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <serialEventRun()>
     194:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <turnOffPWM+0x78>
     198:	0c 94 a7 12 	jmp	0x254e	; 0x254e <HardwareSerial::read()>
     19c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <_GLOBAL__sub_D_Key>
     1a0:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <attachInterrupt+0xc0>
     1a4:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <updateLED()+0x192>
     1a8:	0c 94 4d 08 	jmp	0x109a	; 0x109a <Melody_Proc()+0xb0>
     1ac:	0c 94 0d 10 	jmp	0x201a	; 0x201a <SoftwareSerial::flush()>
     1b0:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <A_CHANGE()>
     1b4:	0c 94 94 08 	jmp	0x1128	; 0x1128 <Melody_Proc()+0x13e>
     1b8:	0c 94 8d 12 	jmp	0x251a	; 0x251a <HardwareSerial::available()>
     1bc:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <attachInterrupt+0x7e>
     1c0:	0c 94 91 14 	jmp	0x2922	; 0x2922 <Serial1_available()>
     1c4:	0c 94 04 14 	jmp	0x2808	; 0x2808 <_GLOBAL__sub_I___vector_25>
     1c8:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <_GLOBAL__sub_I_Key>
     1cc:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <nothing>
     1d0:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <Serial0_available()>
     1d4:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <SoftwareSerial::read()>
     1d8:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <HardwareSerial::availableForWrite()>
     1dc:	0c 94 20 13 	jmp	0x2640	; 0x2640 <HardwareSerial::flush()>
     1e0:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <turnOffPWM+0x58>
     1e4:	0c 94 2d 19 	jmp	0x325a	; 0x325a <attachInterrupt+0x64>
     1e8:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <turnOffPWM+0xc8>
     1ec:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <TwoWire::write(unsigned char const*, unsigned int)>
     1f0:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <updateLED()+0x1e0>
     1f4:	0c 94 24 07 	jmp	0xe48	; 0xe48 <updateLED()+0x1b0>

000001f8 <__trampolines_end>:
__trampolines_end():
     1f8:	02 00       	Address 0x000001f8 is out of bounds.
.word	0xffff	; ????

000001f9 <digital_pin_to_timer_PGM>:
     1f9:	00 00 0b 0c 03 0a 0d 0e 0f 09 08 04 05 02 00 00     ................
	...
     225:	13 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000024f <digital_pin_to_bit_mask_PGM>:
     24f:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     25f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     26f:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     27f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     28f:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
     29f:	04 08 10 20 40 80                                   ... @.

000002a5 <digital_pin_to_port_PGM>:
     2a5:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     2b5:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     2c5:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     2d5:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2e5:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
     2f5:	0a 0a 0a 0a 0a 0a                                   ......

000002fb <port_to_input_PGM>:
     2fb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     30b:	00 01 00 00 03 01 06 01 09 01                       ..........

00000315 <port_to_output_PGM>:
     315:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     325:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000032f <port_to_mode_PGM>:
     32f:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     33f:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

0000034a <__ctors_start>:
__ctors_start():
     34a:	f1 08       	sbc	r15, r1
     34c:	67 0b       	sbc	r22, r23
     34e:	04 14       	cp	r0, r4
     350:	9b 14       	cp	r9, r11

00000352 <__ctors_end>:
__dtors_start():
     352:	70 09       	sbc	r23, r0

00000354 <__dtors_end>:
__dtors_end():
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf ef       	ldi	r28, 0xFF	; 255
     35a:	d1 e2       	ldi	r29, 0x21	; 33
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	00 e0       	ldi	r16, 0x00	; 0
     362:	0c bf       	out	0x3c, r16	; 60

00000364 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     364:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     366:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     368:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     36a:	ea ef       	ldi	r30, 0xFA	; 250
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     36c:	fa e3       	ldi	r31, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     36e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     370:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     372:	02 c0       	rjmp	.+4      	; 0x378 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     374:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     376:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     378:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     37a:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     37c:	d9 f7       	brne	.-10     	; 0x374 <__do_copy_data+0x10>

0000037e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     37e:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     380:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     382:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     384:	01 c0       	rjmp	.+2      	; 0x388 <.do_clear_bss_start>

00000386 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     386:	1d 92       	st	X+, r1

00000388 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     388:	ad 36       	cpi	r26, 0x6D	; 109
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     38a:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     38c:	e1 f7       	brne	.-8      	; 0x386 <.do_clear_bss_loop>

0000038e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     38e:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     390:	c9 ea       	ldi	r28, 0xA9	; 169
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     392:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     394:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     398:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     39a:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     39c:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     39e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     3a0:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     3a4:	c5 3a       	cpi	r28, 0xA5	; 165
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     3a6:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     3a8:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     3aa:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     3ac:	a9 f7       	brne	.-22     	; 0x398 <__do_global_ctors+0xa>
     3ae:	0e 94 ce 1a 	call	0x359c	; 0x359c <main>
     3b2:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__do_global_dtors>

000003b6 <__bad_interrupt>:
__vector_38():
     3b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ba <A_CHANGE()>:
_Z8A_CHANGEv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:998
{
  /*
    response_off_ctrl / response_ctrl / bf_mode / software_rst
        0 1 0     /     0 1 1     /   0     /       1
  */
  I2c.write(0x24, 0x36, 0x4D);
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <digitalRead>
     3c0:	89 2b       	or	r24, r25
     3c2:	61 f4       	brne	.+24     	; 0x3dc <A_CHANGE()+0x22>
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <digitalRead>
     3ca:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <pulses>
     3ce:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <pulses+0x1>
     3d2:	89 2b       	or	r24, r25
     3d4:	61 f4       	brne	.+24     	; 0x3ee <A_CHANGE()+0x34>
     3d6:	2f 5f       	subi	r18, 0xFF	; 255
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	0b c0       	rjmp	.+22     	; 0x3f2 <A_CHANGE()+0x38>
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <digitalRead>
     3e2:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <pulses>
     3e6:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <pulses+0x1>
     3ea:	89 2b       	or	r24, r25
     3ec:	a1 f7       	brne	.-24     	; 0x3d6 <A_CHANGE()+0x1c>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	31 09       	sbc	r19, r1
     3f2:	30 93 ca 02 	sts	0x02CA, r19	; 0x8002ca <pulses+0x1>
     3f6:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <pulses>
     3fa:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     3fe:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <pre_encodercheck_time>
     402:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <pre_encodercheck_time+0x1>
     406:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <pre_encodercheck_time+0x2>
     40a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <pre_encodercheck_time+0x3>
     40e:	08 95       	ret

00000410 <Print::write(char const*) [clone .part.0]>:
_ZN5Print5writeEPKc():
     410:	fb 01       	movw	r30, r22
     412:	01 90       	ld	r0, Z+
     414:	00 20       	and	r0, r0
     416:	e9 f7       	brne	.-6      	; 0x412 <Print::write(char const*) [clone .part.0]+0x2>
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	af 01       	movw	r20, r30
     41c:	46 1b       	sub	r20, r22
     41e:	57 0b       	sbc	r21, r23
     420:	dc 01       	movw	r26, r24
     422:	ed 91       	ld	r30, X+
     424:	fc 91       	ld	r31, X
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	f3 81       	ldd	r31, Z+3	; 0x03
     42a:	e0 2d       	mov	r30, r0
     42c:	19 94       	eijmp

0000042e <Key_Read()>:
_Z8Key_Readv():
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	1f 92       	push	r1
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	1a 82       	std	Y+2, r1	; 0x02
     442:	8e 01       	movw	r16, r28
     444:	0f 5f       	subi	r16, 0xFF	; 255
     446:	1f 4f       	sbci	r17, 0xFF	; 255
     448:	22 e0       	ldi	r18, 0x02	; 2
     44a:	4a e2       	ldi	r20, 0x2A	; 42
     44c:	64 e2       	ldi	r22, 0x24	; 36
     44e:	85 e9       	ldi	r24, 0x95	; 149
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)>
     456:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Key_Read()::pre_key>
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9f 3f       	cpi	r25, 0xFF	; 255
     45e:	c9 f5       	brne	.+114    	; 0x4d2 <Key_Read()+0xa4>
     460:	81 11       	cpse	r24, r1
     462:	23 c0       	rjmp	.+70     	; 0x4aa <Key_Read()+0x7c>
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Key+0x1>
     46c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Key>
     470:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	71 f4       	brne	.+28     	; 0x494 <Key_Read()+0x66>
     478:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <mokup_motor_run_state>
     47c:	88 23       	and	r24, r24
     47e:	51 f0       	breq	.+20     	; 0x494 <Key_Read()+0x66>
     480:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <mokup_motor_run_state>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	88 e0       	ldi	r24, 0x08	; 8
     488:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	87 e0       	ldi	r24, 0x07	; 7
     490:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     494:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Key>
     498:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Key_Read()::pre_key>
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret
     4aa:	80 ff       	sbrs	r24, 0
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <Key_Read()+0x86>
     4ae:	88 e0       	ldi	r24, 0x08	; 8
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	13 c0       	rjmp	.+38     	; 0x4da <Key_Read()+0xac>
     4b4:	81 ff       	sbrs	r24, 1
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <Key_Read()+0x90>
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e c0       	rjmp	.+28     	; 0x4da <Key_Read()+0xac>
     4be:	82 ff       	sbrs	r24, 2
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <Key_Read()+0x9a>
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <Key_Read()+0xac>
     4c8:	83 ff       	sbrs	r24, 3
     4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <Key_Read()+0xa8>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <Key_Read()+0xac>
     4d2:	81 11       	cpse	r24, r1
     4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <Key_Read()+0xb6>
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Key+0x1>
     4de:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Key>
     4e2:	d8 cf       	rjmp	.-80     	; 0x494 <Key_Read()+0x66>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	19 f3       	breq	.-58     	; 0x4ae <Key_Read()+0x80>
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	31 f3       	breq	.-52     	; 0x4b8 <Key_Read()+0x8a>
     4ec:	84 30       	cpi	r24, 0x04	; 4
     4ee:	49 f3       	breq	.-46     	; 0x4c2 <Key_Read()+0x94>
     4f0:	88 30       	cpi	r24, 0x08	; 8
     4f2:	61 f3       	breq	.-40     	; 0x4cc <Key_Read()+0x9e>
     4f4:	89 2f       	mov	r24, r25
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	f0 cf       	rjmp	.-32     	; 0x4da <Key_Read()+0xac>

000004fa <Key_Proc()>:
_Z8Key_Procv():
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <is_key_change>
     502:	88 23       	and	r24, r24
     504:	69 f0       	breq	.+26     	; 0x520 <Key_Proc()+0x26>
     506:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <is_key_change>
     50a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Key>
     50e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Key+0x1>
     512:	82 30       	cpi	r24, 0x02	; 2
     514:	91 05       	cpc	r25, r1
     516:	09 f4       	brne	.+2      	; 0x51a <Key_Proc()+0x20>
     518:	8a c0       	rjmp	.+276    	; 0x62e <Key_Proc()+0x134>
     51a:	2c f4       	brge	.+10     	; 0x526 <Key_Proc()+0x2c>
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	e9 f0       	breq	.+58     	; 0x55a <Key_Proc()+0x60>
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret
     526:	84 30       	cpi	r24, 0x04	; 4
     528:	91 05       	cpc	r25, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <Key_Proc()+0x34>
     52c:	ca c0       	rjmp	.+404    	; 0x6c2 <Key_Proc()+0x1c8>
     52e:	08 97       	sbiw	r24, 0x08	; 8
     530:	b9 f7       	brne	.-18     	; 0x520 <Key_Proc()+0x26>
     532:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     536:	88 23       	and	r24, r24
     538:	99 f3       	breq	.-26     	; 0x520 <Key_Proc()+0x26>
     53a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <f_ble_state>
     53e:	81 11       	cpse	r24, r1
     540:	e9 c0       	rjmp	.+466    	; 0x714 <Key_Proc()+0x21a>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <f_ble_state>
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	8a e2       	ldi	r24, 0x2A	; 42
     54c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	15 c0       	rjmp	.+42     	; 0x584 <Key_Proc()+0x8a>
     55a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     55e:	81 11       	cpse	r24, r1
     560:	1e c0       	rjmp	.+60     	; 0x59e <Key_Proc()+0xa4>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <f_power_state>
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	89 e0       	ldi	r24, 0x09	; 9
     56c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     570:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <active_step>
     574:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <is_target_psi_set>
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <working_mode>
     57e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     582:	85 e0       	ldi	r24, 0x05	; 5
     584:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
     588:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     58c:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
     590:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
     594:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
     598:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
     59c:	c1 cf       	rjmp	.-126    	; 0x520 <Key_Proc()+0x26>
     59e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <active_step>
     5a2:	81 11       	cpse	r24, r1
     5a4:	1b c0       	rjmp	.+54     	; 0x5dc <Key_Proc()+0xe2>
     5a6:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <f_power_state>
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	88 e0       	ldi	r24, 0x08	; 8
     5ae:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	87 e0       	ldi	r24, 0x07	; 7
     5b6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	87 e1       	ldi	r24, 0x17	; 23
     5be:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	89 e1       	ldi	r24, 0x19	; 25
     5c6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	89 e0       	ldi	r24, 0x09	; 9
     5ce:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	d4 cf       	rjmp	.-88     	; 0x584 <Key_Proc()+0x8a>
     5dc:	88 30       	cpi	r24, 0x08	; 8
     5de:	09 f4       	brne	.+2      	; 0x5e2 <Key_Proc()+0xe8>
     5e0:	9f cf       	rjmp	.-194    	; 0x520 <Key_Proc()+0x26>
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	89 e1       	ldi	r24, 0x19	; 25
     5e6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	87 e1       	ldi	r24, 0x17	; 23
     5ee:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     5f2:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     5f6:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <pre_valve_close_time>
     5fa:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <pre_valve_close_time+0x1>
     5fe:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pre_valve_close_time+0x2>
     602:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pre_valve_close_time+0x3>
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
     612:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     616:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
     61a:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
     61e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
     622:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
     626:	88 e0       	ldi	r24, 0x08	; 8
     628:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <active_step>
     62c:	79 cf       	rjmp	.-270    	; 0x520 <Key_Proc()+0x26>
     62e:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     632:	88 23       	and	r24, r24
     634:	09 f4       	brne	.+2      	; 0x638 <Key_Proc()+0x13e>
     636:	74 cf       	rjmp	.-280    	; 0x520 <Key_Proc()+0x26>
     638:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <mokup_motor_run_state>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	09 f1       	breq	.+66     	; 0x682 <Key_Proc()+0x188>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <mokup_motor_run_state>
     646:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     64a:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <pre_encodercheck_time>
     64e:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <pre_encodercheck_time+0x1>
     652:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <pre_encodercheck_time+0x2>
     656:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <pre_encodercheck_time+0x3>
     65a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     65e:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <pre_user_motor_worktime>
     662:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <pre_user_motor_worktime+0x1>
     666:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <pre_user_motor_worktime+0x2>
     66a:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <pre_user_motor_worktime+0x3>
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	87 e0       	ldi	r24, 0x07	; 7
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <digitalWrite>
     682:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     686:	00 91 b1 02 	lds	r16, 0x02B1	; 0x8002b1 <pre_encodercheck_time>
     68a:	10 91 b2 02 	lds	r17, 0x02B2	; 0x8002b2 <pre_encodercheck_time+0x1>
     68e:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <pre_encodercheck_time+0x2>
     692:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <pre_encodercheck_time+0x3>
     696:	60 1b       	sub	r22, r16
     698:	71 0b       	sbc	r23, r17
     69a:	82 0b       	sbc	r24, r18
     69c:	93 0b       	sbc	r25, r19
     69e:	65 36       	cpi	r22, 0x65	; 101
     6a0:	71 05       	cpc	r23, r1
     6a2:	81 05       	cpc	r24, r1
     6a4:	91 05       	cpc	r25, r1
     6a6:	58 f1       	brcs	.+86     	; 0x6fe <Key_Proc()+0x204>
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	88 e0       	ldi	r24, 0x08	; 8
     6ac:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	87 e0       	ldi	r24, 0x07	; 7
     6b4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     6b8:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <pulses+0x1>
     6bc:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <pulses>
     6c0:	2f cf       	rjmp	.-418    	; 0x520 <Key_Proc()+0x26>
     6c2:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     6c6:	88 23       	and	r24, r24
     6c8:	09 f4       	brne	.+2      	; 0x6cc <Key_Proc()+0x1d2>
     6ca:	2a cf       	rjmp	.-428    	; 0x520 <Key_Proc()+0x26>
     6cc:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <mokup_motor_run_state>
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	b9 f2       	breq	.-82     	; 0x682 <Key_Proc()+0x188>
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <mokup_motor_run_state>
     6da:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     6de:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <pre_encodercheck_time>
     6e2:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <pre_encodercheck_time+0x1>
     6e6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <pre_encodercheck_time+0x2>
     6ea:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <pre_encodercheck_time+0x3>
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	88 e0       	ldi	r24, 0x08	; 8
     6f2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     6fe:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     702:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <pre_user_motor_worktime>
     706:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <pre_user_motor_worktime+0x1>
     70a:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <pre_user_motor_worktime+0x2>
     70e:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <pre_user_motor_worktime+0x3>
     712:	06 cf       	rjmp	.-500    	; 0x520 <Key_Proc()+0x26>
     714:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <f_ble_state>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	17 cf       	rjmp	.-466    	; 0x54a <Key_Proc()+0x50>

0000071c <Key_Scan()>:
_Z8Key_Scanv():
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     724:	88 23       	and	r24, r24
     726:	69 f1       	breq	.+90     	; 0x782 <Key_Scan()+0x66>
     728:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	99 f4       	brne	.+38     	; 0x756 <Key_Scan()+0x3a>
     730:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     734:	00 91 c5 02 	lds	r16, 0x02C5	; 0x8002c5 <pre_key_readtime>
     738:	10 91 c6 02 	lds	r17, 0x02C6	; 0x8002c6 <pre_key_readtime+0x1>
     73c:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <pre_key_readtime+0x2>
     740:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <pre_key_readtime+0x3>
     744:	60 1b       	sub	r22, r16
     746:	71 0b       	sbc	r23, r17
     748:	82 0b       	sbc	r24, r18
     74a:	93 0b       	sbc	r25, r19
     74c:	62 33       	cpi	r22, 0x32	; 50
     74e:	71 05       	cpc	r23, r1
     750:	81 05       	cpc	r24, r1
     752:	91 05       	cpc	r25, r1
     754:	50 f1       	brcs	.+84     	; 0x7aa <Key_Scan()+0x8e>
     756:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     75a:	60 93 c5 02 	sts	0x02C5, r22	; 0x8002c5 <pre_key_readtime>
     75e:	70 93 c6 02 	sts	0x02C6, r23	; 0x8002c6 <pre_key_readtime+0x1>
     762:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <pre_key_readtime+0x2>
     766:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <pre_key_readtime+0x3>
     76a:	0e 94 17 02 	call	0x42e	; 0x42e <Key_Read()>
     76e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Key>
     772:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Key+0x1>
     776:	8f 3f       	cpi	r24, 0xFF	; 255
     778:	91 05       	cpc	r25, r1
     77a:	d1 f4       	brne	.+52     	; 0x7b0 <Key_Scan()+0x94>
     77c:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Key_Scan()::f_PressedKey>
     780:	27 c0       	rjmp	.+78     	; 0x7d0 <Key_Scan()+0xb4>
     782:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     786:	00 91 c5 02 	lds	r16, 0x02C5	; 0x8002c5 <pre_key_readtime>
     78a:	10 91 c6 02 	lds	r17, 0x02C6	; 0x8002c6 <pre_key_readtime+0x1>
     78e:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <pre_key_readtime+0x2>
     792:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <pre_key_readtime+0x3>
     796:	60 1b       	sub	r22, r16
     798:	71 0b       	sbc	r23, r17
     79a:	82 0b       	sbc	r24, r18
     79c:	93 0b       	sbc	r25, r19
     79e:	68 3c       	cpi	r22, 0xC8	; 200
     7a0:	71 05       	cpc	r23, r1
     7a2:	81 05       	cpc	r24, r1
     7a4:	91 05       	cpc	r25, r1
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <Key_Scan()+0x8e>
     7a8:	bf cf       	rjmp	.-130    	; 0x728 <Key_Scan()+0xc>
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret
     7b0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     7b4:	28 17       	cp	r18, r24
     7b6:	19 06       	cpc	r1, r25
     7b8:	09 f7       	brne	.-62     	; 0x77c <Key_Scan()+0x60>
     7ba:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <Key_Scan()::f_PressedKey>
     7be:	21 11       	cpse	r18, r1
     7c0:	0d c0       	rjmp	.+26     	; 0x7dc <Key_Scan()+0xc0>
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	20 93 d5 02 	sts	0x02D5, r18	; 0x8002d5 <is_key_change>
     7c8:	20 93 76 02 	sts	0x0276, r18	; 0x800276 <Key_Scan()::f_PressedKey>
     7cc:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <Key_Scan()::AutoKeyCount>
     7d0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <Key_Proc()>
     7dc:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <Key_Scan()::AutoKeyCount>
     7e0:	21 50       	subi	r18, 0x01	; 1
     7e2:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <Key_Scan()::AutoKeyCount>
     7e6:	21 11       	cpse	r18, r1
     7e8:	f3 cf       	rjmp	.-26     	; 0x7d0 <Key_Scan()+0xb4>
     7ea:	84 30       	cpi	r24, 0x04	; 4
     7ec:	91 05       	cpc	r25, r1
     7ee:	19 f0       	breq	.+6      	; 0x7f6 <Key_Scan()+0xda>
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	91 05       	cpc	r25, r1
     7f4:	69 f7       	brne	.-38     	; 0x7d0 <Key_Scan()+0xb4>
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	20 93 d5 02 	sts	0x02D5, r18	; 0x8002d5 <is_key_change>
     7fc:	e7 cf       	rjmp	.-50     	; 0x7cc <Key_Scan()+0xb0>

000007fe <updateTemperatrue()>:
_Z17updateTemperatruev():
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     806:	00 91 c1 02 	lds	r16, 0x02C1	; 0x8002c1 <pre_temp_readtime>
     80a:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <pre_temp_readtime+0x1>
     80e:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <pre_temp_readtime+0x2>
     812:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <pre_temp_readtime+0x3>
     816:	60 1b       	sub	r22, r16
     818:	71 0b       	sbc	r23, r17
     81a:	82 0b       	sbc	r24, r18
     81c:	93 0b       	sbc	r25, r19
     81e:	68 3e       	cpi	r22, 0xE8	; 232
     820:	73 40       	sbci	r23, 0x03	; 3
     822:	81 05       	cpc	r24, r1
     824:	91 05       	cpc	r25, r1
     826:	48 f1       	brcs	.+82     	; 0x87a <updateTemperatrue()+0x7c>
     828:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     82c:	60 93 c1 02 	sts	0x02C1, r22	; 0x8002c1 <pre_temp_readtime>
     830:	70 93 c2 02 	sts	0x02C2, r23	; 0x8002c2 <pre_temp_readtime+0x1>
     834:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <pre_temp_readtime+0x2>
     838:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <pre_temp_readtime+0x3>
     83c:	84 e4       	ldi	r24, 0x44	; 68
     83e:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <analogRead>
     842:	83 3f       	cpi	r24, 0xF3	; 243
     844:	22 e0       	ldi	r18, 0x02	; 2
     846:	92 07       	cpc	r25, r18
     848:	68 f4       	brcc	.+26     	; 0x864 <updateTemperatrue()+0x66>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <f_peltier_state>
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	8a e1       	ldi	r24, 0x1A	; 26
     854:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	88 e1       	ldi	r24, 0x18	; 24
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <digitalWrite>
     864:	83 30       	cpi	r24, 0x03	; 3
     866:	93 40       	sbci	r25, 0x03	; 3
     868:	40 f0       	brcs	.+16     	; 0x87a <updateTemperatrue()+0x7c>
     86a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <f_peltier_state>
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	8a e1       	ldi	r24, 0x1A	; 26
     872:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	f0 cf       	rjmp	.-32     	; 0x85a <updateTemperatrue()+0x5c>
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	08 95       	ret

00000880 <updatePSI()>:
_Z9updatePSIv():
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     888:	88 23       	and	r24, r24
     88a:	a9 f1       	breq	.+106    	; 0x8f6 <updatePSI()+0x76>
     88c:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     890:	00 91 bd 02 	lds	r16, 0x02BD	; 0x8002bd <pre_psi_readtime>
     894:	10 91 be 02 	lds	r17, 0x02BE	; 0x8002be <pre_psi_readtime+0x1>
     898:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <pre_psi_readtime+0x2>
     89c:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <pre_psi_readtime+0x3>
     8a0:	60 1b       	sub	r22, r16
     8a2:	71 0b       	sbc	r23, r17
     8a4:	82 0b       	sbc	r24, r18
     8a6:	93 0b       	sbc	r25, r19
     8a8:	62 33       	cpi	r22, 0x32	; 50
     8aa:	71 05       	cpc	r23, r1
     8ac:	81 05       	cpc	r24, r1
     8ae:	91 05       	cpc	r25, r1
     8b0:	10 f1       	brcs	.+68     	; 0x8f6 <updatePSI()+0x76>
     8b2:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     8b6:	60 93 bd 02 	sts	0x02BD, r22	; 0x8002bd <pre_psi_readtime>
     8ba:	70 93 be 02 	sts	0x02BE, r23	; 0x8002be <pre_psi_readtime+0x1>
     8be:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <pre_psi_readtime+0x2>
     8c2:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <pre_psi_readtime+0x3>
     8c6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <active_step>
     8ca:	85 30       	cpi	r24, 0x05	; 5
     8cc:	70 f4       	brcc	.+28     	; 0x8ea <updatePSI()+0x6a>
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	a8 f0       	brcs	.+42     	; 0x8fc <updatePSI()+0x7c>
     8d2:	88 e3       	ldi	r24, 0x38	; 56
     8d4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <analogRead>
     8d8:	86 3c       	cpi	r24, 0xC6	; 198
     8da:	91 05       	cpc	r25, r1
     8dc:	44 f5       	brge	.+80     	; 0x92e <updatePSI()+0xae>
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	89 e1       	ldi	r24, 0x19	; 25
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <digitalWrite>
     8ea:	86 30       	cpi	r24, 0x06	; 6
     8ec:	f1 f1       	breq	.+124    	; 0x96a <updatePSI()+0xea>
     8ee:	38 f1       	brcs	.+78     	; 0x93e <updatePSI()+0xbe>
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <updatePSI()+0x76>
     8f4:	7d c0       	rjmp	.+250    	; 0x9f0 <updatePSI()+0x170>
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	08 95       	ret
     8fc:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <working_mode>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	91 f4       	brne	.+36     	; 0x928 <updatePSI()+0xa8>
     904:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <active_step>
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
     914:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     918:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
     91c:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
     920:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
     924:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
     928:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <is_target_psi_set>
     92c:	e4 cf       	rjmp	.-56     	; 0x8f6 <updatePSI()+0x76>
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	89 e1       	ldi	r24, 0x19	; 25
     932:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <is_target_psi_set>
     93c:	dc cf       	rjmp	.-72     	; 0x8f6 <updatePSI()+0x76>
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	89 e1       	ldi	r24, 0x19	; 25
     942:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	87 e1       	ldi	r24, 0x17	; 23
     94a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     94e:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     952:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <pre_valve_close_time>
     956:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <pre_valve_close_time+0x1>
     95a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pre_valve_close_time+0x2>
     95e:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pre_valve_close_time+0x3>
     962:	86 e0       	ldi	r24, 0x06	; 6
     964:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <active_step>
     968:	c6 cf       	rjmp	.-116    	; 0x8f6 <updatePSI()+0x76>
     96a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     96e:	00 91 b9 02 	lds	r16, 0x02B9	; 0x8002b9 <pre_valve_close_time>
     972:	10 91 ba 02 	lds	r17, 0x02BA	; 0x8002ba <pre_valve_close_time+0x1>
     976:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <pre_valve_close_time+0x2>
     97a:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <pre_valve_close_time+0x3>
     97e:	60 1b       	sub	r22, r16
     980:	71 0b       	sbc	r23, r17
     982:	82 0b       	sbc	r24, r18
     984:	93 0b       	sbc	r25, r19
     986:	61 3d       	cpi	r22, 0xD1	; 209
     988:	77 40       	sbci	r23, 0x07	; 7
     98a:	81 05       	cpc	r24, r1
     98c:	91 05       	cpc	r25, r1
     98e:	08 f4       	brcc	.+2      	; 0x992 <updatePSI()+0x112>
     990:	b2 cf       	rjmp	.-156    	; 0x8f6 <updatePSI()+0x76>
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	87 e1       	ldi	r24, 0x17	; 23
     996:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	89 e1       	ldi	r24, 0x19	; 25
     99e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	89 e0       	ldi	r24, 0x09	; 9
     9a6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     9aa:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <f_power_state>
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	87 e0       	ldi	r24, 0x07	; 7
     9ba:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	87 e1       	ldi	r24, 0x17	; 23
     9c2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	89 e1       	ldi	r24, 0x19	; 25
     9ca:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
     9da:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     9de:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
     9e2:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
     9e6:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
     9ea:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
     9ee:	83 cf       	rjmp	.-250    	; 0x8f6 <updatePSI()+0x76>
     9f0:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     9f4:	00 91 b9 02 	lds	r16, 0x02B9	; 0x8002b9 <pre_valve_close_time>
     9f8:	10 91 ba 02 	lds	r17, 0x02BA	; 0x8002ba <pre_valve_close_time+0x1>
     9fc:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <pre_valve_close_time+0x2>
     a00:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <pre_valve_close_time+0x3>
     a04:	60 1b       	sub	r22, r16
     a06:	71 0b       	sbc	r23, r17
     a08:	82 0b       	sbc	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	61 3d       	cpi	r22, 0xD1	; 209
     a0e:	77 40       	sbci	r23, 0x07	; 7
     a10:	81 05       	cpc	r24, r1
     a12:	91 05       	cpc	r25, r1
     a14:	08 f4       	brcc	.+2      	; 0xa18 <updatePSI()+0x198>
     a16:	6f cf       	rjmp	.-290    	; 0x8f6 <updatePSI()+0x76>
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	87 e1       	ldi	r24, 0x17	; 23
     a1c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	89 e1       	ldi	r24, 0x19	; 25
     a24:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a28:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <f_power_state>
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	88 e0       	ldi	r24, 0x08	; 8
     a30:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	87 e0       	ldi	r24, 0x07	; 7
     a38:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	87 e1       	ldi	r24, 0x17	; 23
     a40:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	89 e1       	ldi	r24, 0x19	; 25
     a48:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	89 e0       	ldi	r24, 0x09	; 9
     a50:	48 cf       	rjmp	.-368    	; 0x8e2 <updatePSI()+0x62>

00000a52 <updateMotor()>:
_Z11updateMotorv():
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     a5e:	88 23       	and	r24, r24
     a60:	51 f0       	breq	.+20     	; 0xa76 <updateMotor()+0x24>
     a62:	c0 91 d0 02 	lds	r28, 0x02D0	; 0x8002d0 <active_step>
     a66:	c3 30       	cpi	r28, 0x03	; 3
     a68:	09 f4       	brne	.+2      	; 0xa6c <updateMotor()+0x1a>
     a6a:	7a c0       	rjmp	.+244    	; 0xb60 <updateMotor()+0x10e>
     a6c:	48 f4       	brcc	.+18     	; 0xa80 <updateMotor()+0x2e>
     a6e:	c1 30       	cpi	r28, 0x01	; 1
     a70:	c1 f0       	breq	.+48     	; 0xaa2 <updateMotor()+0x50>
     a72:	c2 30       	cpi	r28, 0x02	; 2
     a74:	b9 f1       	breq	.+110    	; 0xae4 <updateMotor()+0x92>
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret
     a80:	c4 30       	cpi	r28, 0x04	; 4
     a82:	09 f4       	brne	.+2      	; 0xa86 <updateMotor()+0x34>
     a84:	af c0       	rjmp	.+350    	; 0xbe4 <updateMotor()+0x192>
     a86:	c7 30       	cpi	r28, 0x07	; 7
     a88:	b0 f7       	brcc	.-20     	; 0xa76 <updateMotor()+0x24>
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	88 e0       	ldi	r24, 0x08	; 8
     a8e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <digitalWrite>
     aa2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <is_target_psi_set>
     aa6:	88 23       	and	r24, r24
     aa8:	31 f3       	breq	.-52     	; 0xa76 <updateMotor()+0x24>
     aaa:	c2 e0       	ldi	r28, 0x02	; 2
     aac:	c0 93 cc 02 	sts	0x02CC, r28	; 0x8002cc <Sound_Update>
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
     ab6:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     aba:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
     abe:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
     ac2:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
     ac6:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
     aca:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     ace:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <pre_motor_stop_time>
     ad2:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <pre_motor_stop_time+0x1>
     ad6:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pre_motor_stop_time+0x2>
     ada:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <pre_motor_stop_time+0x3>
     ade:	c0 93 d0 02 	sts	0x02D0, r28	; 0x8002d0 <active_step>
     ae2:	c9 cf       	rjmp	.-110    	; 0xa76 <updateMotor()+0x24>
     ae4:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     ae8:	00 91 ad 02 	lds	r16, 0x02AD	; 0x8002ad <pre_motor_stop_time>
     aec:	10 91 ae 02 	lds	r17, 0x02AE	; 0x8002ae <pre_motor_stop_time+0x1>
     af0:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <pre_motor_stop_time+0x2>
     af4:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <pre_motor_stop_time+0x3>
     af8:	60 1b       	sub	r22, r16
     afa:	71 0b       	sbc	r23, r17
     afc:	82 0b       	sbc	r24, r18
     afe:	93 0b       	sbc	r25, r19
     b00:	69 3c       	cpi	r22, 0xC9	; 201
     b02:	71 05       	cpc	r23, r1
     b04:	81 05       	cpc	r24, r1
     b06:	91 05       	cpc	r25, r1
     b08:	08 f4       	brcc	.+2      	; 0xb0c <updateMotor()+0xba>
     b0a:	b5 cf       	rjmp	.-150    	; 0xa76 <updateMotor()+0x24>
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     b14:	d3 e0       	ldi	r29, 0x03	; 3
     b16:	d0 93 d0 02 	sts	0x02D0, r29	; 0x8002d0 <active_step>
     b1a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     b1e:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <pre_encodercheck_time>
     b22:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <pre_encodercheck_time+0x1>
     b26:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <pre_encodercheck_time+0x2>
     b2a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <pre_encodercheck_time+0x3>
     b2e:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     b32:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <pre_motor_stop_time>
     b36:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <pre_motor_stop_time+0x1>
     b3a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pre_motor_stop_time+0x2>
     b3e:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <pre_motor_stop_time+0x3>
     b42:	c0 93 cc 02 	sts	0x02CC, r28	; 0x8002cc <Sound_Update>
     b46:	d0 93 cd 02 	sts	0x02CD, r29	; 0x8002cd <Sound_Num>
     b4a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     b4e:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
     b52:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
     b56:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
     b5a:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
     b5e:	8b cf       	rjmp	.-234    	; 0xa76 <updateMotor()+0x24>
     b60:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     b64:	00 91 ad 02 	lds	r16, 0x02AD	; 0x8002ad <pre_motor_stop_time>
     b68:	10 91 ae 02 	lds	r17, 0x02AE	; 0x8002ae <pre_motor_stop_time+0x1>
     b6c:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <pre_motor_stop_time+0x2>
     b70:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <pre_motor_stop_time+0x3>
     b74:	60 1b       	sub	r22, r16
     b76:	71 0b       	sbc	r23, r17
     b78:	82 0b       	sbc	r24, r18
     b7a:	93 0b       	sbc	r25, r19
     b7c:	69 3c       	cpi	r22, 0xC9	; 201
     b7e:	71 05       	cpc	r23, r1
     b80:	81 05       	cpc	r24, r1
     b82:	91 05       	cpc	r25, r1
     b84:	08 f4       	brcc	.+2      	; 0xb88 <updateMotor()+0x136>
     b86:	77 cf       	rjmp	.-274    	; 0xa76 <updateMotor()+0x24>
     b88:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     b8c:	00 91 b1 02 	lds	r16, 0x02B1	; 0x8002b1 <pre_encodercheck_time>
     b90:	10 91 b2 02 	lds	r17, 0x02B2	; 0x8002b2 <pre_encodercheck_time+0x1>
     b94:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <pre_encodercheck_time+0x2>
     b98:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <pre_encodercheck_time+0x3>
     b9c:	60 1b       	sub	r22, r16
     b9e:	71 0b       	sbc	r23, r17
     ba0:	82 0b       	sbc	r24, r18
     ba2:	93 0b       	sbc	r25, r19
     ba4:	61 35       	cpi	r22, 0x51	; 81
     ba6:	71 05       	cpc	r23, r1
     ba8:	81 05       	cpc	r24, r1
     baa:	91 05       	cpc	r25, r1
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <updateMotor()+0x15e>
     bae:	63 cf       	rjmp	.-314    	; 0xa76 <updateMotor()+0x24>
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	88 e0       	ldi	r24, 0x08	; 8
     bb4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	87 e0       	ldi	r24, 0x07	; 7
     bbc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     bc0:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <pulses+0x1>
     bc4:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <pulses>
     bc8:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     bcc:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <pre_motor_stop_time>
     bd0:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <pre_motor_stop_time+0x1>
     bd4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pre_motor_stop_time+0x2>
     bd8:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <pre_motor_stop_time+0x3>
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <active_step>
     be2:	49 cf       	rjmp	.-366    	; 0xa76 <updateMotor()+0x24>
     be4:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     be8:	00 91 ad 02 	lds	r16, 0x02AD	; 0x8002ad <pre_motor_stop_time>
     bec:	10 91 ae 02 	lds	r17, 0x02AE	; 0x8002ae <pre_motor_stop_time+0x1>
     bf0:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <pre_motor_stop_time+0x2>
     bf4:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <pre_motor_stop_time+0x3>
     bf8:	60 1b       	sub	r22, r16
     bfa:	71 0b       	sbc	r23, r17
     bfc:	82 0b       	sbc	r24, r18
     bfe:	93 0b       	sbc	r25, r19
     c00:	69 38       	cpi	r22, 0x89	; 137
     c02:	73 41       	sbci	r23, 0x13	; 19
     c04:	81 05       	cpc	r24, r1
     c06:	91 05       	cpc	r25, r1
     c08:	08 f4       	brcc	.+2      	; 0xc0c <updateMotor()+0x1ba>
     c0a:	35 cf       	rjmp	.-406    	; 0xa76 <updateMotor()+0x24>
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <active_step>
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
     c1e:	95 cf       	rjmp	.-214    	; 0xb4a <updateMotor()+0xf8>

00000c20 <ledOffAll()>:
_Z9ledOffAllv():
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	84 e2       	ldi	r24, 0x24	; 36
     c24:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	88 e2       	ldi	r24, 0x28	; 40
     c2c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	85 e2       	ldi	r24, 0x25	; 37
     c34:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	89 e2       	ldi	r24, 0x29	; 41
     c3c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	82 e2       	ldi	r24, 0x22	; 34
     c44:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	83 e2       	ldi	r24, 0x23	; 35
     c4c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	81 e2       	ldi	r24, 0x21	; 33
     c54:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	8e e0       	ldi	r24, 0x0E	; 14
     c64:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	8f e1       	ldi	r24, 0x1F	; 31
     c6c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	8e e1       	ldi	r24, 0x1E	; 30
     c74:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	8f e0       	ldi	r24, 0x0F	; 15
     c7c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	87 e2       	ldi	r24, 0x27	; 39
     c84:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	8d e1       	ldi	r24, 0x1D	; 29
     c8c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	8c e1       	ldi	r24, 0x1C	; 28
     c94:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <digitalWrite>

00000c98 <updateLED()>:
_Z9updateLEDv():
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <updateLED()::led_timing>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <updateLED()+0x10>
     ca4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <updateLED()::led_timing>
     ca8:	0e 94 10 06 	call	0xc20	; 0xc20 <ledOffAll()>
     cac:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <updateLED()::led_timing>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <updateLED()+0x1e>
     cb4:	53 c0       	rjmp	.+166    	; 0xd5c <updateLED()+0xc4>
     cb6:	90 f1       	brcs	.+100    	; 0xd1c <updateLED()+0x84>
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	09 f4       	brne	.+2      	; 0xcbe <updateLED()+0x26>
     cbc:	96 c0       	rjmp	.+300    	; 0xdea <updateLED()+0x152>
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <updateLED()+0x2c>
     cc2:	ec c0       	rjmp	.+472    	; 0xe9c <updateLED()+0x204>
     cc4:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     cc8:	00 91 a9 02 	lds	r16, 0x02A9	; 0x8002a9 <pre_led_flash_time>
     ccc:	10 91 aa 02 	lds	r17, 0x02AA	; 0x8002aa <pre_led_flash_time+0x1>
     cd0:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <pre_led_flash_time+0x2>
     cd4:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <pre_led_flash_time+0x3>
     cd8:	60 1b       	sub	r22, r16
     cda:	71 0b       	sbc	r23, r17
     cdc:	82 0b       	sbc	r24, r18
     cde:	93 0b       	sbc	r25, r19
     ce0:	6d 32       	cpi	r22, 0x2D	; 45
     ce2:	71 40       	sbci	r23, 0x01	; 1
     ce4:	81 05       	cpc	r24, r1
     ce6:	91 05       	cpc	r25, r1
     ce8:	88 f0       	brcs	.+34     	; 0xd0c <updateLED()+0x74>
     cea:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     cee:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <pre_led_flash_time>
     cf2:	70 93 aa 02 	sts	0x02AA, r23	; 0x8002aa <pre_led_flash_time+0x1>
     cf6:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <pre_led_flash_time+0x2>
     cfa:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <pre_led_flash_time+0x3>
     cfe:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     d02:	81 11       	cpse	r24, r1
     d04:	dc c0       	rjmp	.+440    	; 0xebe <updateLED()+0x226>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <flash_statae>
     d0c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <updateLED()::led_timing>
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <updateLED()::led_timing>
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret
     d1c:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     d20:	88 23       	and	r24, r24
     d22:	81 f2       	breq	.-96     	; 0xcc4 <updateLED()+0x2c>
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	84 e2       	ldi	r24, 0x24	; 36
     d28:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	85 e2       	ldi	r24, 0x25	; 37
     d30:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	88 e2       	ldi	r24, 0x28	; 40
     d38:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     d3c:	8c e2       	ldi	r24, 0x2C	; 44
     d3e:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <digitalRead>
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	29 f4       	brne	.+10     	; 0xd50 <updateLED()+0xb8>
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	89 e2       	ldi	r24, 0x29	; 41
     d4a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     d4e:	ba cf       	rjmp	.-140    	; 0xcc4 <updateLED()+0x2c>
     d50:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     d54:	88 23       	and	r24, r24
     d56:	b9 f3       	breq	.-18     	; 0xd46 <updateLED()+0xae>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	f6 cf       	rjmp	.-20     	; 0xd48 <updateLED()+0xb0>
     d5c:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <updateLED()+0xce>
     d64:	af cf       	rjmp	.-162    	; 0xcc4 <updateLED()+0x2c>
     d66:	8a e3       	ldi	r24, 0x3A	; 58
     d68:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <analogRead>
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	92 40       	sbci	r25, 0x02	; 2
     d70:	2c f0       	brlt	.+10     	; 0xd7c <updateLED()+0xe4>
     d72:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	81 11       	cpse	r24, r1
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <updateLED()+0xe6>
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	82 e2       	ldi	r24, 0x22	; 34
     d80:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     d84:	86 e3       	ldi	r24, 0x36	; 54
     d86:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <analogRead>
     d8a:	8d 3e       	cpi	r24, 0xED	; 237
     d8c:	92 40       	sbci	r25, 0x02	; 2
     d8e:	5c f0       	brlt	.+22     	; 0xda6 <updateLED()+0x10e>
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	83 e2       	ldi	r24, 0x23	; 35
     d94:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	81 e2       	ldi	r24, 0x21	; 33
     d9c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	d2 cf       	rjmp	.-92     	; 0xd4a <updateLED()+0xb2>
     da6:	86 e3       	ldi	r24, 0x36	; 54
     da8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <analogRead>
     dac:	8d 33       	cpi	r24, 0x3D	; 61
     dae:	92 40       	sbci	r25, 0x02	; 2
     db0:	54 f0       	brlt	.+20     	; 0xdc6 <updateLED()+0x12e>
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	83 e2       	ldi	r24, 0x23	; 35
     db6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	81 e2       	ldi	r24, 0x21	; 33
     dbe:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	ee cf       	rjmp	.-36     	; 0xda2 <updateLED()+0x10a>
     dc6:	86 e3       	ldi	r24, 0x36	; 54
     dc8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <analogRead>
     dcc:	8d 3d       	cpi	r24, 0xDD	; 221
     dce:	91 05       	cpc	r25, r1
     dd0:	14 f0       	brlt	.+4      	; 0xdd6 <updateLED()+0x13e>
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	05 c0       	rjmp	.+10     	; 0xde0 <updateLED()+0x148>
     dd6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	88 23       	and	r24, r24
     dde:	c9 f3       	breq	.-14     	; 0xdd2 <updateLED()+0x13a>
     de0:	83 e2       	ldi	r24, 0x23	; 35
     de2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	e9 cf       	rjmp	.-46     	; 0xdbc <updateLED()+0x124>
     dea:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <f_power_state>
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <updateLED()+0x15c>
     df2:	68 cf       	rjmp	.-304    	; 0xcc4 <updateLED()+0x2c>
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	8e e0       	ldi	r24, 0x0E	; 14
     df8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     dfc:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <active_step>
     e00:	e7 30       	cpi	r30, 0x07	; 7
     e02:	08 f0       	brcs	.+2      	; 0xe06 <updateLED()+0x16e>
     e04:	5f cf       	rjmp	.-322    	; 0xcc4 <updateLED()+0x2c>
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	88 27       	eor	r24, r24
     e0a:	e6 5f       	subi	r30, 0xF6	; 246
     e0c:	f8 4f       	sbci	r31, 0xF8	; 248
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__tablejump2__>
     e14:	15 07       	cpc	r17, r21
     e16:	11 07       	cpc	r17, r17
     e18:	24 07       	cpc	r18, r20
     e1a:	24 07       	cpc	r18, r20
     e1c:	2e 07       	cpc	r18, r30
     e1e:	3c 07       	cpc	r19, r28
     e20:	3c 07       	cpc	r19, r28
     e22:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	81 11       	cpse	r24, r1
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	8f e1       	ldi	r24, 0x1F	; 31
     e2e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	8e e1       	ldi	r24, 0x1E	; 30
     e36:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	8f e0       	ldi	r24, 0x0F	; 15
     e3e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	87 e2       	ldi	r24, 0x27	; 39
     e46:	81 cf       	rjmp	.-254    	; 0xd4a <updateLED()+0xb2>
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	8f e1       	ldi	r24, 0x1F	; 31
     e4c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e50:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	88 23       	and	r24, r24
     e58:	69 f3       	breq	.-38     	; 0xe34 <updateLED()+0x19c>
     e5a:	eb cf       	rjmp	.-42     	; 0xe32 <updateLED()+0x19a>
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	8f e1       	ldi	r24, 0x1F	; 31
     e60:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	8e e1       	ldi	r24, 0x1E	; 30
     e68:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e6c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	88 23       	and	r24, r24
     e74:	19 f3       	breq	.-58     	; 0xe3c <updateLED()+0x1a4>
     e76:	e1 cf       	rjmp	.-62     	; 0xe3a <updateLED()+0x1a2>
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	8f e1       	ldi	r24, 0x1F	; 31
     e7c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	8e e1       	ldi	r24, 0x1E	; 30
     e84:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	8f e0       	ldi	r24, 0x0F	; 15
     e8c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     e90:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <flash_statae>
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	88 23       	and	r24, r24
     e98:	a9 f2       	breq	.-86     	; 0xe44 <updateLED()+0x1ac>
     e9a:	d3 cf       	rjmp	.-90     	; 0xe42 <updateLED()+0x1aa>
     e9c:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <f_peltier_state>
     ea0:	88 23       	and	r24, r24
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <updateLED()+0x21a>
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	8d e1       	ldi	r24, 0x1D	; 29
     ea8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	8c e1       	ldi	r24, 0x1C	; 28
     eb0:	4c cf       	rjmp	.-360    	; 0xd4a <updateLED()+0xb2>
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	8d e1       	ldi	r24, 0x1D	; 29
     eb6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	f8 cf       	rjmp	.-16     	; 0xeae <updateLED()+0x216>
     ebe:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <flash_statae>
     ec2:	24 cf       	rjmp	.-440    	; 0xd0c <updateLED()+0x74>

00000ec4 <updateEEPROM()>:
_Z12updateEEPROMv():
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <is_update_infor>
     ecc:	88 23       	and	r24, r24
     ece:	51 f1       	breq	.+84     	; 0xf24 <updateEEPROM()+0x60>
     ed0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <is_update_infor>
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	c0 e0       	ldi	r28, 0x00	; 0
_ZN5EERefaSEh():
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <eeprom_write_byte>
_Z12updateEEPROMv():
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
     eec:	21 96       	adiw	r28, 0x01	; 1
     eee:	ca 30       	cpi	r28, 0x0A	; 10
     ef0:	d1 05       	cpc	r29, r1
     ef2:	91 f7       	brne	.-28     	; 0xed8 <updateEEPROM()+0x14>
_ZN5EERefaSEh():
     ef4:	65 e5       	ldi	r22, 0x55	; 85
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <eeprom_write_byte>
_Z12updateEEPROMv():
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
_ZN5EERefaSEh():
     f0a:	65 e5       	ldi	r22, 0x55	; 85
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <eeprom_write_byte>
_Z12updateEEPROMv():
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <delay>
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <enableTouch()>:
_Z11enableTouchv():
     f2a:	20 e3       	ldi	r18, 0x30	; 48
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	49 e3       	ldi	r20, 0x39	; 57
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	64 e2       	ldi	r22, 0x24	; 36
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	85 e9       	ldi	r24, 0x95	; 149
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     f3e:	20 e3       	ldi	r18, 0x30	; 48
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a e3       	ldi	r20, 0x3A	; 58
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	64 e2       	ldi	r22, 0x24	; 36
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	85 e9       	ldi	r24, 0x95	; 149
     f4c:	93 e0       	ldi	r25, 0x03	; 3
     f4e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     f52:	20 e3       	ldi	r18, 0x30	; 48
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	4b e3       	ldi	r20, 0x3B	; 59
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	64 e2       	ldi	r22, 0x24	; 36
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	85 e9       	ldi	r24, 0x95	; 149
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     f66:	20 e3       	ldi	r18, 0x30	; 48
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4c e3       	ldi	r20, 0x3C	; 60
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	64 e2       	ldi	r22, 0x24	; 36
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	85 e9       	ldi	r24, 0x95	; 149
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     f7a:	20 e3       	ldi	r18, 0x30	; 48
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4d e3       	ldi	r20, 0x3D	; 61
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	64 e2       	ldi	r22, 0x24	; 36
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	85 e9       	ldi	r24, 0x95	; 149
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     f8e:	20 e3       	ldi	r18, 0x30	; 48
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4e e3       	ldi	r20, 0x3E	; 62
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	64 e2       	ldi	r22, 0x24	; 36
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	85 e9       	ldi	r24, 0x95	; 149
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     fa2:	20 e3       	ldi	r18, 0x30	; 48
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4f e3       	ldi	r20, 0x3F	; 63
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	64 e2       	ldi	r22, 0x24	; 36
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	85 e9       	ldi	r24, 0x95	; 149
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     fb6:	20 e3       	ldi	r18, 0x30	; 48
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e4       	ldi	r20, 0x40	; 64
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	64 e2       	ldi	r22, 0x24	; 36
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	85 e9       	ldi	r24, 0x95	; 149
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <I2C::write(int, int, int)>
     fca:	64 e6       	ldi	r22, 0x64	; 100
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
     fd6:	2f e0       	ldi	r18, 0x0F	; 15
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	64 e2       	ldi	r22, 0x24	; 36
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	85 e9       	ldi	r24, 0x95	; 149
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <I2C::write(int, int, int)>

00000fea <Melody_Proc()>:
_Z11Melody_Procv():
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Sound_Update>
     ff2:	88 23       	and	r24, r24
     ff4:	09 f4       	brne	.+2      	; 0xff8 <Melody_Proc()+0xe>
     ff6:	e4 c0       	rjmp	.+456    	; 0x11c0 <Melody_Proc()+0x1d6>
     ff8:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
     ffc:	00 91 a5 02 	lds	r16, 0x02A5	; 0x8002a5 <pre_buzzer_tic>
    1000:	10 91 a6 02 	lds	r17, 0x02A6	; 0x8002a6 <pre_buzzer_tic+0x1>
    1004:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <pre_buzzer_tic+0x2>
    1008:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <pre_buzzer_tic+0x3>
    100c:	60 1b       	sub	r22, r16
    100e:	71 0b       	sbc	r23, r17
    1010:	82 0b       	sbc	r24, r18
    1012:	93 0b       	sbc	r25, r19
    1014:	66 34       	cpi	r22, 0x46	; 70
    1016:	71 05       	cpc	r23, r1
    1018:	81 05       	cpc	r24, r1
    101a:	91 05       	cpc	r25, r1
    101c:	08 f4       	brcc	.+2      	; 0x1020 <Melody_Proc()+0x36>
    101e:	d0 c0       	rjmp	.+416    	; 0x11c0 <Melody_Proc()+0x1d6>
    1020:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1024:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
    1028:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
    102c:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
    1030:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
    1034:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <Sound_Update>
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	29 f4       	brne	.+10     	; 0x1046 <Melody_Proc()+0x5c>
    103c:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
    1046:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__data_end>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	8e 0f       	add	r24, r30
    104e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end>
    1052:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <Sound_Num>
    1056:	91 30       	cpi	r25, 0x01	; 1
    1058:	09 f0       	breq	.+2      	; 0x105c <Melody_Proc()+0x72>
    105a:	36 c0       	rjmp	.+108    	; 0x10c8 <Melody_Proc()+0xde>
    105c:	ee 30       	cpi	r30, 0x0E	; 14
    105e:	e8 f4       	brcc	.+58     	; 0x109a <Melody_Proc()+0xb0>
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	88 27       	eor	r24, r24
    1064:	e9 5c       	subi	r30, 0xC9	; 201
    1066:	f7 4f       	sbci	r31, 0xF7	; 247
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__tablejump2__>
    106e:	6b 08       	sbc	r6, r11
    1070:	4d 08       	sbc	r4, r13
    1072:	45 08       	sbc	r4, r5
    1074:	4d 08       	sbc	r4, r13
    1076:	a4 08       	sbc	r10, r4
    1078:	4d 08       	sbc	r4, r13
    107a:	58 08       	sbc	r5, r8
    107c:	4d 08       	sbc	r4, r13
    107e:	94 08       	sbc	r9, r4
    1080:	4d 08       	sbc	r4, r13
    1082:	5e 08       	sbc	r5, r14
    1084:	4d 08       	sbc	r4, r13
    1086:	ac 08       	sbc	r10, r12
    1088:	80 08       	sbc	r8, r0
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	64 ee       	ldi	r22, 0xE4	; 228
    1092:	7c e0       	ldi	r23, 0x0C	; 12
    1094:	8e e2       	ldi	r24, 0x2E	; 46
    1096:	0e 94 f5 14 	call	0x29ea	; 0x29ea <tone(unsigned char, unsigned int, unsigned long)>
    109a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <is_touch_enable>
    109e:	81 11       	cpse	r24, r1
    10a0:	8f c0       	rjmp	.+286    	; 0x11c0 <Melody_Proc()+0x1d6>
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <is_touch_enable>
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <enableTouch()>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	60 ed       	ldi	r22, 0xD0	; 208
    10b8:	77 e0       	ldi	r23, 0x07	; 7
    10ba:	ec cf       	rjmp	.-40     	; 0x1094 <Melody_Proc()+0xaa>
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	60 eb       	ldi	r22, 0xB0	; 176
    10c4:	74 e0       	ldi	r23, 0x04	; 4
    10c6:	e6 cf       	rjmp	.-52     	; 0x1094 <Melody_Proc()+0xaa>
    10c8:	92 30       	cpi	r25, 0x02	; 2
    10ca:	21 f5       	brne	.+72     	; 0x1114 <Melody_Proc()+0x12a>
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	81 f3       	breq	.-32     	; 0x10b0 <Melody_Proc()+0xc6>
    10d0:	70 f4       	brcc	.+28     	; 0x10ee <Melody_Proc()+0x104>
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	11 f7       	brne	.-60     	; 0x109a <Melody_Proc()+0xb0>
    10d6:	8e e2       	ldi	r24, 0x2E	; 46
    10d8:	0e 94 85 18 	call	0x310a	; 0x310a <noTone(unsigned char)>
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	8e e2       	ldi	r24, 0x2E	; 46
    10e0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	8d e2       	ldi	r24, 0x2D	; 45
    10e8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    10ec:	d6 cf       	rjmp	.-84     	; 0x109a <Melody_Proc()+0xb0>
    10ee:	86 30       	cpi	r24, 0x06	; 6
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <Melody_Proc()+0x10e>
    10f2:	88 30       	cpi	r24, 0x08	; 8
    10f4:	29 f0       	breq	.+10     	; 0x1100 <Melody_Proc()+0x116>
    10f6:	d1 cf       	rjmp	.-94     	; 0x109a <Melody_Proc()+0xb0>
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	8d e2       	ldi	r24, 0x2D	; 45
    10fc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    1100:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <Sound_Update>
    1104:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end>
    1108:	8e e2       	ldi	r24, 0x2E	; 46
    110a:	0e 94 85 18 	call	0x310a	; 0x310a <noTone(unsigned char)>
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	8e e2       	ldi	r24, 0x2E	; 46
    1112:	ea cf       	rjmp	.-44     	; 0x10e8 <Melody_Proc()+0xfe>
    1114:	93 30       	cpi	r25, 0x03	; 3
    1116:	71 f4       	brne	.+28     	; 0x1134 <Melody_Proc()+0x14a>
    1118:	85 30       	cpi	r24, 0x05	; 5
    111a:	b1 f0       	breq	.+44     	; 0x1148 <Melody_Proc()+0x15e>
    111c:	d8 f4       	brcc	.+54     	; 0x1154 <Melody_Proc()+0x16a>
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	d1 f2       	breq	.-76     	; 0x10d6 <Melody_Proc()+0xec>
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	09 f0       	breq	.+2      	; 0x1128 <Melody_Proc()+0x13e>
    1126:	b9 cf       	rjmp	.-142    	; 0x109a <Melody_Proc()+0xb0>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	60 e4       	ldi	r22, 0x40	; 64
    1130:	76 e0       	ldi	r23, 0x06	; 6
    1132:	b0 cf       	rjmp	.-160    	; 0x1094 <Melody_Proc()+0xaa>
    1134:	94 30       	cpi	r25, 0x04	; 4
    1136:	d1 f4       	brne	.+52     	; 0x116c <Melody_Proc()+0x182>
    1138:	85 30       	cpi	r24, 0x05	; 5
    113a:	b1 f3       	breq	.-20     	; 0x1128 <Melody_Proc()+0x13e>
    113c:	58 f4       	brcc	.+22     	; 0x1154 <Melody_Proc()+0x16a>
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	69 f0       	breq	.+26     	; 0x115c <Melody_Proc()+0x172>
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	09 f0       	breq	.+2      	; 0x1148 <Melody_Proc()+0x15e>
    1146:	a9 cf       	rjmp	.-174    	; 0x109a <Melody_Proc()+0xb0>
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	64 ec       	ldi	r22, 0xC4	; 196
    1150:	79 e0       	ldi	r23, 0x09	; 9
    1152:	a0 cf       	rjmp	.-192    	; 0x1094 <Melody_Proc()+0xaa>
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	69 f6       	brne	.-102    	; 0x10f2 <Melody_Proc()+0x108>
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	c5 cf       	rjmp	.-118    	; 0x10e6 <Melody_Proc()+0xfc>
    115c:	8e e2       	ldi	r24, 0x2E	; 46
    115e:	0e 94 85 18 	call	0x310a	; 0x310a <noTone(unsigned char)>
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	8e e2       	ldi	r24, 0x2E	; 46
    1166:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    116a:	f6 cf       	rjmp	.-20     	; 0x1158 <Melody_Proc()+0x16e>
    116c:	95 30       	cpi	r25, 0x05	; 5
    116e:	09 f0       	breq	.+2      	; 0x1172 <Melody_Proc()+0x188>
    1170:	94 cf       	rjmp	.-216    	; 0x109a <Melody_Proc()+0xb0>
    1172:	ee 30       	cpi	r30, 0x0E	; 14
    1174:	08 f0       	brcs	.+2      	; 0x1178 <Melody_Proc()+0x18e>
    1176:	91 cf       	rjmp	.-222    	; 0x109a <Melody_Proc()+0xb0>
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	88 27       	eor	r24, r24
    117c:	ed 53       	subi	r30, 0x3D	; 61
    117e:	f7 4f       	sbci	r31, 0xF7	; 247
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__tablejump2__>
    1186:	6b 08       	sbc	r6, r11
    1188:	4d 08       	sbc	r4, r13
    118a:	5e 08       	sbc	r5, r14
    118c:	4d 08       	sbc	r4, r13
    118e:	94 08       	sbc	r9, r4
    1190:	4d 08       	sbc	r4, r13
    1192:	58 08       	sbc	r5, r8
    1194:	4d 08       	sbc	r4, r13
    1196:	a4 08       	sbc	r10, r4
    1198:	4d 08       	sbc	r4, r13
    119a:	45 08       	sbc	r4, r5
    119c:	4d 08       	sbc	r4, r13
    119e:	ac 08       	sbc	r10, r12
    11a0:	d1 08       	sbc	r13, r1
    11a2:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <Sound_Update>
    11a6:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__data_end>
    11aa:	8e e2       	ldi	r24, 0x2E	; 46
    11ac:	0e 94 85 18 	call	0x310a	; 0x310a <noTone(unsigned char)>
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	8e e2       	ldi	r24, 0x2E	; 46
    11b4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <working_mode>
    11be:	6d cf       	rjmp	.-294    	; 0x109a <Melody_Proc()+0xb0>
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <loop>:
loop():
    11c6:	0e 94 8e 03 	call	0x71c	; 0x71c <Key_Scan()>
    11ca:	0e 94 ff 03 	call	0x7fe	; 0x7fe <updateTemperatrue()>
    11ce:	0e 94 4c 06 	call	0xc98	; 0xc98 <updateLED()>
    11d2:	0e 94 40 04 	call	0x880	; 0x880 <updatePSI()>
    11d6:	0e 94 29 05 	call	0xa52	; 0xa52 <updateMotor()>
    11da:	0e 94 f5 07 	call	0xfea	; 0xfea <Melody_Proc()>
    11de:	0c 94 62 07 	jmp	0xec4	; 0xec4 <updateEEPROM()>

000011e2 <_GLOBAL__sub_I_Key>:
_GLOBAL__sub_I_Key():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:30
unsigned char f_ble_state = 0;


signed int pulses = 0;

unsigned long pre_key_readtime = millis();
    11e2:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    11e6:	60 93 c5 02 	sts	0x02C5, r22	; 0x8002c5 <pre_key_readtime>
    11ea:	70 93 c6 02 	sts	0x02C6, r23	; 0x8002c6 <pre_key_readtime+0x1>
    11ee:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <pre_key_readtime+0x2>
    11f2:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <pre_key_readtime+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:31
unsigned long pre_temp_readtime = millis();
    11f6:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    11fa:	60 93 c1 02 	sts	0x02C1, r22	; 0x8002c1 <pre_temp_readtime>
    11fe:	70 93 c2 02 	sts	0x02C2, r23	; 0x8002c2 <pre_temp_readtime+0x1>
    1202:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <pre_temp_readtime+0x2>
    1206:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <pre_temp_readtime+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:32
unsigned long pre_psi_readtime = millis();
    120a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    120e:	60 93 bd 02 	sts	0x02BD, r22	; 0x8002bd <pre_psi_readtime>
    1212:	70 93 be 02 	sts	0x02BE, r23	; 0x8002be <pre_psi_readtime+0x1>
    1216:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <pre_psi_readtime+0x2>
    121a:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <pre_psi_readtime+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:33
unsigned long pre_valve_close_time = millis();
    121e:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1222:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <pre_valve_close_time>
    1226:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <pre_valve_close_time+0x1>
    122a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <pre_valve_close_time+0x2>
    122e:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <pre_valve_close_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:34
unsigned long pre_eeprom_time = millis();
    1232:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1236:	60 93 b5 02 	sts	0x02B5, r22	; 0x8002b5 <pre_eeprom_time>
    123a:	70 93 b6 02 	sts	0x02B6, r23	; 0x8002b6 <pre_eeprom_time+0x1>
    123e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <pre_eeprom_time+0x2>
    1242:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <pre_eeprom_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:35
unsigned long pre_encodercheck_time = millis();
    1246:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    124a:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <pre_encodercheck_time>
    124e:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <pre_encodercheck_time+0x1>
    1252:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <pre_encodercheck_time+0x2>
    1256:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <pre_encodercheck_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:36
unsigned long pre_motor_stop_time = millis();
    125a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    125e:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <pre_motor_stop_time>
    1262:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <pre_motor_stop_time+0x1>
    1266:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <pre_motor_stop_time+0x2>
    126a:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <pre_motor_stop_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:37
unsigned long pre_led_flash_time = millis();
    126e:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1272:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <pre_led_flash_time>
    1276:	70 93 aa 02 	sts	0x02AA, r23	; 0x8002aa <pre_led_flash_time+0x1>
    127a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <pre_led_flash_time+0x2>
    127e:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <pre_led_flash_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:38
unsigned long pre_buzzer_tic = millis();
    1282:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1286:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <pre_buzzer_tic>
    128a:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <pre_buzzer_tic+0x1>
    128e:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <pre_buzzer_tic+0x2>
    1292:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <pre_buzzer_tic+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:39
unsigned long pre_user_motor_worktime = millis();
    1296:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    129a:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <pre_user_motor_worktime>
    129e:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <pre_user_motor_worktime+0x1>
    12a2:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <pre_user_motor_worktime+0x2>
    12a6:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <pre_user_motor_worktime+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:41

unsigned long pre_touch_stabil_time = millis();
    12aa:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    12ae:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <pre_touch_stabil_time>
    12b2:	70 93 9e 02 	sts	0x029E, r23	; 0x80029e <pre_touch_stabil_time+0x1>
    12b6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <pre_touch_stabil_time+0x2>
    12ba:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <pre_touch_stabil_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:44
unsigned char is_touch_enable;

unsigned long pre_led_update_time = millis();
    12be:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    12c2:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <pre_led_update_time>
    12c6:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <pre_led_update_time+0x1>
    12ca:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <pre_led_update_time+0x2>
    12ce:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <pre_led_update_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:51
unsigned char mokup_motor_run_state;
unsigned char mokup_motor_stop_state;
// for debug
unsigned char ch;

SoftwareSerial ble(18, 19); // RX, TX
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	43 e1       	ldi	r20, 0x13	; 19
    12d6:	62 e1       	ldi	r22, 0x12	; 18
    12d8:	88 e7       	ldi	r24, 0x78	; 120
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>

000012e0 <_GLOBAL__sub_D_Key>:
_GLOBAL__sub_D_Key():
    12e0:	88 e7       	ldi	r24, 0x78	; 120
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <SoftwareSerial::~SoftwareSerial()>

000012e8 <readEEPROM()>:
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:796

  for (int i = 0; i < 2; i++)
  {
    data[i] = EEPROM.read(addr);
    addr += sizeof(signed int);
    delay(1);
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:806
    //uint8_t tx_set_adv[19] = {0x41, 0x54, 0x2b, 0x41, 0x44, 0x56, 0x44, 0x41, 0x54, 0x41, 0x3d, 0x69, 0x6e, 0x73, 0x75, 0x41, 0x49, 0x44, 0x0D};
    //uint8_t tx_set_man[17] = {0x41, 0x54, 0x2b, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x3d, 0x69, 0x6e, 0x73, 0x75, 0x41, 0x49, 0x44, 0x0D};
    //uint8_t tx_at[3] = {0x41, 0x54, 0x0D};
    //uint8_t tx_atnF[5] = {0x41, 0x54, 0x26, 0x46, 0x0D};

    is_update_infor = true;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <is_update_infor>
_ZN5Print5writeEPKc():
    1306:	66 e1       	ldi	r22, 0x16	; 22
    1308:	72 e0       	ldi	r23, 0x02	; 2
    130a:	88 e7       	ldi	r24, 0x78	; 120
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*) [clone .part.0]>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:810

    // TODO : update Ble Data
    ble.write("AT");
    ble.write(0x0D);
    1312:	6d e0       	ldi	r22, 0x0D	; 13
    1314:	88 e7       	ldi	r24, 0x78	; 120
    1316:	92 e0       	ldi	r25, 0x02	; 2
    1318:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <SoftwareSerial::write(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:811
    delay(300);
    131c:	6c e2       	ldi	r22, 0x2C	; 44
    131e:	71 e0       	ldi	r23, 0x01	; 1
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
_ZN5Print5writeEPKc():
    1328:	69 e1       	ldi	r22, 0x19	; 25
    132a:	72 e0       	ldi	r23, 0x02	; 2
    132c:	88 e7       	ldi	r24, 0x78	; 120
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*) [clone .part.0]>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:814

    ble.write("AT+MANUF=insuAID");
    ble.write(0x0D);
    1334:	6d e0       	ldi	r22, 0x0D	; 13
    1336:	88 e7       	ldi	r24, 0x78	; 120
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <SoftwareSerial::write(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:815
    delay(300);
    133e:	6c e2       	ldi	r22, 0x2C	; 44
    1340:	71 e0       	ldi	r23, 0x01	; 1
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <delay>
_ZN5Print5writeEPKc():
    134a:	6a e2       	ldi	r22, 0x2A	; 42
    134c:	72 e0       	ldi	r23, 0x02	; 2
    134e:	88 e7       	ldi	r24, 0x78	; 120
    1350:	92 e0       	ldi	r25, 0x02	; 2
    1352:	0e 94 08 02 	call	0x410	; 0x410 <Print::write(char const*) [clone .part.0]>
_Z10readEEPROMv():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:818

    ble.write("AT+ADVDATA=insuAID");
    ble.write(0x0D);
    1356:	6d e0       	ldi	r22, 0x0D	; 13
    1358:	88 e7       	ldi	r24, 0x78	; 120
    135a:	92 e0       	ldi	r25, 0x02	; 2
    135c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <SoftwareSerial::write(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:819
    delay(300);
    1360:	6c e2       	ldi	r22, 0x2C	; 44
    1362:	71 e0       	ldi	r23, 0x01	; 1
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <delay>

0000136c <setup>:
setup():
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:55

SoftwareSerial ble(18, 19); // RX, TX

void setup() {
  // put your setup code here, to run once:
  Serial.end();
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	94 e0       	ldi	r25, 0x04	; 4
    1370:	0e 94 87 13 	call	0x270e	; 0x270e <HardwareSerial::end()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:56
  Serial1.end();
    1374:	8d e9       	ldi	r24, 0x9D	; 157
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	0e 94 87 13 	call	0x270e	; 0x270e <HardwareSerial::end()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:58

  pinMode(BLE_STATE, INPUT);
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	8c e2       	ldi	r24, 0x2C	; 44
    1380:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:62

  // after connected keep high -> atmode
  // after connected keep low  -> bypass mode // default
  pinMode(BLE_MODE, OUTPUT);
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	8b e2       	ldi	r24, 0x2B	; 43
    1388:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:63
  digitalWrite(BLE_MODE, LOW);
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	8b e2       	ldi	r24, 0x2B	; 43
    1390:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:67

  // rising edge -> uart off
  // falling edge-> uart on
  pinMode(BLE_UART, OUTPUT);
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	8a e2       	ldi	r24, 0x2A	; 42
    1398:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:68
  digitalWrite(BLE_UART, LOW);
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	8a e2       	ldi	r24, 0x2A	; 42
    13a0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:70

  ble.begin(9600);
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	55 e2       	ldi	r21, 0x25	; 37
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	88 e7       	ldi	r24, 0x78	; 120
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <SoftwareSerial::begin(long)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:72

  I2c.begin();
    13b4:	85 e9       	ldi	r24, 0x95	; 149
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    13b8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <I2C::begin()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:73
  I2c.timeOut(2000);
    13bc:	60 ed       	ldi	r22, 0xD0	; 208
    13be:	77 e0       	ldi	r23, 0x07	; 7
    13c0:	85 e9       	ldi	r24, 0x95	; 149
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <I2C::timeOut(unsigned int)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:74
  I2c.pullup(true);
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	85 e9       	ldi	r24, 0x95	; 149
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <I2C::pullup(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:77

  // motor
  pinMode(MOTOR_PORT_F, OUTPUT);
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	88 e0       	ldi	r24, 0x08	; 8
    13d6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:78
  digitalWrite(MOTOR_PORT_F, LOW);
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:80

  pinMode(MOTOR_PORT_R, OUTPUT);
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	87 e0       	ldi	r24, 0x07	; 7
    13e6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:81
  digitalWrite(MOTOR_PORT_R, LOW);
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	87 e0       	ldi	r24, 0x07	; 7
    13ee:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:83

  pinMode(MOTOR_SLEEP, OUTPUT);
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	89 e0       	ldi	r24, 0x09	; 9
    13f6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:84
  digitalWrite(MOTOR_SLEEP, LOW);
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	89 e0       	ldi	r24, 0x09	; 9
    13fe:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:86

  pinMode(MOTOR_FALT, INPUT_PULLUP);
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	86 e0       	ldi	r24, 0x06	; 6
    1406:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:87
  pinMode(ENCODER_A, INPUT_PULLUP);
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:88
  pinMode(ENCODER_B, INPUT_PULLUP);
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:89
  attachInterrupt(0, A_CHANGE, CHANGE);
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	6d ed       	ldi	r22, 0xDD	; 221
    1420:	71 e0       	ldi	r23, 0x01	; 1
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <attachInterrupt>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:92

  // temp control
  pinMode(PELTIER_PORT, OUTPUT);
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	88 e1       	ldi	r24, 0x18	; 24
    142c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:93
  digitalWrite(PELTIER_PORT, LOW);
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	88 e1       	ldi	r24, 0x18	; 24
    1434:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:95

  pinMode(PELTIER_FAN, OUTPUT);
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	8a e1       	ldi	r24, 0x1A	; 26
    143c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:96
  digitalWrite(PELTIER_FAN, LOW);
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	8a e1       	ldi	r24, 0x1A	; 26
    1444:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:99

  // psi
  pinMode(SOLENOID_PORT, OUTPUT);
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	87 e1       	ldi	r24, 0x17	; 23
    144c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:100
  digitalWrite(SOLENOID_PORT, LOW);
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	87 e1       	ldi	r24, 0x17	; 23
    1454:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:102

  pinMode(AIRPUMP_PORT, OUTPUT);
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	89 e1       	ldi	r24, 0x19	; 25
    145c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:103
  digitalWrite(AIRPUMP_PORT, LOW);
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	89 e1       	ldi	r24, 0x19	; 25
    1464:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:106


  pinMode(BUZZER_PWM, OUTPUT);
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	8e e2       	ldi	r24, 0x2E	; 46
    146c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:107
  noTone(BUZZER_PWM);
    1470:	8e e2       	ldi	r24, 0x2E	; 46
    1472:	0e 94 85 18 	call	0x310a	; 0x310a <noTone(unsigned char)>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:108
  digitalWrite(BUZZER_PWM, LOW);
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	8e e2       	ldi	r24, 0x2E	; 46
    147a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:110

  pinMode(BUZZER_POWER, OUTPUT);
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	8d e2       	ldi	r24, 0x2D	; 45
    1482:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:111
  digitalWrite(BUZZER_POWER, LOW);
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	8d e2       	ldi	r24, 0x2D	; 45
    148a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:113

  pinMode(LED_PWR, OUTPUT);
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	84 e2       	ldi	r24, 0x24	; 36
    1492:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:114
  pinMode(LED_MTF, OUTPUT);
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	85 e2       	ldi	r24, 0x25	; 37
    149a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:115
  pinMode(LED_MTR, OUTPUT);
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	88 e2       	ldi	r24, 0x28	; 40
    14a2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:116
  pinMode(LED_BLE, OUTPUT);
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	89 e2       	ldi	r24, 0x29	; 41
    14aa:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:117
  pinMode(LED_BAT_ICO, OUTPUT);
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	82 e2       	ldi	r24, 0x22	; 34
    14b2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:118
  pinMode(LED_BAT_STATE1, OUTPUT);
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	83 e2       	ldi	r24, 0x23	; 35
    14ba:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:119
  pinMode(LED_BAT_STATE2, OUTPUT);
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	81 e2       	ldi	r24, 0x21	; 33
    14c2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:120
  pinMode(LED_BAT_STATE3, OUTPUT);
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	80 e2       	ldi	r24, 0x20	; 32
    14ca:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:121
  pinMode(LED_MOTOR_ICO, OUTPUT);
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	8e e0       	ldi	r24, 0x0E	; 14
    14d2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:122
  pinMode(LED_MOTOR_STATE1, OUTPUT);
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	8f e1       	ldi	r24, 0x1F	; 31
    14da:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:123
  pinMode(LED_MOTOR_STATE2, OUTPUT);
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	8e e1       	ldi	r24, 0x1E	; 30
    14e2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:124
  pinMode(LED_MOTOR_STATE3, OUTPUT);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	8f e0       	ldi	r24, 0x0F	; 15
    14ea:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:125
  pinMode(LED_MOTOR_STATE4, OUTPUT);
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	87 e2       	ldi	r24, 0x27	; 39
    14f2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:126
  pinMode(LED_TEMP_DANGER, OUTPUT);
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	8d e1       	ldi	r24, 0x1D	; 29
    14fa:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:127
  pinMode(LED_TEMP_NORMAL, OUTPUT);
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	8c e1       	ldi	r24, 0x1C	; 28
    1502:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:129

  digitalWrite(LED_PWR, HIGH);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	84 e2       	ldi	r24, 0x24	; 36
    150a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:130
  digitalWrite(LED_MTF, HIGH);
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	85 e2       	ldi	r24, 0x25	; 37
    1512:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:131
  digitalWrite(LED_MTR, HIGH);
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	88 e2       	ldi	r24, 0x28	; 40
    151a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:132
  digitalWrite(LED_BLE, HIGH);
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	89 e2       	ldi	r24, 0x29	; 41
    1522:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:133
  digitalWrite(LED_BAT_ICO, HIGH);
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	82 e2       	ldi	r24, 0x22	; 34
    152a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:134
  digitalWrite(LED_BAT_STATE1, HIGH);
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	83 e2       	ldi	r24, 0x23	; 35
    1532:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:135
  digitalWrite(LED_BAT_STATE2, HIGH);
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	81 e2       	ldi	r24, 0x21	; 33
    153a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:136
  digitalWrite(LED_BAT_STATE3, HIGH);
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:137
  digitalWrite(LED_MOTOR_ICO, HIGH);
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	8e e0       	ldi	r24, 0x0E	; 14
    154a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:138
  digitalWrite(LED_MOTOR_STATE1, HIGH);
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	8f e1       	ldi	r24, 0x1F	; 31
    1552:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:139
  digitalWrite(LED_MOTOR_STATE2, HIGH);
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	8e e1       	ldi	r24, 0x1E	; 30
    155a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:140
  digitalWrite(LED_MOTOR_STATE3, HIGH);
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	8f e0       	ldi	r24, 0x0F	; 15
    1562:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:141
  digitalWrite(LED_MOTOR_STATE4, HIGH);
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	87 e2       	ldi	r24, 0x27	; 39
    156a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:142
  digitalWrite(LED_TEMP_DANGER, HIGH);
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	8d e1       	ldi	r24, 0x1D	; 29
    1572:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:143
  digitalWrite(LED_TEMP_NORMAL, HIGH);
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	8c e1       	ldi	r24, 0x1C	; 28
    157a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:145

  pulses = 0;
    157e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <pulses+0x1>
    1582:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <pulses>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:146
  pre_encodercheck_time = millis();
    1586:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    158a:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <pre_encodercheck_time>
    158e:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <pre_encodercheck_time+0x1>
    1592:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <pre_encodercheck_time+0x2>
    1596:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <pre_encodercheck_time+0x3>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:148

  active_step = STEP_USER_INPUT;
    159a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <active_step>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:149
  is_target_psi_set = false;
    159e:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <is_target_psi_set>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:151

  readEEPROM();
    15a2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <readEEPROM()>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:154

  //working_mode = MODE_AUTO; // auto mode is default
  working_mode = MODE_MANUAL;
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <working_mode>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:156

  Sound_Update = 2;
    15ac:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <Sound_Update>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:157
  Sound_Num = 3;
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Sound_Num>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:158
  is_touch_enable = 0;
    15b6:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <is_touch_enable>
C:\Users\DH\Documents\GitHub\MCure\insulin_pen(REVB)\insulin_peb_revb/insulin_peb_revb.ino:159
}
    15ba:	08 95       	ret

000015bc <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:331

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	08 95       	ret

000015c2 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    15c2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <TwoWire::rxBufferLength>
    15c6:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <TwoWire::rxBufferIndex>
    15ca:	89 1b       	sub	r24, r25
    15cc:	99 0b       	sbc	r25, r25
    15ce:	08 95       	ret

000015d0 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    15d0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <TwoWire::rxBufferIndex>
    15d4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <TwoWire::rxBufferLength>
    15d8:	2f ef       	ldi	r18, 0xFF	; 255
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	98 17       	cp	r25, r24
    15de:	48 f4       	brcc	.+18     	; 0x15f2 <TwoWire::read()+0x22>
    15e0:	e9 2f       	mov	r30, r25
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	e9 5f       	subi	r30, 0xF9	; 249
    15e6:	fc 4f       	sbci	r31, 0xFC	; 252
    15e8:	20 81       	ld	r18, Z
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	9f 5f       	subi	r25, 0xFF	; 255
    15ee:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <TwoWire::rxBufferIndex>
    15f2:	c9 01       	movw	r24, r18
    15f4:	08 95       	ret

000015f6 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    15f6:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <TwoWire::rxBufferIndex>
    15fa:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <TwoWire::rxBufferLength>
    15fe:	e8 17       	cp	r30, r24
    1600:	30 f4       	brcc	.+12     	; 0x160e <TwoWire::peek()+0x18>
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	e9 5f       	subi	r30, 0xF9	; 249
    1606:	fc 4f       	sbci	r31, 0xFC	; 252
    1608:	80 81       	ld	r24, Z
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	08 95       	ret
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	9f ef       	ldi	r25, 0xFF	; 255
    1612:	08 95       	ret

00001614 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1614:	08 95       	ret

00001616 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	1f 92       	push	r1
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	69 83       	std	Y+1, r22	; 0x01
    1622:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <TwoWire::transmitting>
    1626:	22 23       	and	r18, r18
    1628:	f9 f0       	breq	.+62     	; 0x1668 <TwoWire::write(unsigned char)+0x52>
    162a:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <TwoWire::txBufferLength>
    162e:	20 32       	cpi	r18, 0x20	; 32
    1630:	58 f0       	brcs	.+22     	; 0x1648 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	fc 01       	movw	r30, r24
    1638:	33 83       	std	Z+3, r19	; 0x03
    163a:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0f 90       	pop	r0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret
    1648:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <TwoWire::txBufferIndex>
    164c:	e8 2f       	mov	r30, r24
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	eb 51       	subi	r30, 0x1B	; 27
    1652:	fd 4f       	sbci	r31, 0xFD	; 253
    1654:	99 81       	ldd	r25, Y+1	; 0x01
    1656:	90 83       	st	Z, r25
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <TwoWire::txBufferIndex>
    165e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <TwoWire::txBufferLength>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	ec cf       	rjmp	.-40     	; 0x1640 <TwoWire::write(unsigned char)+0x2a>
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <twi_transmit>
    1672:	f7 cf       	rjmp	.-18     	; 0x1662 <TwoWire::write(unsigned char)+0x4c>

00001674 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	7c 01       	movw	r14, r24
    1686:	cb 01       	movw	r24, r22
    1688:	8a 01       	movw	r16, r20
    168a:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <TwoWire::transmitting>
    168e:	22 23       	and	r18, r18
    1690:	89 f0       	breq	.+34     	; 0x16b4 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1692:	eb 01       	movw	r28, r22
    1694:	6b 01       	movw	r12, r22
    1696:	c4 0e       	add	r12, r20
    1698:	d5 1e       	adc	r13, r21
    169a:	cc 15       	cp	r28, r12
    169c:	dd 05       	cpc	r29, r13
    169e:	69 f0       	breq	.+26     	; 0x16ba <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    16a0:	69 91       	ld	r22, Y+
    16a2:	d7 01       	movw	r26, r14
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	01 90       	ld	r0, Z+
    16aa:	f0 81       	ld	r31, Z
    16ac:	e0 2d       	mov	r30, r0
    16ae:	c7 01       	movw	r24, r14
    16b0:	19 95       	eicall
    16b2:	f3 cf       	rjmp	.-26     	; 0x169a <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    16b4:	64 2f       	mov	r22, r20
    16b6:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <twi_transmit>
    16ba:	c8 01       	movw	r24, r16
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	08 95       	ret

000016ce <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    16ce:	e6 ed       	ldi	r30, 0xD6	; 214
    16d0:	f2 e0       	ldi	r31, 0x02	; 2
    16d2:	13 82       	std	Z+3, r1	; 0x03
    16d4:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    16d6:	88 ee       	ldi	r24, 0xE8	; 232
    16d8:	93 e0       	ldi	r25, 0x03	; 3
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	84 83       	std	Z+4, r24	; 0x04
    16e0:	95 83       	std	Z+5, r25	; 0x05
    16e2:	a6 83       	std	Z+6, r26	; 0x06
    16e4:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:54
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    16e6:	81 e4       	ldi	r24, 0x41	; 65
    16e8:	92 e0       	ldi	r25, 0x02	; 2
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:335
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    16ee:	08 95       	ret

000016f0 <twi_transmit>:
twi_transmit():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16f0:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <twi_txBufferLength>
    16f4:	26 0f       	add	r18, r22
    16f6:	33 27       	eor	r19, r19
    16f8:	33 1f       	adc	r19, r19
    16fa:	21 32       	cpi	r18, 0x21	; 33
    16fc:	31 05       	cpc	r19, r1
    16fe:	ec f4       	brge	.+58     	; 0x173a <twi_transmit+0x4a>
    1700:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <twi_state>
    1704:	fc 01       	movw	r30, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	24 30       	cpi	r18, 0x04	; 4
    170c:	69 f0       	breq	.+26     	; 0x1728 <twi_transmit+0x38>
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	08 95       	ret
    1712:	a0 91 49 03 	lds	r26, 0x0349	; 0x800349 <twi_txBufferLength>
    1716:	21 91       	ld	r18, Z+
    1718:	ac 01       	movw	r20, r24
    171a:	45 5b       	subi	r20, 0xB5	; 181
    171c:	5c 4f       	sbci	r21, 0xFC	; 252
    171e:	a4 0f       	add	r26, r20
    1720:	b5 2f       	mov	r27, r21
    1722:	b1 1d       	adc	r27, r1
    1724:	2c 93       	st	X, r18
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	86 17       	cp	r24, r22
    172a:	98 f3       	brcs	.-26     	; 0x1712 <twi_transmit+0x22>
    172c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_txBufferLength>
    1730:	68 0f       	add	r22, r24
    1732:	60 93 49 03 	sts	0x0349, r22	; 0x800349 <twi_txBufferLength>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	08 95       	ret
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	08 95       	ret

0000173e <twi_stop>:
twi_stop():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:368
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    173e:	85 ed       	ldi	r24, 0xD5	; 213
    1740:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:372

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1744:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1748:	84 fd       	sbrc	r24, 4
    174a:	fc cf       	rjmp	.-8      	; 0x1744 <twi_stop+0x6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:377
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    174c:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:378
}
    1750:	08 95       	ret

00001752 <twi_releaseBus>:
twi_releaseBus():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:389
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1752:	85 ec       	ldi	r24, 0xC5	; 197
    1754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:392

  // update twi state
  twi_state = TWI_READY;
    1758:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:393
}
    175c:	08 95       	ret

0000175e <__vector_39>:
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:396

ISR(TWI_vect)
{
    175e:	1f 92       	push	r1
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	0f 92       	push	r0
    1766:	11 24       	eor	r1, r1
    1768:	0b b6       	in	r0, 0x3b	; 59
    176a:	0f 92       	push	r0
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  switch(TW_STATUS){
    1784:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1788:	88 7f       	andi	r24, 0xF8	; 248
    178a:	80 36       	cpi	r24, 0x60	; 96
    178c:	09 f4       	brne	.+2      	; 0x1790 <__vector_39+0x32>
    178e:	4e c0       	rjmp	.+156    	; 0x182c <__vector_39+0xce>
    1790:	08 f0       	brcs	.+2      	; 0x1794 <__vector_39+0x36>
    1792:	41 c0       	rjmp	.+130    	; 0x1816 <__vector_39+0xb8>
    1794:	88 32       	cpi	r24, 0x28	; 40
    1796:	09 f4       	brne	.+2      	; 0x179a <__vector_39+0x3c>
    1798:	aa c0       	rjmp	.+340    	; 0x18ee <__vector_39+0x190>
    179a:	28 f5       	brcc	.+74     	; 0x17e6 <__vector_39+0x88>
    179c:	80 31       	cpi	r24, 0x10	; 16
    179e:	09 f4       	brne	.+2      	; 0x17a2 <__vector_39+0x44>
    17a0:	9e c0       	rjmp	.+316    	; 0x18de <__vector_39+0x180>
    17a2:	c8 f4       	brcc	.+50     	; 0x17d6 <__vector_39+0x78>
    17a4:	88 23       	and	r24, r24
    17a6:	09 f4       	brne	.+2      	; 0x17aa <__vector_39+0x4c>
    17a8:	fb c0       	rjmp	.+502    	; 0x19a0 <__vector_39+0x242>
    17aa:	88 30       	cpi	r24, 0x08	; 8
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <__vector_39+0x52>
    17ae:	97 c0       	rjmp	.+302    	; 0x18de <__vector_39+0x180>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    17d6:	88 31       	cpi	r24, 0x18	; 24
    17d8:	09 f4       	brne	.+2      	; 0x17dc <__vector_39+0x7e>
    17da:	89 c0       	rjmp	.+274    	; 0x18ee <__vector_39+0x190>
    17dc:	80 32       	cpi	r24, 0x20	; 32
    17de:	41 f7       	brne	.-48     	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:432
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    17e0:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <twi_error>
    17e4:	15 c0       	rjmp	.+42     	; 0x1810 <__vector_39+0xb2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    17e6:	80 34       	cpi	r24, 0x40	; 64
    17e8:	09 f4       	brne	.+2      	; 0x17ec <__vector_39+0x8e>
    17ea:	9e c0       	rjmp	.+316    	; 0x1928 <__vector_39+0x1ca>
    17ec:	48 f4       	brcc	.+18     	; 0x1800 <__vector_39+0xa2>
    17ee:	80 33       	cpi	r24, 0x30	; 48
    17f0:	b9 f3       	breq	.-18     	; 0x17e0 <__vector_39+0x82>
    17f2:	88 33       	cpi	r24, 0x38	; 56
    17f4:	e9 f6       	brne	.-70     	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:436
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    17f6:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <twi_error>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:437
      twi_releaseBus();
    17fa:	0e 94 a9 0b 	call	0x1752	; 0x1752 <twi_releaseBus>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:438
      break;
    17fe:	d8 cf       	rjmp	.-80     	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1800:	80 35       	cpi	r24, 0x50	; 80
    1802:	09 f4       	brne	.+2      	; 0x1806 <__vector_39+0xa8>
    1804:	85 c0       	rjmp	.+266    	; 0x1910 <__vector_39+0x1b2>
    1806:	88 35       	cpi	r24, 0x58	; 88
    1808:	09 f4       	brne	.+2      	; 0x180c <__vector_39+0xae>
    180a:	96 c0       	rjmp	.+300    	; 0x1938 <__vector_39+0x1da>
    180c:	88 34       	cpi	r24, 0x48	; 72
    180e:	81 f6       	brne	.-96     	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:555
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1810:	0e 94 9f 0b 	call	0x173e	; 0x173e <twi_stop>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
      break;
  }
}
    1814:	cd cf       	rjmp	.-102    	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1816:	88 39       	cpi	r24, 0x98	; 152
    1818:	09 f4       	brne	.+2      	; 0x181c <__vector_39+0xbe>
    181a:	8c c0       	rjmp	.+280    	; 0x1934 <__vector_39+0x1d6>
    181c:	38 f5       	brcc	.+78     	; 0x186c <__vector_39+0x10e>
    181e:	88 37       	cpi	r24, 0x78	; 120
    1820:	29 f0       	breq	.+10     	; 0x182c <__vector_39+0xce>
    1822:	50 f4       	brcc	.+20     	; 0x1838 <__vector_39+0xda>
    1824:	88 36       	cpi	r24, 0x68	; 104
    1826:	11 f0       	breq	.+4      	; 0x182c <__vector_39+0xce>
    1828:	80 37       	cpi	r24, 0x70	; 112
    182a:	11 f6       	brne	.-124    	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:478
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:480
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1832:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <twi_rxBufferIndex>
    1836:	57 c0       	rjmp	.+174    	; 0x18e6 <__vector_39+0x188>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1838:	88 38       	cpi	r24, 0x88	; 136
    183a:	09 f4       	brne	.+2      	; 0x183e <__vector_39+0xe0>
    183c:	7b c0       	rjmp	.+246    	; 0x1934 <__vector_39+0x1d6>
    183e:	80 39       	cpi	r24, 0x90	; 144
    1840:	19 f0       	breq	.+6      	; 0x1848 <__vector_39+0xea>
    1842:	80 38       	cpi	r24, 0x80	; 128
    1844:	09 f0       	breq	.+2      	; 0x1848 <__vector_39+0xea>
    1846:	b4 cf       	rjmp	.-152    	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:486
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1848:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_rxBufferIndex>
    184c:	80 32       	cpi	r24, 0x20	; 32
    184e:	08 f0       	brcs	.+2      	; 0x1852 <__vector_39+0xf4>
    1850:	71 c0       	rjmp	.+226    	; 0x1934 <__vector_39+0x1d6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:488
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1852:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_rxBufferIndex>
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	8e 0f       	add	r24, r30
    185a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_rxBufferIndex>
    185e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	e7 5d       	subi	r30, 0xD7	; 215
    1866:	fc 4f       	sbci	r31, 0xFC	; 252
    1868:	80 83       	st	Z, r24
    186a:	3d c0       	rjmp	.+122    	; 0x18e6 <__vector_39+0x188>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    186c:	80 3b       	cpi	r24, 0xB0	; 176
    186e:	39 f0       	breq	.+14     	; 0x187e <__vector_39+0x120>
    1870:	e0 f4       	brcc	.+56     	; 0x18aa <__vector_39+0x14c>
    1872:	80 3a       	cpi	r24, 0xA0	; 160
    1874:	09 f4       	brne	.+2      	; 0x1878 <__vector_39+0x11a>
    1876:	79 c0       	rjmp	.+242    	; 0x196a <__vector_39+0x20c>
    1878:	88 3a       	cpi	r24, 0xA8	; 168
    187a:	09 f0       	breq	.+2      	; 0x187e <__vector_39+0x120>
    187c:	99 cf       	rjmp	.-206    	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:517

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    187e:	84 e0       	ldi	r24, 0x04	; 4
    1880:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:519
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1884:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <twi_txBufferIndex>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:521
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1888:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <twi_txBufferLength>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:524
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    188c:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <twi_onSlaveTransmit>
    1890:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <twi_onSlaveTransmit+0x1>
    1894:	19 95       	eicall
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:526
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1896:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_txBufferLength>
    189a:	81 11       	cpse	r24, r1
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <__vector_39+0x15e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:527
        twi_txBufferLength = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <twi_txBufferLength>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:528
        twi_txBuffer[0] = 0x00;
    18a4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_txBuffer>
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <__vector_39+0x15e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    18aa:	80 3c       	cpi	r24, 0xC0	; 192
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <__vector_39+0x152>
    18ae:	76 c0       	rjmp	.+236    	; 0x199c <__vector_39+0x23e>
    18b0:	88 3c       	cpi	r24, 0xC8	; 200
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <__vector_39+0x158>
    18b4:	73 c0       	rjmp	.+230    	; 0x199c <__vector_39+0x23e>
    18b6:	88 3b       	cpi	r24, 0xB8	; 184
    18b8:	09 f0       	breq	.+2      	; 0x18bc <__vector_39+0x15e>
    18ba:	7a cf       	rjmp	.-268    	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:534
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    18bc:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <twi_txBufferIndex>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	8e 0f       	add	r24, r30
    18c4:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_txBufferIndex>
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	e5 5b       	subi	r30, 0xB5	; 181
    18cc:	fc 4f       	sbci	r31, 0xFC	; 252
    18ce:	80 81       	ld	r24, Z
    18d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    18d4:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <twi_txBufferIndex>
    18d8:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <twi_txBufferLength>
    18dc:	29 c0       	rjmp	.+82     	; 0x1930 <__vector_39+0x1d2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:402
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    18de:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <twi_slarw>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    18e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    18e6:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    18e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    18ec:	61 cf       	rjmp	.-318    	; 0x17b0 <__vector_39+0x52>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:410

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    18ee:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <twi_masterBufferIndex>
    18f2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <twi_masterBufferLength>
    18f6:	98 17       	cp	r25, r24
    18f8:	58 f5       	brcc	.+86     	; 0x1950 <__vector_39+0x1f2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    18fa:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <twi_masterBufferIndex>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8e 0f       	add	r24, r30
    1902:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <twi_masterBufferIndex>
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	e3 59       	subi	r30, 0x93	; 147
    190a:	fc 4f       	sbci	r31, 0xFC	; 252
    190c:	80 81       	ld	r24, Z
    190e:	e9 cf       	rjmp	.-46     	; 0x18e2 <__vector_39+0x184>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:443
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1910:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <twi_masterBufferIndex>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	8e 0f       	add	r24, r30
    1918:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <twi_masterBufferIndex>
    191c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	e3 59       	subi	r30, 0x93	; 147
    1924:	fc 4f       	sbci	r31, 0xFC	; 252
    1926:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:447
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1928:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <twi_masterBufferIndex>
    192c:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <twi_masterBufferLength>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1930:	98 17       	cp	r25, r24
    1932:	c8 f2       	brcs	.-78     	; 0x18e6 <__vector_39+0x188>
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1934:	85 e8       	ldi	r24, 0x85	; 133
    1936:	d8 cf       	rjmp	.-80     	; 0x18e8 <__vector_39+0x18a>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:455
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1938:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <twi_masterBufferIndex>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	8e 0f       	add	r24, r30
    1940:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <twi_masterBufferIndex>
    1944:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	e3 59       	subi	r30, 0x93	; 147
    194c:	fc 4f       	sbci	r31, 0xFC	; 252
    194e:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:456
  if (twi_sendStop)
    1950:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <twi_sendStop>
    1954:	81 11       	cpse	r24, r1
    1956:	5c cf       	rjmp	.-328    	; 0x1810 <__vector_39+0xb2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:459
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <twi_inRepStart>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:463
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    195e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1960:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:547
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1964:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <twi_state>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:548
      break;
    1968:	23 cf       	rjmp	.-442    	; 0x17b0 <__vector_39+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:497
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    196a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <twi_releaseBus>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:499
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    196e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_rxBufferIndex>
    1972:	80 32       	cpi	r24, 0x20	; 32
    1974:	30 f4       	brcc	.+12     	; 0x1982 <__vector_39+0x224>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:500
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1976:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <twi_rxBufferIndex>
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	e7 5d       	subi	r30, 0xD7	; 215
    197e:	fc 4f       	sbci	r31, 0xFC	; 252
    1980:	10 82       	st	Z, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:503
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1982:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <twi_rxBufferIndex>
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <twi_onSlaveReceive>
    198c:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <twi_onSlaveReceive+0x1>
    1990:	89 e2       	ldi	r24, 0x29	; 41
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	19 95       	eicall
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:505
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1996:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <twi_rxBufferIndex>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:506
      break;
    199a:	0a cf       	rjmp	.-492    	; 0x17b0 <__vector_39+0x52>
twi_reply():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    199c:	85 ec       	ldi	r24, 0xC5	; 197
    199e:	e0 cf       	rjmp	.-64     	; 0x1960 <__vector_39+0x202>
__vector_39():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:554

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    19a0:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <twi_error>
    19a4:	35 cf       	rjmp	.-406    	; 0x1810 <__vector_39+0xb2>

000019a6 <I2C::pullup(unsigned char) [clone .part.1]>:
_ZN3I2C6pullupEh():
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:822
  return (returnStatus);
}

uint8_t I2C::read(int address, int registerAddress, int numberBytes)
{
  return (read((uint8_t)address, (uint8_t)registerAddress, (uint8_t)numberBytes));
    19a6:	58 9a       	sbi	0x0b, 0	; 11
    19a8:	59 9a       	sbi	0x0b, 1	; 11
    19aa:	08 95       	ret

000019ac <I2C::begin()>:
    19ac:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <I2C::pullup(unsigned char) [clone .part.1]>
_ZN3I2C5beginEv():
    19b0:	e9 eb       	ldi	r30, 0xB9	; 185
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8e 7f       	andi	r24, 0xFE	; 254
    19b8:	80 83       	st	Z, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	8d 7f       	andi	r24, 0xFD	; 253
    19be:	80 83       	st	Z, r24
    19c0:	8c e0       	ldi	r24, 0x0C	; 12
    19c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    19c6:	84 e4       	ldi	r24, 0x44	; 68
    19c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    19cc:	08 95       	ret

000019ce <I2C::timeOut(unsigned int)>:
_ZN3I2C7timeOutEj():
    19ce:	70 93 b8 03 	sts	0x03B8, r23	; 0x8003b8 <I2C::timeOutDelay+0x1>
    19d2:	60 93 b7 03 	sts	0x03B7, r22	; 0x8003b7 <I2C::timeOutDelay>
    19d6:	08 95       	ret

000019d8 <I2C::pullup(unsigned char)>:
_ZN3I2C6pullupEh():
    19d8:	61 11       	cpse	r22, r1
    19da:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <I2C::pullup(unsigned char) [clone .part.1]>
    19de:	58 98       	cbi	0x0b, 0	; 11
    19e0:	59 98       	cbi	0x0b, 1	; 11
    19e2:	08 95       	ret

000019e4 <I2C::_start()>:
_ZN3I2C6_startEv():
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	84 ea       	ldi	r24, 0xA4	; 164
    19f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    19fa:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    19fe:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1a02:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a06:	27 fd       	sbrc	r18, 7
    1a08:	20 c0       	rjmp	.+64     	; 0x1a4a <I2C::_start()+0x66>
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	d1 f3       	breq	.-12     	; 0x1a02 <I2C::_start()+0x1e>
    1a0e:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1a12:	ab 01       	movw	r20, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	4c 19       	sub	r20, r12
    1a18:	5d 09       	sbc	r21, r13
    1a1a:	6e 09       	sbc	r22, r14
    1a1c:	7f 09       	sbc	r23, r15
    1a1e:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1a22:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	a0 e0       	ldi	r26, 0x00	; 0
    1a2a:	48 17       	cp	r20, r24
    1a2c:	59 07       	cpc	r21, r25
    1a2e:	6a 07       	cpc	r22, r26
    1a30:	7b 07       	cpc	r23, r27
    1a32:	18 f3       	brcs	.-58     	; 0x19fa <I2C::_start()+0x16>
_ZN3I2C6lockUpEv():
    1a34:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a38:	84 e4       	ldi	r24, 0x44	; 68
    1a3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C6_startEv():
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	df 90       	pop	r13
    1a46:	cf 90       	pop	r12
    1a48:	08 95       	ret
    1a4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a4e:	88 7f       	andi	r24, 0xF8	; 248
    1a50:	88 30       	cpi	r24, 0x08	; 8
    1a52:	b9 f0       	breq	.+46     	; 0x1a82 <I2C::_start()+0x9e>
    1a54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a58:	88 7f       	andi	r24, 0xF8	; 248
    1a5a:	80 31       	cpi	r24, 0x10	; 16
    1a5c:	91 f0       	breq	.+36     	; 0x1a82 <I2C::_start()+0x9e>
    1a5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a62:	88 7f       	andi	r24, 0xF8	; 248
    1a64:	88 33       	cpi	r24, 0x38	; 56
    1a66:	49 f4       	brne	.+18     	; 0x1a7a <I2C::_start()+0x96>
    1a68:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a6c:	88 7f       	andi	r24, 0xF8	; 248
_ZN3I2C6lockUpEv():
    1a6e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a72:	94 e4       	ldi	r25, 0x44	; 68
    1a74:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1a78:	e3 cf       	rjmp	.-58     	; 0x1a40 <I2C::_start()+0x5c>
_ZN3I2C6_startEv():
    1a7a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1a7e:	88 7f       	andi	r24, 0xF8	; 248
    1a80:	df cf       	rjmp	.-66     	; 0x1a40 <I2C::_start()+0x5c>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	dd cf       	rjmp	.-70     	; 0x1a40 <I2C::_start()+0x5c>

00001a86 <I2C::_receiveByte(unsigned char)>:
_ZN3I2C12_receiveByteEh():
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	cf 93       	push	r28
    1a90:	c6 2f       	mov	r28, r22
    1a92:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1a96:	6b 01       	movw	r12, r22
    1a98:	7c 01       	movw	r14, r24
    1a9a:	84 ec       	ldi	r24, 0xC4	; 196
    1a9c:	c1 11       	cpse	r28, r1
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <I2C::_receiveByte(unsigned char)+0x1c>
    1aa0:	84 e8       	ldi	r24, 0x84	; 132
    1aa2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1aa6:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1aaa:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1aae:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ab2:	27 fd       	sbrc	r18, 7
    1ab4:	21 c0       	rjmp	.+66     	; 0x1af8 <I2C::_receiveByte(unsigned char)+0x72>
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	d1 f3       	breq	.-12     	; 0x1aae <I2C::_receiveByte(unsigned char)+0x28>
    1aba:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1abe:	ab 01       	movw	r20, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	4c 19       	sub	r20, r12
    1ac4:	5d 09       	sbc	r21, r13
    1ac6:	6e 09       	sbc	r22, r14
    1ac8:	7f 09       	sbc	r23, r15
    1aca:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1ace:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	48 17       	cp	r20, r24
    1ad8:	59 07       	cpc	r21, r25
    1ada:	6a 07       	cpc	r22, r26
    1adc:	7b 07       	cpc	r23, r27
    1ade:	18 f3       	brcs	.-58     	; 0x1aa6 <I2C::_receiveByte(unsigned char)+0x20>
_ZN3I2C6lockUpEv():
    1ae0:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ae4:	84 e4       	ldi	r24, 0x44	; 68
    1ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C12_receiveByteEh():
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	cf 91       	pop	r28
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	08 95       	ret
    1af8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1afc:	88 7f       	andi	r24, 0xF8	; 248
    1afe:	88 33       	cpi	r24, 0x38	; 56
    1b00:	49 f4       	brne	.+18     	; 0x1b14 <I2C::_receiveByte(unsigned char)+0x8e>
    1b02:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1b06:	88 7f       	andi	r24, 0xF8	; 248
_ZN3I2C6lockUpEv():
    1b08:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b0c:	94 e4       	ldi	r25, 0x44	; 68
    1b0e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b12:	ec cf       	rjmp	.-40     	; 0x1aec <I2C::_receiveByte(unsigned char)+0x66>
_ZN3I2C12_receiveByteEh():
    1b14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1b18:	88 7f       	andi	r24, 0xF8	; 248
    1b1a:	e8 cf       	rjmp	.-48     	; 0x1aec <I2C::_receiveByte(unsigned char)+0x66>

00001b1c <I2C::_stop()>:
_ZN3I2C5_stopEv():
    1b1c:	cf 92       	push	r12
    1b1e:	df 92       	push	r13
    1b20:	ef 92       	push	r14
    1b22:	ff 92       	push	r15
    1b24:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1b28:	6b 01       	movw	r12, r22
    1b2a:	7c 01       	movw	r14, r24
    1b2c:	84 e9       	ldi	r24, 0x94	; 148
    1b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b32:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1b36:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1b3a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b3e:	24 ff       	sbrs	r18, 4
    1b40:	20 c0       	rjmp	.+64     	; 0x1b82 <I2C::_stop()+0x66>
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	d1 f3       	breq	.-12     	; 0x1b3a <I2C::_stop()+0x1e>
    1b46:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1b4a:	ab 01       	movw	r20, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	4c 19       	sub	r20, r12
    1b50:	5d 09       	sbc	r21, r13
    1b52:	6e 09       	sbc	r22, r14
    1b54:	7f 09       	sbc	r23, r15
    1b56:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1b5a:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	48 17       	cp	r20, r24
    1b64:	59 07       	cpc	r21, r25
    1b66:	6a 07       	cpc	r22, r26
    1b68:	7b 07       	cpc	r23, r27
    1b6a:	18 f3       	brcs	.-58     	; 0x1b32 <I2C::_stop()+0x16>
_ZN3I2C6lockUpEv():
    1b6c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1b70:	84 e4       	ldi	r24, 0x44	; 68
    1b72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C5_stopEv():
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	08 95       	ret
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	f9 cf       	rjmp	.-14     	; 0x1b78 <I2C::_stop()+0x5c>

00001b86 <I2C::_sendAddress(unsigned char)>:
_ZN3I2C12_sendAddressEh():
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	8c 01       	movw	r16, r24
    1b96:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1b9a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1b9e:	6b 01       	movw	r12, r22
    1ba0:	7c 01       	movw	r14, r24
    1ba2:	84 e8       	ldi	r24, 0x84	; 132
    1ba4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ba8:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1bac:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1bb0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1bb4:	27 fd       	sbrc	r18, 7
    1bb6:	24 c0       	rjmp	.+72     	; 0x1c00 <I2C::_sendAddress(unsigned char)+0x7a>
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	d1 f3       	breq	.-12     	; 0x1bb0 <I2C::_sendAddress(unsigned char)+0x2a>
    1bbc:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1bc0:	ab 01       	movw	r20, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	4c 19       	sub	r20, r12
    1bc6:	5d 09       	sbc	r21, r13
    1bc8:	6e 09       	sbc	r22, r14
    1bca:	7f 09       	sbc	r23, r15
    1bcc:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1bd0:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	48 17       	cp	r20, r24
    1bda:	59 07       	cpc	r21, r25
    1bdc:	6a 07       	cpc	r22, r26
    1bde:	7b 07       	cpc	r23, r27
    1be0:	18 f3       	brcs	.-58     	; 0x1ba8 <I2C::_sendAddress(unsigned char)+0x22>
_ZN3I2C6lockUpEv():
    1be2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1be6:	84 e4       	ldi	r24, 0x44	; 68
    1be8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C12_sendAddressEh():
    1bec:	c1 e0       	ldi	r28, 0x01	; 1
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	08 95       	ret
    1c00:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1c04:	88 7f       	andi	r24, 0xF8	; 248
    1c06:	88 31       	cpi	r24, 0x18	; 24
    1c08:	e1 f0       	breq	.+56     	; 0x1c42 <I2C::_sendAddress(unsigned char)+0xbc>
    1c0a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1c0e:	88 7f       	andi	r24, 0xF8	; 248
    1c10:	80 34       	cpi	r24, 0x40	; 64
    1c12:	b9 f0       	breq	.+46     	; 0x1c42 <I2C::_sendAddress(unsigned char)+0xbc>
    1c14:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1c18:	c8 7f       	andi	r28, 0xF8	; 248
    1c1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1c1e:	88 7f       	andi	r24, 0xF8	; 248
    1c20:	80 32       	cpi	r24, 0x20	; 32
    1c22:	59 f0       	breq	.+22     	; 0x1c3a <I2C::_sendAddress(unsigned char)+0xb4>
    1c24:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1c28:	88 7f       	andi	r24, 0xF8	; 248
    1c2a:	88 34       	cpi	r24, 0x48	; 72
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <I2C::_sendAddress(unsigned char)+0xb4>
_ZN3I2C6lockUpEv():
    1c2e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c32:	84 e4       	ldi	r24, 0x44	; 68
    1c34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c38:	da cf       	rjmp	.-76     	; 0x1bee <I2C::_sendAddress(unsigned char)+0x68>
_ZN3I2C12_sendAddressEh():
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <I2C::_stop()>
    1c40:	d6 cf       	rjmp	.-84     	; 0x1bee <I2C::_sendAddress(unsigned char)+0x68>
    1c42:	c0 e0       	ldi	r28, 0x00	; 0
    1c44:	d4 cf       	rjmp	.-88     	; 0x1bee <I2C::_sendAddress(unsigned char)+0x68>

00001c46 <I2C::_sendByte(unsigned char)>:
_ZN3I2C9_sendByteEh():
    1c46:	cf 92       	push	r12
    1c48:	df 92       	push	r13
    1c4a:	ef 92       	push	r14
    1c4c:	ff 92       	push	r15
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	8c 01       	movw	r16, r24
    1c56:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1c5a:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1c5e:	6b 01       	movw	r12, r22
    1c60:	7c 01       	movw	r14, r24
    1c62:	84 e8       	ldi	r24, 0x84	; 132
    1c64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c68:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1c6c:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1c70:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1c74:	27 fd       	sbrc	r18, 7
    1c76:	24 c0       	rjmp	.+72     	; 0x1cc0 <I2C::_sendByte(unsigned char)+0x7a>
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	d1 f3       	breq	.-12     	; 0x1c70 <I2C::_sendByte(unsigned char)+0x2a>
    1c7c:	0e 94 27 1b 	call	0x364e	; 0x364e <millis>
    1c80:	ab 01       	movw	r20, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	4c 19       	sub	r20, r12
    1c86:	5d 09       	sbc	r21, r13
    1c88:	6e 09       	sbc	r22, r14
    1c8a:	7f 09       	sbc	r23, r15
    1c8c:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <I2C::timeOutDelay>
    1c90:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <I2C::timeOutDelay+0x1>
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	a0 e0       	ldi	r26, 0x00	; 0
    1c98:	48 17       	cp	r20, r24
    1c9a:	59 07       	cpc	r21, r25
    1c9c:	6a 07       	cpc	r22, r26
    1c9e:	7b 07       	cpc	r23, r27
    1ca0:	18 f3       	brcs	.-58     	; 0x1c68 <I2C::_sendByte(unsigned char)+0x22>
_ZN3I2C6lockUpEv():
    1ca2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ca6:	84 e4       	ldi	r24, 0x44	; 68
    1ca8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
_ZN3I2C9_sendByteEh():
    1cac:	c1 e0       	ldi	r28, 0x01	; 1
    1cae:	8c 2f       	mov	r24, r28
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	08 95       	ret
    1cc0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1cc4:	88 7f       	andi	r24, 0xF8	; 248
    1cc6:	c0 e0       	ldi	r28, 0x00	; 0
    1cc8:	88 32       	cpi	r24, 0x28	; 40
    1cca:	89 f3       	breq	.-30     	; 0x1cae <I2C::_sendByte(unsigned char)+0x68>
    1ccc:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1cd0:	c8 7f       	andi	r28, 0xF8	; 248
    1cd2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    1cd6:	88 7f       	andi	r24, 0xF8	; 248
    1cd8:	80 33       	cpi	r24, 0x30	; 48
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <I2C::_sendByte(unsigned char)+0x9e>
    1cdc:	c8 01       	movw	r24, r16
    1cde:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <I2C::_stop()>
    1ce2:	e5 cf       	rjmp	.-54     	; 0x1cae <I2C::_sendByte(unsigned char)+0x68>
_ZN3I2C6lockUpEv():
    1ce4:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1ce8:	84 e4       	ldi	r24, 0x44	; 68
    1cea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1cee:	df cf       	rjmp	.-66     	; 0x1cae <I2C::_sendByte(unsigned char)+0x68>

00001cf0 <I2C::write(unsigned char, unsigned char, unsigned char)>:
_ZN3I2C5writeEhhh():
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	16 2f       	mov	r17, r22
    1cfe:	f4 2e       	mov	r15, r20
    1d00:	02 2f       	mov	r16, r18
    1d02:	18 82       	st	Y, r1
    1d04:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <I2C::_start()>
    1d08:	88 83       	st	Y, r24
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1d0e:	61 2f       	mov	r22, r17
    1d10:	66 0f       	add	r22, r22
    1d12:	ce 01       	movw	r24, r28
    1d14:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <I2C::_sendAddress(unsigned char)>
    1d18:	88 83       	st	Y, r24
    1d1a:	88 23       	and	r24, r24
    1d1c:	21 f0       	breq	.+8      	; 0x1d26 <I2C::write(unsigned char, unsigned char, unsigned char)+0x36>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	61 f4       	brne	.+24     	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	0a c0       	rjmp	.+20     	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1d26:	6f 2d       	mov	r22, r15
    1d28:	ce 01       	movw	r24, r28
    1d2a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <I2C::_sendByte(unsigned char)>
    1d2e:	88 83       	st	Y, r24
    1d30:	88 23       	and	r24, r24
    1d32:	49 f0       	breq	.+18     	; 0x1d46 <I2C::write(unsigned char, unsigned char, unsigned char)+0x56>
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	08 95       	ret
    1d46:	60 2f       	mov	r22, r16
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <I2C::_sendByte(unsigned char)>
    1d4e:	88 83       	st	Y, r24
    1d50:	81 11       	cpse	r24, r1
    1d52:	f0 cf       	rjmp	.-32     	; 0x1d34 <I2C::write(unsigned char, unsigned char, unsigned char)+0x44>
    1d54:	ce 01       	movw	r24, r28
    1d56:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <I2C::_stop()>
    1d5a:	88 83       	st	Y, r24
    1d5c:	88 23       	and	r24, r24
    1d5e:	69 f3       	breq	.-38     	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	59 f7       	brne	.-42     	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>
    1d64:	87 e0       	ldi	r24, 0x07	; 7
    1d66:	e9 cf       	rjmp	.-46     	; 0x1d3a <I2C::write(unsigned char, unsigned char, unsigned char)+0x4a>

00001d68 <I2C::write(int, int, int)>:
_ZN3I2C5writeEiii():
    1d68:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <I2C::write(unsigned char, unsigned char, unsigned char)>

00001d6c <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)>:
_ZN3I2C4readEhhhPh():
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1017
 *          NOTE: Unlike the Wire library the read operation will not return the
 *          number of bytes read, instead it will return the error code which
 *          can be used for debugging.
 */
uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes, uint8_t *dataBuffer)
{
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	f6 2e       	mov	r15, r22
    1d7e:	e4 2e       	mov	r14, r20
    1d80:	d2 2e       	mov	r13, r18
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1018
  bytesAvailable = 0;
    1d82:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <I2C::bytesAvailable>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1019
  bufferIndex = 0;
    1d86:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <I2C::bufferIndex>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1020
  if (numberBytes == 0)
    1d8a:	21 11       	cpse	r18, r1
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x26>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1022
  {
    numberBytes++;
    1d8e:	dd 24       	eor	r13, r13
    1d90:	d3 94       	inc	r13
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1024
  }
  nack = numberBytes - 1;
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	8d 0d       	add	r24, r13
    1d96:	89 83       	std	Y+1, r24	; 0x01
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1025
  returnStatus = 0;
    1d98:	18 82       	st	Y, r1
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1026
  returnStatus = _start();
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <I2C::_start()>
    1da0:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1027
  if (returnStatus)
    1da2:	81 11       	cpse	r24, r1
    1da4:	3a c0       	rjmp	.+116    	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1031
  {
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_W(address));
    1da6:	ff 0c       	add	r15, r15
    1da8:	6f 2d       	mov	r22, r15
    1daa:	ce 01       	movw	r24, r28
    1dac:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <I2C::_sendAddress(unsigned char)>
    1db0:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1032
  if (returnStatus)
    1db2:	88 23       	and	r24, r24
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x52>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1034
  {
    if (returnStatus == 1)
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	81 f5       	brne	.+96     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1036
    {
      return (2);
    1dba:	82 e0       	ldi	r24, 0x02	; 2
    1dbc:	2e c0       	rjmp	.+92     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1040
    }
    return (returnStatus);
  }
  returnStatus = _sendByte(registerAddress);
    1dbe:	6e 2d       	mov	r22, r14
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <I2C::_sendByte(unsigned char)>
    1dc6:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1041
  if (returnStatus)
    1dc8:	88 23       	and	r24, r24
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x68>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1043
  {
    if (returnStatus == 1)
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	29 f5       	brne	.+74     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1045
    {
      return (3);
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	23 c0       	rjmp	.+70     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1049
    }
    return (returnStatus);
  }
  returnStatus = _start();
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <I2C::_start()>
    1dda:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1050
  if (returnStatus)
    1ddc:	88 23       	and	r24, r24
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x7c>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1052
  {
    if (returnStatus == 1)
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	d9 f4       	brne	.+54     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1054
    {
      return (4);
    1de4:	84 e0       	ldi	r24, 0x04	; 4
    1de6:	19 c0       	rjmp	.+50     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1058
    }
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_R(address));
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	6f 0d       	add	r22, r15
    1dec:	ce 01       	movw	r24, r28
    1dee:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <I2C::_sendAddress(unsigned char)>
    1df2:	88 83       	st	Y, r24
    1df4:	78 01       	movw	r14, r16
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1067
    {
      return (5);
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
    1df6:	10 e0       	ldi	r17, 0x00	; 0
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1059
      return (4);
    }
    return (returnStatus);
  }
  returnStatus = _sendAddress(SLA_R(address));
  if (returnStatus)
    1df8:	88 23       	and	r24, r24
    1dfa:	21 f0       	breq	.+8      	; 0x1e04 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x98>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1061
  {
    if (returnStatus == 1)
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	69 f4       	brne	.+26     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1063
    {
      return (5);
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	0b c0       	rjmp	.+22     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1069
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
  {
    if (i == nack)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	81 13       	cpse	r24, r17
    1e08:	28 c0       	rjmp	.+80     	; 0x1e5a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xee>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1071
    {
      returnStatus = _receiveByte(0);
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <I2C::_receiveByte(unsigned char)>
    1e12:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1072
      if (returnStatus == 1)
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	49 f4       	brne	.+18     	; 0x1e2a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xbe>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1074
      {
        return (6);
    1e18:	86 e0       	ldi	r24, 0x06	; 6
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1107
      return (7);
    }
    return (returnStatus);
  }
  return (returnStatus);
}
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	df 90       	pop	r13
    1e28:	08 95       	ret
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1076
      returnStatus = _receiveByte(0);
      if (returnStatus == 1)
      {
        return (6);
      }
      if (returnStatus != MR_DATA_NACK)
    1e2a:	88 35       	cpi	r24, 0x58	; 88
    1e2c:	b1 f7       	brne	.-20     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1093
      if (returnStatus != MR_DATA_ACK)
      {
        return (returnStatus);
      }
    }
    dataBuffer[i] = TWDR;
    1e2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1e32:	f7 01       	movw	r30, r14
    1e34:	81 93       	st	Z+, r24
    1e36:	7f 01       	movw	r14, r30
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1094
    bytesAvailable = i + 1;
    1e38:	1f 5f       	subi	r17, 0xFF	; 255
    1e3a:	10 93 bb 03 	sts	0x03BB, r17	; 0x8003bb <I2C::bytesAvailable>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1095
    totalBytes = i + 1;
    1e3e:	10 93 b9 03 	sts	0x03B9, r17	; 0x8003b9 <I2C::totalBytes>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1067
    {
      return (5);
    }
    return (returnStatus);
  }
  for (uint8_t i = 0; i < numberBytes; i++)
    1e42:	1d 11       	cpse	r17, r13
    1e44:	df cf       	rjmp	.-66     	; 0x1e04 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0x98>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1097
    }
    dataBuffer[i] = TWDR;
    bytesAvailable = i + 1;
    totalBytes = i + 1;
  }
  returnStatus = _stop();
    1e46:	ce 01       	movw	r24, r28
    1e48:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <I2C::_stop()>
    1e4c:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1098
  if (returnStatus)
    1e4e:	88 23       	and	r24, r24
    1e50:	21 f3       	breq	.-56     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1100
  {
    if (returnStatus == 1)
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	11 f7       	brne	.-60     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1102
    {
      return (7);
    1e56:	87 e0       	ldi	r24, 0x07	; 7
    1e58:	e0 cf       	rjmp	.-64     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1083
        return (returnStatus);
      }
    }
    else
    {
      returnStatus = _receiveByte(1);
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <I2C::_receiveByte(unsigned char)>
    1e62:	88 83       	st	Y, r24
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1084
      if (returnStatus == 1)
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	c1 f2       	breq	.-80     	; 0x1e18 <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xac>
c:\Users\DH\Documents\Arduino\libraries\I2C-master/I2C.cpp:1088
      {
        return (6);
      }
      if (returnStatus != MR_DATA_ACK)
    1e68:	80 35       	cpi	r24, 0x50	; 80
    1e6a:	09 f3       	breq	.-62     	; 0x1e2e <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xc2>
    1e6c:	d6 cf       	rjmp	.-84     	; 0x1e1a <I2C::read(unsigned char, unsigned char, unsigned char, unsigned char*)+0xae>

00001e6e <isr()>:
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:308
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1e6e:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    1e72:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <isr()+0xe>
    1e7a:	4d c0       	rjmp	.+154    	; 0x1f16 <isr()+0xa8>
    1e7c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e7e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e80:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
    1e82:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e84:	91 ff       	sbrs	r25, 1
    1e86:	04 c0       	rjmp	.+8      	; 0x1e90 <isr()+0x22>
_ZN14SoftwareSerial11rx_pin_readEv():
    1e88:	9c 91       	ld	r25, X
    1e8a:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <isr()+0x2a>
    1e8e:	08 95       	ret
_ZN14SoftwareSerial11rx_pin_readEv():
    1e90:	9c 91       	ld	r25, X
    1e92:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <isr()+0x2a>
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <isr()+0xa8>
_ZN14SoftwareSerial11setRxIntMskEb():
    1e98:	a3 89       	ldd	r26, Z+19	; 0x13
    1e9a:	b4 89       	ldd	r27, Z+20	; 0x14
    1e9c:	9c 91       	ld	r25, X
    1e9e:	85 89       	ldd	r24, Z+21	; 0x15
    1ea0:	80 95       	com	r24
    1ea2:	89 23       	and	r24, r25
    1ea4:	8c 93       	st	X, r24
_delay_loop_2():
    1ea6:	86 89       	ldd	r24, Z+22	; 0x16
    1ea8:	97 89       	ldd	r25, Z+23	; 0x17
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <isr()+0x3c>
_ZN14SoftwareSerial4recvEv():
    1eae:	60 8d       	ldd	r22, Z+24	; 0x18
    1eb0:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
    1eb2:	a6 85       	ldd	r26, Z+14	; 0x0e
    1eb4:	b7 85       	ldd	r27, Z+15	; 0x0f
    1eb6:	55 85       	ldd	r21, Z+13	; 0x0d
    1eb8:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
    1eba:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <isr()+0x50>
_ZN14SoftwareSerial4recvEv():
    1ec2:	82 2f       	mov	r24, r18
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	95 95       	asr	r25
    1ec8:	87 95       	ror	r24
    1eca:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
    1ecc:	4c 91       	ld	r20, X
    1ece:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <isr()+0x66>
    1ed2:	20 68       	ori	r18, 0x80	; 128
    1ed4:	31 50       	subi	r19, 0x01	; 1
    1ed6:	91 f7       	brne	.-28     	; 0x1ebc <isr()+0x4e>
    1ed8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eda:	81 fd       	sbrc	r24, 1
    1edc:	20 95       	com	r18
    1ede:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	8f 73       	andi	r24, 0x3F	; 63
    1ee8:	99 27       	eor	r25, r25
    1eea:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    1eee:	38 17       	cp	r19, r24
    1ef0:	99 f0       	breq	.+38     	; 0x1f18 <isr()+0xaa>
    1ef2:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	a2 54       	subi	r26, 0x42	; 66
    1efa:	bc 4f       	sbci	r27, 0xFC	; 252
    1efc:	2c 93       	st	X, r18
    1efe:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
    1f02:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f04:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <isr()+0x98>
_ZN14SoftwareSerial11setRxIntMskEb():
    1f0a:	a3 89       	ldd	r26, Z+19	; 0x13
    1f0c:	b4 89       	ldd	r27, Z+20	; 0x14
    1f0e:	8c 91       	ld	r24, X
    1f10:	95 89       	ldd	r25, Z+21	; 0x15
    1f12:	89 2b       	or	r24, r25
    1f14:	8c 93       	st	X, r24
_ZL3isrv():
    1f16:	08 95       	ret
_ZN14SoftwareSerial4recvEv():
    1f18:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f1a:	81 60       	ori	r24, 0x01	; 1
    1f1c:	86 8f       	std	Z+30, r24	; 0x1e
    1f1e:	f1 cf       	rjmp	.-30     	; 0x1f02 <isr()+0x94>

00001f20 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
    1f20:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    1f24:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    1f28:	28 17       	cp	r18, r24
    1f2a:	39 07       	cpc	r19, r25
    1f2c:	b9 f4       	brne	.+46     	; 0x1f5c <SoftwareSerial::read()+0x3c>
    1f2e:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    1f32:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    1f36:	98 17       	cp	r25, r24
    1f38:	89 f0       	breq	.+34     	; 0x1f5c <SoftwareSerial::read()+0x3c>
    1f3a:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	e2 54       	subi	r30, 0x42	; 66
    1f42:	fc 4f       	sbci	r31, 0xFC	; 252
    1f44:	80 81       	ld	r24, Z
    1f46:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	2f 5f       	subi	r18, 0xFF	; 255
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	2f 73       	andi	r18, 0x3F	; 63
    1f52:	33 27       	eor	r19, r19
    1f54:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	08 95       	ret
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	08 95       	ret

00001f62 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	dc 01       	movw	r26, r24
    1f70:	5c 96       	adiw	r26, 0x1c	; 28
    1f72:	ed 90       	ld	r14, X+
    1f74:	fc 90       	ld	r15, X
    1f76:	5d 97       	sbiw	r26, 0x1d	; 29
    1f78:	e1 14       	cp	r14, r1
    1f7a:	f1 04       	cpc	r15, r1
    1f7c:	79 f4       	brne	.+30     	; 0x1f9c <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	13 96       	adiw	r26, 0x03	; 3
    1f84:	9c 93       	st	X, r25
    1f86:	8e 93       	st	-X, r24
    1f88:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	08 95       	ret
    1f9c:	51 96       	adiw	r26, 0x11	; 17
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	52 97       	sbiw	r26, 0x12	; 18
    1fa4:	50 96       	adiw	r26, 0x10	; 16
    1fa6:	8c 91       	ld	r24, X
    1fa8:	50 97       	sbiw	r26, 0x10	; 16
    1faa:	98 2f       	mov	r25, r24
    1fac:	90 95       	com	r25
    1fae:	0f b7       	in	r16, 0x3f	; 63
    1fb0:	5e 96       	adiw	r26, 0x1e	; 30
    1fb2:	2c 91       	ld	r18, X
    1fb4:	5e 97       	sbiw	r26, 0x1e	; 30
    1fb6:	12 2f       	mov	r17, r18
    1fb8:	12 70       	andi	r17, 0x02	; 2
    1fba:	21 fd       	sbrc	r18, 1
    1fbc:	60 95       	com	r22
    1fbe:	f8 94       	cli
    1fc0:	20 81       	ld	r18, Z
    1fc2:	11 23       	and	r17, r17
    1fc4:	19 f1       	breq	.+70     	; 0x200c <SoftwareSerial::write(unsigned char)+0xaa>
    1fc6:	28 2b       	or	r18, r24
    1fc8:	20 83       	st	Z, r18
_delay_loop_2():
    1fca:	e7 01       	movw	r28, r14
    1fcc:	21 97       	sbiw	r28, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <SoftwareSerial::write(unsigned char)+0x6a>
    1fd0:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
    1fd2:	46 2f       	mov	r20, r22
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	30 81       	ld	r19, Z
    1fd8:	60 ff       	sbrs	r22, 0
    1fda:	1a c0       	rjmp	.+52     	; 0x2010 <SoftwareSerial::write(unsigned char)+0xae>
    1fdc:	38 2b       	or	r19, r24
    1fde:	30 83       	st	Z, r19
_delay_loop_2():
    1fe0:	e7 01       	movw	r28, r14
    1fe2:	21 97       	sbiw	r28, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
    1fe6:	ba 01       	movw	r22, r20
    1fe8:	75 95       	asr	r23
    1fea:	67 95       	ror	r22
    1fec:	21 50       	subi	r18, 0x01	; 1
    1fee:	89 f7       	brne	.-30     	; 0x1fd2 <SoftwareSerial::write(unsigned char)+0x70>
    1ff0:	11 23       	and	r17, r17
    1ff2:	81 f0       	breq	.+32     	; 0x2014 <SoftwareSerial::write(unsigned char)+0xb2>
    1ff4:	80 81       	ld	r24, Z
    1ff6:	89 23       	and	r24, r25
    1ff8:	80 83       	st	Z, r24
    1ffa:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
    1ffc:	5c 96       	adiw	r26, 0x1c	; 28
    1ffe:	8d 91       	ld	r24, X+
    2000:	9c 91       	ld	r25, X
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	c1 cf       	rjmp	.-126    	; 0x1f8e <SoftwareSerial::write(unsigned char)+0x2c>
    200c:	29 23       	and	r18, r25
    200e:	dc cf       	rjmp	.-72     	; 0x1fc8 <SoftwareSerial::write(unsigned char)+0x66>
    2010:	39 23       	and	r19, r25
    2012:	e5 cf       	rjmp	.-54     	; 0x1fde <SoftwareSerial::write(unsigned char)+0x7c>
    2014:	90 81       	ld	r25, Z
    2016:	89 2b       	or	r24, r25
    2018:	ef cf       	rjmp	.-34     	; 0x1ff8 <SoftwareSerial::write(unsigned char)+0x96>

0000201a <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
    201a:	08 95       	ret

0000201c <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
    201c:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    2020:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    2024:	28 17       	cp	r18, r24
    2026:	39 07       	cpc	r19, r25
    2028:	71 f4       	brne	.+28     	; 0x2046 <SoftwareSerial::peek()+0x2a>
    202a:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    202e:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    2032:	98 17       	cp	r25, r24
    2034:	41 f0       	breq	.+16     	; 0x2046 <SoftwareSerial::peek()+0x2a>
    2036:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e2 54       	subi	r30, 0x42	; 66
    203e:	fc 4f       	sbci	r31, 0xFC	; 252
    2040:	80 81       	ld	r24, Z
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	08 95       	ret
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	08 95       	ret

0000204c <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
    204c:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    2050:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    2054:	28 17       	cp	r18, r24
    2056:	39 07       	cpc	r19, r25
    2058:	61 f4       	brne	.+24     	; 0x2072 <SoftwareSerial::available()+0x26>
    205a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    205e:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	80 5c       	subi	r24, 0xC0	; 192
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	82 1b       	sub	r24, r18
    206a:	91 09       	sbc	r25, r1
    206c:	8f 73       	andi	r24, 0x3F	; 63
    206e:	99 27       	eor	r25, r25
    2070:	08 95       	ret
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	08 95       	ret

00002078 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
    2078:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    207c:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    2080:	e8 17       	cp	r30, r24
    2082:	f9 07       	cpc	r31, r25
    2084:	69 f4       	brne	.+26     	; 0x20a0 <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
    2086:	a3 89       	ldd	r26, Z+19	; 0x13
    2088:	b4 89       	ldd	r27, Z+20	; 0x14
    208a:	9c 91       	ld	r25, X
    208c:	85 89       	ldd	r24, Z+21	; 0x15
    208e:	80 95       	com	r24
    2090:	89 23       	and	r24, r25
    2092:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
    2094:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <SoftwareSerial::active_object+0x1>
    2098:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <SoftwareSerial::active_object>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	08 95       	ret
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	08 95       	ret

000020a4 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	ec 01       	movw	r28, r24
    20aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20ae:	89 2b       	or	r24, r25
    20b0:	01 f1       	breq	.+64     	; 0x20f2 <SoftwareSerial::listen()+0x4e>
    20b2:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    20b6:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    20ba:	8c 17       	cp	r24, r28
    20bc:	9d 07       	cpc	r25, r29
    20be:	c9 f0       	breq	.+50     	; 0x20f2 <SoftwareSerial::listen()+0x4e>
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	11 f0       	breq	.+4      	; 0x20c8 <SoftwareSerial::listen()+0x24>
    20c4:	0e 94 3c 10 	call	0x2078	; 0x2078 <SoftwareSerial::stopListening()>
    20c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ca:	8e 7f       	andi	r24, 0xFE	; 254
    20cc:	8e 8f       	std	Y+30, r24	; 0x1e
    20ce:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    20d2:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    20d6:	d0 93 ff 03 	sts	0x03FF, r29	; 0x8003ff <SoftwareSerial::active_object+0x1>
    20da:	c0 93 fe 03 	sts	0x03FE, r28	; 0x8003fe <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
    20de:	eb 89       	ldd	r30, Y+19	; 0x13
    20e0:	fc 89       	ldd	r31, Y+20	; 0x14
    20e2:	80 81       	ld	r24, Z
    20e4:	9d 89       	ldd	r25, Y+21	; 0x15
    20e6:	89 2b       	or	r24, r25
    20e8:	80 83       	st	Z, r24
    20ea:	81 e0       	ldi	r24, 0x01	; 1
_ZN14SoftwareSerial6listenEv():
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	fb cf       	rjmp	.-10     	; 0x20ec <SoftwareSerial::listen()+0x48>

000020f6 <__vector_10>:
__vector_11():
    20f6:	1f 92       	push	r1
    20f8:	0f 92       	push	r0
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	0f 92       	push	r0
    20fe:	11 24       	eor	r1, r1
    2100:	0b b6       	in	r0, 0x3b	; 59
    2102:	0f 92       	push	r0
    2104:	2f 93       	push	r18
    2106:	3f 93       	push	r19
    2108:	4f 93       	push	r20
    210a:	5f 93       	push	r21
    210c:	6f 93       	push	r22
    210e:	7f 93       	push	r23
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	af 93       	push	r26
    2116:	bf 93       	push	r27
    2118:	ef 93       	push	r30
    211a:	ff 93       	push	r31
_ZN14SoftwareSerial16handle_interruptEv():
    211c:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <SoftwareSerial::active_object>
    2120:	f0 91 ff 03 	lds	r31, 0x03FF	; 0x8003ff <SoftwareSerial::active_object+0x1>
    2124:	30 97       	sbiw	r30, 0x00	; 0
    2126:	49 f0       	breq	.+18     	; 0x213a <__vector_10+0x44>
    2128:	a6 85       	ldd	r26, Z+14	; 0x0e
    212a:	b7 85       	ldd	r27, Z+15	; 0x0f
    212c:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
    212e:	96 8d       	ldd	r25, Z+30	; 0x1e
    2130:	91 ff       	sbrs	r25, 1
    2132:	16 c0       	rjmp	.+44     	; 0x2160 <__vector_10+0x6a>
_ZN14SoftwareSerial11rx_pin_readEv():
    2134:	9c 91       	ld	r25, X
    2136:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    2138:	b1 f4       	brne	.+44     	; 0x2166 <__vector_10+0x70>
__vector_11():
    213a:	ff 91       	pop	r31
    213c:	ef 91       	pop	r30
    213e:	bf 91       	pop	r27
    2140:	af 91       	pop	r26
    2142:	9f 91       	pop	r25
    2144:	8f 91       	pop	r24
    2146:	7f 91       	pop	r23
    2148:	6f 91       	pop	r22
    214a:	5f 91       	pop	r21
    214c:	4f 91       	pop	r20
    214e:	3f 91       	pop	r19
    2150:	2f 91       	pop	r18
    2152:	0f 90       	pop	r0
    2154:	0b be       	out	0x3b, r0	; 59
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti
_ZN14SoftwareSerial11rx_pin_readEv():
    2160:	9c 91       	ld	r25, X
    2162:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    2164:	51 f7       	brne	.-44     	; 0x213a <__vector_10+0x44>
_ZN14SoftwareSerial11setRxIntMskEb():
    2166:	a3 89       	ldd	r26, Z+19	; 0x13
    2168:	b4 89       	ldd	r27, Z+20	; 0x14
    216a:	9c 91       	ld	r25, X
    216c:	85 89       	ldd	r24, Z+21	; 0x15
    216e:	80 95       	com	r24
    2170:	89 23       	and	r24, r25
    2172:	8c 93       	st	X, r24
_delay_loop_2():
    2174:	86 89       	ldd	r24, Z+22	; 0x16
    2176:	97 89       	ldd	r25, Z+23	; 0x17
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <__vector_10+0x82>
_ZN14SoftwareSerial4recvEv():
    217c:	60 8d       	ldd	r22, Z+24	; 0x18
    217e:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
    2180:	a6 85       	ldd	r26, Z+14	; 0x0e
    2182:	b7 85       	ldd	r27, Z+15	; 0x0f
    2184:	55 85       	ldd	r21, Z+13	; 0x0d
    2186:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
    2188:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
    218a:	cb 01       	movw	r24, r22
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <__vector_10+0x96>
_ZN14SoftwareSerial4recvEv():
    2190:	82 2f       	mov	r24, r18
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	95 95       	asr	r25
    2196:	87 95       	ror	r24
    2198:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
    219a:	4c 91       	ld	r20, X
    219c:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
    219e:	09 f0       	breq	.+2      	; 0x21a2 <__vector_10+0xac>
    21a0:	20 68       	ori	r18, 0x80	; 128
    21a2:	31 50       	subi	r19, 0x01	; 1
    21a4:	91 f7       	brne	.-28     	; 0x218a <__vector_10+0x94>
    21a6:	86 8d       	ldd	r24, Z+30	; 0x1e
    21a8:	81 fd       	sbrc	r24, 1
    21aa:	20 95       	com	r18
    21ac:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	8f 73       	andi	r24, 0x3F	; 63
    21b6:	99 27       	eor	r25, r25
    21b8:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <SoftwareSerial::_receive_buffer_head>
    21bc:	38 17       	cp	r19, r24
    21be:	99 f0       	breq	.+38     	; 0x21e6 <__vector_10+0xf0>
    21c0:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	a2 54       	subi	r26, 0x42	; 66
    21c8:	bc 4f       	sbci	r27, 0xFC	; 252
    21ca:	2c 93       	st	X, r18
    21cc:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
    21d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    21d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <__vector_10+0xde>
_ZN14SoftwareSerial11setRxIntMskEb():
    21d8:	a3 89       	ldd	r26, Z+19	; 0x13
    21da:	b4 89       	ldd	r27, Z+20	; 0x14
    21dc:	8c 91       	ld	r24, X
    21de:	95 89       	ldd	r25, Z+21	; 0x15
    21e0:	89 2b       	or	r24, r25
    21e2:	8c 93       	st	X, r24
__vector_11():
    21e4:	aa cf       	rjmp	.-172    	; 0x213a <__vector_10+0x44>
_ZN14SoftwareSerial4recvEv():
    21e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    21e8:	81 60       	ori	r24, 0x01	; 1
    21ea:	86 8f       	std	Z+30, r24	; 0x1e
    21ec:	f1 cf       	rjmp	.-30     	; 0x21d0 <__vector_10+0xda>

000021ee <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
    21ee:	23 e5       	ldi	r18, 0x53	; 83
    21f0:	32 e0       	ldi	r19, 0x02	; 2
    21f2:	fc 01       	movw	r30, r24
    21f4:	31 83       	std	Z+1, r19	; 0x01
    21f6:	20 83       	st	Z, r18
_ZN14SoftwareSerial3endEv():
    21f8:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <SoftwareSerial::stopListening()>

000021fc <SoftwareSerial::setTX(signed char)>:
_ZN14SoftwareSerial5setTXEa():
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    2204:	16 2f       	mov	r17, r22
    2206:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2208:	66 95       	lsr	r22
    220a:	61 70       	andi	r22, 0x01	; 1
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	68 27       	eor	r22, r24
    2210:	81 2f       	mov	r24, r17
    2212:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	81 2f       	mov	r24, r17
    221a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
    221e:	81 2f       	mov	r24, r17
    2220:	11 0f       	add	r17, r17
    2222:	99 0b       	sbc	r25, r25
    2224:	fc 01       	movw	r30, r24
    2226:	e1 5b       	subi	r30, 0xB1	; 177
    2228:	fd 4f       	sbci	r31, 0xFD	; 253
    222a:	e4 91       	lpm	r30, Z
    222c:	e8 8b       	std	Y+16, r30	; 0x10
    222e:	fc 01       	movw	r30, r24
    2230:	eb 55       	subi	r30, 0x5B	; 91
    2232:	fd 4f       	sbci	r31, 0xFD	; 253
    2234:	e4 91       	lpm	r30, Z
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	ee 0f       	add	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	eb 5e       	subi	r30, 0xEB	; 235
    223e:	fc 4f       	sbci	r31, 0xFC	; 252
    2240:	85 91       	lpm	r24, Z+
    2242:	94 91       	lpm	r25, Z
    2244:	9a 8b       	std	Y+18, r25	; 0x12
    2246:	89 8b       	std	Y+17, r24	; 0x11
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	08 95       	ret

00002250 <SoftwareSerial::setRX(signed char)>:
_ZN14SoftwareSerial5setRXEa():
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	ec 01       	movw	r28, r24
    2258:	16 2f       	mov	r17, r22
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	81 2f       	mov	r24, r17
    225e:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
    2262:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2264:	81 fd       	sbrc	r24, 1
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <SoftwareSerial::setRX(signed char)+0x20>
    2268:	61 e0       	ldi	r22, 0x01	; 1
    226a:	81 2f       	mov	r24, r17
    226c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <digitalWrite>
    2270:	1c 87       	std	Y+12, r17	; 0x0c
    2272:	81 2f       	mov	r24, r17
    2274:	11 0f       	add	r17, r17
    2276:	99 0b       	sbc	r25, r25
    2278:	fc 01       	movw	r30, r24
    227a:	e1 5b       	subi	r30, 0xB1	; 177
    227c:	fd 4f       	sbci	r31, 0xFD	; 253
    227e:	e4 91       	lpm	r30, Z
    2280:	ed 87       	std	Y+13, r30	; 0x0d
    2282:	fc 01       	movw	r30, r24
    2284:	eb 55       	subi	r30, 0x5B	; 91
    2286:	fd 4f       	sbci	r31, 0xFD	; 253
    2288:	e4 91       	lpm	r30, Z
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	e5 50       	subi	r30, 0x05	; 5
    2292:	fd 4f       	sbci	r31, 0xFD	; 253
    2294:	85 91       	lpm	r24, Z+
    2296:	94 91       	lpm	r25, Z
    2298:	9f 87       	std	Y+15, r25	; 0x0f
    229a:	8e 87       	std	Y+14, r24	; 0x0e
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	08 95       	ret

000022a4 <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>:
_ZN14SoftwareSerialC2Eaab():
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	ec 01       	movw	r28, r24
    22ac:	16 2f       	mov	r17, r22
_ZN5PrintC4Ev():
    22ae:	1b 82       	std	Y+3, r1	; 0x03
    22b0:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
    22b2:	88 ee       	ldi	r24, 0xE8	; 232
    22b4:	93 e0       	ldi	r25, 0x03	; 3
    22b6:	a0 e0       	ldi	r26, 0x00	; 0
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	8c 83       	std	Y+4, r24	; 0x04
    22bc:	9d 83       	std	Y+5, r25	; 0x05
    22be:	ae 83       	std	Y+6, r26	; 0x06
    22c0:	bf 83       	std	Y+7, r27	; 0x07
_ZN14SoftwareSerialC2Eaab():
    22c2:	83 e5       	ldi	r24, 0x53	; 83
    22c4:	92 e0       	ldi	r25, 0x02	; 2
    22c6:	99 83       	std	Y+1, r25	; 0x01
    22c8:	88 83       	st	Y, r24
    22ca:	1f 8a       	std	Y+23, r1	; 0x17
    22cc:	1e 8a       	std	Y+22, r1	; 0x16
    22ce:	19 8e       	std	Y+25, r1	; 0x19
    22d0:	18 8e       	std	Y+24, r1	; 0x18
    22d2:	1b 8e       	std	Y+27, r1	; 0x1b
    22d4:	1a 8e       	std	Y+26, r1	; 0x1a
    22d6:	1d 8e       	std	Y+29, r1	; 0x1d
    22d8:	1c 8e       	std	Y+28, r1	; 0x1c
    22da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22dc:	8e 7f       	andi	r24, 0xFE	; 254
    22de:	20 fb       	bst	r18, 0
    22e0:	81 f9       	bld	r24, 1
    22e2:	8e 8f       	std	Y+30, r24	; 0x1e
    22e4:	64 2f       	mov	r22, r20
    22e6:	ce 01       	movw	r24, r28
    22e8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <SoftwareSerial::setTX(signed char)>
    22ec:	61 2f       	mov	r22, r17
    22ee:	ce 01       	movw	r24, r28
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0c 94 28 11 	jmp	0x2250	; 0x2250 <SoftwareSerial::setRX(signed char)>

000022fa <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:315
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    22fa:	8f 92       	push	r8
    22fc:	9f 92       	push	r9
    22fe:	af 92       	push	r10
    2300:	bf 92       	push	r11
    2302:	cf 92       	push	r12
    2304:	df 92       	push	r13
    2306:	ef 92       	push	r14
    2308:	ff 92       	push	r15
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	ec 01       	movw	r28, r24
    2314:	9a 01       	movw	r18, r20
    2316:	ab 01       	movw	r20, r22
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2318:	1b 8e       	std	Y+27, r1	; 0x1b
    231a:	1a 8e       	std	Y+26, r1	; 0x1a
    231c:	19 8e       	std	Y+25, r1	; 0x19
    231e:	18 8e       	std	Y+24, r1	; 0x18
    2320:	1f 8a       	std	Y+23, r1	; 0x17
    2322:	1e 8a       	std	Y+22, r1	; 0x16
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:319

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2324:	60 e4       	ldi	r22, 0x40	; 64
    2326:	72 e4       	ldi	r23, 0x42	; 66
    2328:	8f e0       	ldi	r24, 0x0F	; 15
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2330:	49 01       	movw	r8, r18
    2332:	69 01       	movw	r12, r18
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    2334:	c9 01       	movw	r24, r18
    2336:	03 97       	sbiw	r24, 0x03	; 3
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2338:	24 e0       	ldi	r18, 0x04	; 4
    233a:	82 16       	cp	r8, r18
    233c:	91 04       	cpc	r9, r1
    233e:	10 f4       	brcc	.+4      	; 0x2344 <SoftwareSerial::begin(long)+0x4a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2344:	9d 8f       	std	Y+29, r25	; 0x1d
    2346:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330

#if defined(PCINT_ONLY) || defined(INT_AND_PCINT)
  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2348:	9c 85       	ldd	r25, Y+12	; 0x0c
    234a:	86 ef       	ldi	r24, 0xF6	; 246
    234c:	89 0f       	add	r24, r25
    234e:	74 01       	movw	r14, r8
    2350:	f6 94       	lsr	r15
    2352:	e7 94       	ror	r14
    2354:	84 01       	movw	r16, r8
    2356:	00 0f       	add	r16, r16
    2358:	11 1f       	adc	r17, r17
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	48 f0       	brcs	.+18     	; 0x2370 <SoftwareSerial::begin(long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330 (discriminator 1)
    235e:	2e ec       	ldi	r18, 0xCE	; 206
    2360:	29 0f       	add	r18, r25
    2362:	24 30       	cpi	r18, 0x04	; 4
    2364:	28 f0       	brcs	.+10     	; 0x2370 <SoftwareSerial::begin(long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:330 (discriminator 2)
    2366:	22 ec       	ldi	r18, 0xC2	; 194
    2368:	29 0f       	add	r18, r25
    236a:	28 30       	cpi	r18, 0x08	; 8
    236c:	08 f0       	brcs	.+2      	; 0x2370 <SoftwareSerial::begin(long)+0x76>
    236e:	9b c0       	rjmp	.+310    	; 0x24a6 <SoftwareSerial::begin(long)+0x1ac>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2370:	24 e1       	ldi	r18, 0x14	; 20
    2372:	e2 16       	cp	r14, r18
    2374:	f1 04       	cpc	r15, r1
    2376:	08 f4       	brcc	.+2      	; 0x237a <SoftwareSerial::begin(long)+0x80>
    2378:	71 c0       	rjmp	.+226    	; 0x245c <SoftwareSerial::begin(long)+0x162>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    237a:	97 01       	movw	r18, r14
    237c:	23 51       	subi	r18, 0x13	; 19
    237e:	31 09       	sbc	r19, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:345
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2380:	3f 8b       	std	Y+23, r19	; 0x17
    2382:	2e 8b       	std	Y+22, r18	; 0x16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2384:	26 e0       	ldi	r18, 0x06	; 6
    2386:	c2 16       	cp	r12, r18
    2388:	d1 04       	cpc	r13, r1
    238a:	08 f4       	brcc	.+2      	; 0x238e <SoftwareSerial::begin(long)+0x94>
    238c:	6a c0       	rjmp	.+212    	; 0x2462 <SoftwareSerial::begin(long)+0x168>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    238e:	94 01       	movw	r18, r8
    2390:	25 50       	subi	r18, 0x05	; 5
    2392:	31 09       	sbc	r19, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:348
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2394:	39 8f       	std	Y+25, r19	; 0x19
    2396:	28 8f       	std	Y+24, r18	; 0x18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2398:	08 0d       	add	r16, r8
    239a:	19 1d       	adc	r17, r9
    239c:	16 95       	lsr	r17
    239e:	07 95       	ror	r16
    23a0:	16 95       	lsr	r17
    23a2:	07 95       	ror	r16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    23a4:	0d 30       	cpi	r16, 0x0D	; 13
    23a6:	11 05       	cpc	r17, r1
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <SoftwareSerial::begin(long)+0xb2>
    23aa:	5e c0       	rjmp	.+188    	; 0x2468 <SoftwareSerial::begin(long)+0x16e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    23ac:	0c 50       	subi	r16, 0x0C	; 12
    23ae:	11 09       	sbc	r17, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:357
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    23b0:	1b 8f       	std	Y+27, r17	; 0x1b
    23b2:	0a 8f       	std	Y+26, r16	; 0x1a
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	50 f0       	brcs	.+20     	; 0x23cc <SoftwareSerial::begin(long)+0xd2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 2)
    23b8:	2e ec       	ldi	r18, 0xCE	; 206
    23ba:	29 0f       	add	r18, r25
    23bc:	24 30       	cpi	r18, 0x04	; 4
    23be:	30 f0       	brcs	.+12     	; 0x23cc <SoftwareSerial::begin(long)+0xd2>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 4)
    23c0:	22 ec       	ldi	r18, 0xC2	; 194
    23c2:	29 0f       	add	r18, r25
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	e0 e0       	ldi	r30, 0x00	; 0
    23c8:	28 30       	cpi	r18, 0x08	; 8
    23ca:	10 f4       	brcc	.+4      	; 0x23d0 <SoftwareSerial::begin(long)+0xd6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    23cc:	e8 e6       	ldi	r30, 0x68	; 104
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 8)
    23d0:	20 81       	ld	r18, Z
    23d2:	84 30       	cpi	r24, 0x04	; 4
    23d4:	28 f0       	brcs	.+10     	; 0x23e0 <SoftwareSerial::begin(long)+0xe6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 9)
    23d6:	32 ec       	ldi	r19, 0xC2	; 194
    23d8:	39 0f       	add	r19, r25
    23da:	38 30       	cpi	r19, 0x08	; 8
    23dc:	08 f4       	brcc	.+2      	; 0x23e0 <SoftwareSerial::begin(long)+0xe6>
    23de:	47 c0       	rjmp	.+142    	; 0x246e <SoftwareSerial::begin(long)+0x174>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    23e0:	31 e0       	ldi	r19, 0x01	; 1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 18)
    23e2:	23 2b       	or	r18, r19
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	48 f0       	brcs	.+18     	; 0x23fa <SoftwareSerial::begin(long)+0x100>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 20)
    23e8:	8e ec       	ldi	r24, 0xCE	; 206
    23ea:	89 0f       	add	r24, r25
    23ec:	84 30       	cpi	r24, 0x04	; 4
    23ee:	28 f0       	brcs	.+10     	; 0x23fa <SoftwareSerial::begin(long)+0x100>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 22)
    23f0:	9e 53       	subi	r25, 0x3E	; 62
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	e0 e0       	ldi	r30, 0x00	; 0
    23f6:	98 30       	cpi	r25, 0x08	; 8
    23f8:	10 f4       	brcc	.+4      	; 0x23fe <SoftwareSerial::begin(long)+0x104>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371
    23fa:	e8 e6       	ldi	r30, 0x68	; 104
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371 (discriminator 26)
    23fe:	20 83       	st	Z, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 26)
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2400:	8c 85       	ldd	r24, Y+12	; 0x0c
    2402:	96 ef       	ldi	r25, 0xF6	; 246
    2404:	98 0f       	add	r25, r24
    2406:	94 30       	cpi	r25, 0x04	; 4
    2408:	a0 f1       	brcs	.+104    	; 0x2472 <SoftwareSerial::begin(long)+0x178>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 1)
    240a:	2e ec       	ldi	r18, 0xCE	; 206
    240c:	28 0f       	add	r18, r24
    240e:	24 30       	cpi	r18, 0x04	; 4
    2410:	80 f1       	brcs	.+96     	; 0x2472 <SoftwareSerial::begin(long)+0x178>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 3)
    2412:	22 ec       	ldi	r18, 0xC2	; 194
    2414:	28 0f       	add	r18, r24
    2416:	28 30       	cpi	r18, 0x08	; 8
    2418:	78 f5       	brcc	.+94     	; 0x2478 <SoftwareSerial::begin(long)+0x17e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    241a:	2d e6       	ldi	r18, 0x6D	; 109
    241c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374 (discriminator 10)
    241e:	3c 8b       	std	Y+20, r19	; 0x14
    2420:	2b 8b       	std	Y+19, r18	; 0x13
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 10)
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2422:	94 30       	cpi	r25, 0x04	; 4
    2424:	60 f5       	brcc	.+88     	; 0x247e <SoftwareSerial::begin(long)+0x184>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 1)
    2426:	9a ef       	ldi	r25, 0xFA	; 250
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 10)
    2428:	98 0f       	add	r25, r24
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <SoftwareSerial::begin(long)+0x136>
    242e:	88 0f       	add	r24, r24
    2430:	9a 95       	dec	r25
    2432:	ea f7       	brpl	.-6      	; 0x242e <SoftwareSerial::begin(long)+0x134>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 24)
    2434:	8d 8b       	std	Y+21, r24	; 0x15
_delay_loop_2():
c:\users\dh\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2436:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2438:	9d 8d       	ldd	r25, Y+29	; 0x1d
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <SoftwareSerial::begin(long)+0x140>
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:434
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    243e:	ce 01       	movw	r24, r28
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:435
}
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	ef 90       	pop	r14
    244c:	df 90       	pop	r13
    244e:	cf 90       	pop	r12
    2450:	bf 90       	pop	r11
    2452:	af 90       	pop	r10
    2454:	9f 90       	pop	r9
    2456:	8f 90       	pop	r8
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:434
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2458:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <SoftwareSerial::listen()>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    245c:	21 e0       	ldi	r18, 0x01	; 1
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	8f cf       	rjmp	.-226    	; 0x2380 <SoftwareSerial::begin(long)+0x86>
    2462:	21 e0       	ldi	r18, 0x01	; 1
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	96 cf       	rjmp	.-212    	; 0x2394 <SoftwareSerial::begin(long)+0x9a>
    2468:	01 e0       	ldi	r16, 0x01	; 1
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	a1 cf       	rjmp	.-190    	; 0x23b0 <SoftwareSerial::begin(long)+0xb6>
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:371


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    246e:	34 e0       	ldi	r19, 0x04	; 4
    2470:	b8 cf       	rjmp	.-144    	; 0x23e2 <SoftwareSerial::begin(long)+0xe8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:374
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2472:	2b e6       	ldi	r18, 0x6B	; 107
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	d3 cf       	rjmp	.-90     	; 0x241e <SoftwareSerial::begin(long)+0x124>
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	d0 cf       	rjmp	.-96     	; 0x241e <SoftwareSerial::begin(long)+0x124>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 2)
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    247e:	82 33       	cpi	r24, 0x32	; 50
    2480:	51 f0       	breq	.+20     	; 0x2496 <SoftwareSerial::begin(long)+0x19c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 4)
    2482:	83 33       	cpi	r24, 0x33	; 51
    2484:	51 f0       	breq	.+20     	; 0x249a <SoftwareSerial::begin(long)+0x1a0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 6)
    2486:	84 33       	cpi	r24, 0x34	; 52
    2488:	51 f0       	breq	.+20     	; 0x249e <SoftwareSerial::begin(long)+0x1a4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 8)
    248a:	92 ec       	ldi	r25, 0xC2	; 194
    248c:	98 0f       	add	r25, r24
    248e:	98 30       	cpi	r25, 0x08	; 8
    2490:	40 f4       	brcc	.+16     	; 0x24a2 <SoftwareSerial::begin(long)+0x1a8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375 (discriminator 10)
    2492:	92 ec       	ldi	r25, 0xC2	; 194
    2494:	c9 cf       	rjmp	.-110    	; 0x2428 <SoftwareSerial::begin(long)+0x12e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:375
    2496:	88 e0       	ldi	r24, 0x08	; 8
    2498:	cd cf       	rjmp	.-102    	; 0x2434 <SoftwareSerial::begin(long)+0x13a>
    249a:	84 e0       	ldi	r24, 0x04	; 4
    249c:	cb cf       	rjmp	.-106    	; 0x2434 <SoftwareSerial::begin(long)+0x13a>
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	c9 cf       	rjmp	.-110    	; 0x2434 <SoftwareSerial::begin(long)+0x13a>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	c7 cf       	rjmp	.-114    	; 0x2434 <SoftwareSerial::begin(long)+0x13a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387
  else
#endif
#if defined(INT_ONLY) || defined(INT_AND_PCINT)
  {
     // Direct interrupts
     attachInterrupt(digitalPinToInterrupt(_receivePin), isr, CHANGE);
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	92 30       	cpi	r25, 0x02	; 2
    24aa:	49 f0       	breq	.+18     	; 0x24be <SoftwareSerial::begin(long)+0x1c4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 1)
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	93 30       	cpi	r25, 0x03	; 3
    24b0:	31 f0       	breq	.+12     	; 0x24be <SoftwareSerial::begin(long)+0x1c4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 3)
    24b2:	8e ee       	ldi	r24, 0xEE	; 238
    24b4:	89 0f       	add	r24, r25
    24b6:	84 30       	cpi	r24, 0x04	; 4
    24b8:	40 f5       	brcc	.+80     	; 0x250a <SoftwareSerial::begin(long)+0x210>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 5)
    24ba:	87 e1       	ldi	r24, 0x17	; 23
    24bc:	89 1b       	sub	r24, r25
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 12)
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	67 e3       	ldi	r22, 0x37	; 55
    24c4:	7f e0       	ldi	r23, 0x0F	; 15
    24c6:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <attachInterrupt>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304 (discriminator 12)
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    24ca:	84 e1       	ldi	r24, 0x14	; 20
    24cc:	e8 16       	cp	r14, r24
    24ce:	f1 04       	cpc	r15, r1
    24d0:	f0 f0       	brcs	.+60     	; 0x250e <SoftwareSerial::begin(long)+0x214>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    24d2:	c7 01       	movw	r24, r14
    24d4:	43 97       	sbiw	r24, 0x13	; 19
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:403
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    24d6:	9f 8b       	std	Y+23, r25	; 0x17
    24d8:	8e 8b       	std	Y+22, r24	; 0x16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    24da:	c4 01       	movw	r24, r8
    24dc:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    24de:	26 e0       	ldi	r18, 0x06	; 6
    24e0:	c2 16       	cp	r12, r18
    24e2:	d1 04       	cpc	r13, r1
    24e4:	10 f4       	brcc	.+4      	; 0x24ea <SoftwareSerial::begin(long)+0x1f0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:406
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    24ea:	99 8f       	std	Y+25, r25	; 0x19
    24ec:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:415
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    24ee:	08 0d       	add	r16, r8
    24f0:	19 1d       	adc	r17, r9
    24f2:	16 95       	lsr	r17
    24f4:	07 95       	ror	r16
    24f6:	16 95       	lsr	r17
    24f8:	07 95       	ror	r16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    24fa:	0d 30       	cpi	r16, 0x0D	; 13
    24fc:	11 05       	cpc	r17, r1
    24fe:	50 f0       	brcs	.+20     	; 0x2514 <SoftwareSerial::begin(long)+0x21a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    2500:	0c 50       	subi	r16, 0x0C	; 12
    2502:	11 09       	sbc	r17, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:415
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2504:	1b 8f       	std	Y+27, r17	; 0x1b
    2506:	0a 8f       	std	Y+26, r16	; 0x1a
    2508:	96 cf       	rjmp	.-212    	; 0x2436 <SoftwareSerial::begin(long)+0x13c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387
  else
#endif
#if defined(INT_ONLY) || defined(INT_AND_PCINT)
  {
     // Direct interrupts
     attachInterrupt(digitalPinToInterrupt(_receivePin), isr, CHANGE);
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	d8 cf       	rjmp	.-80     	; 0x24be <SoftwareSerial::begin(long)+0x1c4>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	e1 cf       	rjmp	.-62     	; 0x24d6 <SoftwareSerial::begin(long)+0x1dc>
    2514:	01 e0       	ldi	r16, 0x01	; 1
    2516:	10 e0       	ldi	r17, 0x00	; 0
    2518:	f5 cf       	rjmp	.-22     	; 0x2504 <SoftwareSerial::begin(long)+0x20a>

0000251a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
#endif
  *_ucsrc = config;
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
  *_ucsrb &= ~_BV(UDRIE0);
}
    251a:	fc 01       	movw	r30, r24
    251c:	91 8d       	ldd	r25, Z+25	; 0x19
    251e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2520:	89 2f       	mov	r24, r25
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	80 5c       	subi	r24, 0xC0	; 192
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	82 1b       	sub	r24, r18
    252a:	91 09       	sbc	r25, r1
    252c:	8f 73       	andi	r24, 0x3F	; 63
    252e:	99 27       	eor	r25, r25
    2530:	08 95       	ret

00002532 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
    2532:	fc 01       	movw	r30, r24
    2534:	91 8d       	ldd	r25, Z+25	; 0x19
    2536:	82 8d       	ldd	r24, Z+26	; 0x1a
    2538:	98 17       	cp	r25, r24
    253a:	31 f0       	breq	.+12     	; 0x2548 <HardwareSerial::peek()+0x16>
    253c:	82 8d       	ldd	r24, Z+26	; 0x1a
    253e:	e8 0f       	add	r30, r24
    2540:	f1 1d       	adc	r31, r1
    2542:	85 8d       	ldd	r24, Z+29	; 0x1d
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	08 95       	ret
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	9f ef       	ldi	r25, 0xFF	; 255
    254c:	08 95       	ret

0000254e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
    254e:	fc 01       	movw	r30, r24
    2550:	91 8d       	ldd	r25, Z+25	; 0x19
    2552:	82 8d       	ldd	r24, Z+26	; 0x1a
    2554:	98 17       	cp	r25, r24
    2556:	61 f0       	breq	.+24     	; 0x2570 <HardwareSerial::read()+0x22>
    2558:	a2 8d       	ldd	r26, Z+26	; 0x1a
    255a:	ae 0f       	add	r26, r30
    255c:	bf 2f       	mov	r27, r31
    255e:	b1 1d       	adc	r27, r1
    2560:	5d 96       	adiw	r26, 0x1d	; 29
    2562:	8c 91       	ld	r24, X
    2564:	92 8d       	ldd	r25, Z+26	; 0x1a
    2566:	9f 5f       	subi	r25, 0xFF	; 255
    2568:	9f 73       	andi	r25, 0x3F	; 63
    256a:	92 8f       	std	Z+26, r25	; 0x1a
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	08 95       	ret
    2570:	8f ef       	ldi	r24, 0xFF	; 255
    2572:	9f ef       	ldi	r25, 0xFF	; 255
    2574:	08 95       	ret

00002576 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
    2576:	fc 01       	movw	r30, r24
    2578:	53 8d       	ldd	r21, Z+27	; 0x1b
    257a:	44 8d       	ldd	r20, Z+28	; 0x1c
    257c:	25 2f       	mov	r18, r21
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	84 2f       	mov	r24, r20
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	82 1b       	sub	r24, r18
    2586:	93 0b       	sbc	r25, r19
    2588:	54 17       	cp	r21, r20
    258a:	10 f0       	brcs	.+4      	; 0x2590 <HardwareSerial::availableForWrite()+0x1a>
    258c:	cf 96       	adiw	r24, 0x3f	; 63
    258e:	08 95       	ret
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	08 95       	ret

00002594 <serialEventRun()>:
_Z14serialEventRunv():
    2594:	8a ef       	ldi	r24, 0xFA	; 250
    2596:	93 e1       	ldi	r25, 0x13	; 19
    2598:	89 2b       	or	r24, r25
    259a:	49 f0       	breq	.+18     	; 0x25ae <serialEventRun()+0x1a>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	89 2b       	or	r24, r25
    25a2:	29 f0       	breq	.+10     	; 0x25ae <serialEventRun()+0x1a>
    25a4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <Serial0_available()>
    25a8:	81 11       	cpse	r24, r1
    25aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25ae:	81 e9       	ldi	r24, 0x91	; 145
    25b0:	94 e1       	ldi	r25, 0x14	; 20
    25b2:	89 2b       	or	r24, r25
    25b4:	49 f0       	breq	.+18     	; 0x25c8 <serialEventRun()+0x34>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	89 2b       	or	r24, r25
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <serialEventRun()+0x34>
    25be:	0e 94 91 14 	call	0x2922	; 0x2922 <Serial1_available()>
    25c2:	81 11       	cpse	r24, r1
    25c4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	89 2b       	or	r24, r25
    25ce:	49 f0       	breq	.+18     	; 0x25e2 <serialEventRun()+0x4e>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	89 2b       	or	r24, r25
    25d6:	29 f0       	breq	.+10     	; 0x25e2 <serialEventRun()+0x4e>
    25d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25dc:	81 11       	cpse	r24, r1
    25de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	89 2b       	or	r24, r25
    25e8:	49 f0       	breq	.+18     	; 0x25fc <serialEventRun()+0x68>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	89 2b       	or	r24, r25
    25f0:	29 f0       	breq	.+10     	; 0x25fc <serialEventRun()+0x68>
    25f2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25f6:	81 11       	cpse	r24, r1
    25f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    25fc:	08 95       	ret

000025fe <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
    25fe:	fc 01       	movw	r30, r24
    2600:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2602:	a8 0f       	add	r26, r24
    2604:	b9 2f       	mov	r27, r25
    2606:	b1 1d       	adc	r27, r1
    2608:	a3 5a       	subi	r26, 0xA3	; 163
    260a:	bf 4f       	sbci	r27, 0xFF	; 255
    260c:	2c 91       	ld	r18, X
    260e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	8f 73       	andi	r24, 0x3F	; 63
    2616:	99 27       	eor	r25, r25
    2618:	84 8f       	std	Z+28, r24	; 0x1c
    261a:	a6 89       	ldd	r26, Z+22	; 0x16
    261c:	b7 89       	ldd	r27, Z+23	; 0x17
    261e:	2c 93       	st	X, r18
    2620:	a0 89       	ldd	r26, Z+16	; 0x10
    2622:	b1 89       	ldd	r27, Z+17	; 0x11
    2624:	8c 91       	ld	r24, X
    2626:	80 64       	ori	r24, 0x40	; 64
    2628:	8c 93       	st	X, r24
    262a:	93 8d       	ldd	r25, Z+27	; 0x1b
    262c:	84 8d       	ldd	r24, Z+28	; 0x1c
    262e:	98 13       	cpse	r25, r24
    2630:	06 c0       	rjmp	.+12     	; 0x263e <HardwareSerial::_tx_udr_empty_irq()+0x40>
    2632:	02 88       	ldd	r0, Z+18	; 0x12
    2634:	f3 89       	ldd	r31, Z+19	; 0x13
    2636:	e0 2d       	mov	r30, r0
    2638:	80 81       	ld	r24, Z
    263a:	8f 7d       	andi	r24, 0xDF	; 223
    263c:	80 83       	st	Z, r24
    263e:	08 95       	ret

00002640 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	ec 01       	movw	r28, r24
    2646:	88 8d       	ldd	r24, Y+24	; 0x18
    2648:	88 23       	and	r24, r24
    264a:	b9 f0       	breq	.+46     	; 0x267a <HardwareSerial::flush()+0x3a>
    264c:	aa 89       	ldd	r26, Y+18	; 0x12
    264e:	bb 89       	ldd	r27, Y+19	; 0x13
    2650:	e8 89       	ldd	r30, Y+16	; 0x10
    2652:	f9 89       	ldd	r31, Y+17	; 0x11
    2654:	8c 91       	ld	r24, X
    2656:	85 fd       	sbrc	r24, 5
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <HardwareSerial::flush()+0x20>
    265a:	80 81       	ld	r24, Z
    265c:	86 fd       	sbrc	r24, 6
    265e:	0d c0       	rjmp	.+26     	; 0x267a <HardwareSerial::flush()+0x3a>
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	07 fc       	sbrc	r0, 7
    2664:	f7 cf       	rjmp	.-18     	; 0x2654 <HardwareSerial::flush()+0x14>
    2666:	8c 91       	ld	r24, X
    2668:	85 ff       	sbrs	r24, 5
    266a:	f2 cf       	rjmp	.-28     	; 0x2650 <HardwareSerial::flush()+0x10>
    266c:	80 81       	ld	r24, Z
    266e:	85 ff       	sbrs	r24, 5
    2670:	ed cf       	rjmp	.-38     	; 0x264c <HardwareSerial::flush()+0xc>
    2672:	ce 01       	movw	r24, r28
    2674:	0e 94 ff 12 	call	0x25fe	; 0x25fe <HardwareSerial::_tx_udr_empty_irq()>
    2678:	e9 cf       	rjmp	.-46     	; 0x264c <HardwareSerial::flush()+0xc>
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	08 95       	ret

00002680 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	ec 01       	movw	r28, r24
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	88 8f       	std	Y+24, r24	; 0x18
    2692:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2694:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2696:	98 13       	cpse	r25, r24
    2698:	16 c0       	rjmp	.+44     	; 0x26c6 <HardwareSerial::write(unsigned char)+0x46>
    269a:	e8 89       	ldd	r30, Y+16	; 0x10
    269c:	f9 89       	ldd	r31, Y+17	; 0x11
    269e:	80 81       	ld	r24, Z
    26a0:	85 ff       	sbrs	r24, 5
    26a2:	11 c0       	rjmp	.+34     	; 0x26c6 <HardwareSerial::write(unsigned char)+0x46>
    26a4:	ee 89       	ldd	r30, Y+22	; 0x16
    26a6:	ff 89       	ldd	r31, Y+23	; 0x17
    26a8:	60 83       	st	Z, r22
    26aa:	e8 89       	ldd	r30, Y+16	; 0x10
    26ac:	f9 89       	ldd	r31, Y+17	; 0x11
    26ae:	80 81       	ld	r24, Z
    26b0:	80 64       	ori	r24, 0x40	; 64
    26b2:	80 83       	st	Z, r24
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	08 95       	ret
    26c6:	f6 2e       	mov	r15, r22
    26c8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	0f 5f       	subi	r16, 0xFF	; 255
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	0f 73       	andi	r16, 0x3F	; 63
    26d2:	11 27       	eor	r17, r17
    26d4:	e0 2e       	mov	r14, r16
    26d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26d8:	8e 11       	cpse	r24, r14
    26da:	0c c0       	rjmp	.+24     	; 0x26f4 <HardwareSerial::write(unsigned char)+0x74>
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	07 fc       	sbrc	r0, 7
    26e0:	fa cf       	rjmp	.-12     	; 0x26d6 <HardwareSerial::write(unsigned char)+0x56>
    26e2:	e8 89       	ldd	r30, Y+16	; 0x10
    26e4:	f9 89       	ldd	r31, Y+17	; 0x11
    26e6:	80 81       	ld	r24, Z
    26e8:	85 ff       	sbrs	r24, 5
    26ea:	f5 cf       	rjmp	.-22     	; 0x26d6 <HardwareSerial::write(unsigned char)+0x56>
    26ec:	ce 01       	movw	r24, r28
    26ee:	0e 94 ff 12 	call	0x25fe	; 0x25fe <HardwareSerial::_tx_udr_empty_irq()>
    26f2:	f1 cf       	rjmp	.-30     	; 0x26d6 <HardwareSerial::write(unsigned char)+0x56>
    26f4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    26f6:	ec 0f       	add	r30, r28
    26f8:	fd 2f       	mov	r31, r29
    26fa:	f1 1d       	adc	r31, r1
    26fc:	e3 5a       	subi	r30, 0xA3	; 163
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	f0 82       	st	Z, r15
    2702:	0b 8f       	std	Y+27, r16	; 0x1b
    2704:	ea 89       	ldd	r30, Y+18	; 0x12
    2706:	fb 89       	ldd	r31, Y+19	; 0x13
    2708:	80 81       	ld	r24, Z
    270a:	80 62       	ori	r24, 0x20	; 32
    270c:	d2 cf       	rjmp	.-92     	; 0x26b2 <HardwareSerial::write(unsigned char)+0x32>

0000270e <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	ec 01       	movw	r28, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    2714:	e8 81       	ld	r30, Y
    2716:	f9 81       	ldd	r31, Y+1	; 0x01
    2718:	06 80       	ldd	r0, Z+6	; 0x06
    271a:	f7 81       	ldd	r31, Z+7	; 0x07
    271c:	e0 2d       	mov	r30, r0
    271e:	19 95       	eicall
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    2720:	ea 89       	ldd	r30, Y+18	; 0x12
    2722:	fb 89       	ldd	r31, Y+19	; 0x13
    2724:	80 81       	ld	r24, Z
    2726:	87 74       	andi	r24, 0x47	; 71
    2728:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    272a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    272c:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	08 95       	ret

00002734 <__vector_25>:
__vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2734:	1f 92       	push	r1
    2736:	0f 92       	push	r0
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	0f 92       	push	r0
    273c:	11 24       	eor	r1, r1
    273e:	0b b6       	in	r0, 0x3b	; 59
    2740:	0f 92       	push	r0
    2742:	2f 93       	push	r18
    2744:	8f 93       	push	r24
    2746:	9f 93       	push	r25
    2748:	ef 93       	push	r30
    274a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    274c:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <Serial+0x10>
    2750:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <Serial+0x11>
    2754:	80 81       	ld	r24, Z
    2756:	e0 91 16 04 	lds	r30, 0x0416	; 0x800416 <Serial+0x16>
    275a:	f0 91 17 04 	lds	r31, 0x0417	; 0x800417 <Serial+0x17>
    275e:	82 fd       	sbrc	r24, 2
    2760:	1d c0       	rjmp	.+58     	; 0x279c <__vector_25+0x68>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2762:	90 81       	ld	r25, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2764:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <Serial+0x19>
    2768:	8f 5f       	subi	r24, 0xFF	; 255
    276a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    276c:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <Serial+0x1a>
    2770:	82 17       	cp	r24, r18
    2772:	41 f0       	breq	.+16     	; 0x2784 <__vector_25+0x50>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2774:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <Serial+0x19>
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	e0 50       	subi	r30, 0x00	; 0
    277c:	fc 4f       	sbci	r31, 0xFC	; 252
    277e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2780:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Serial+0x19>
__vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2784:	ff 91       	pop	r31
    2786:	ef 91       	pop	r30
    2788:	9f 91       	pop	r25
    278a:	8f 91       	pop	r24
    278c:	2f 91       	pop	r18
    278e:	0f 90       	pop	r0
    2790:	0b be       	out	0x3b, r0	; 59
    2792:	0f 90       	pop	r0
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	0f 90       	pop	r0
    2798:	1f 90       	pop	r1
    279a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    279c:	80 81       	ld	r24, Z
__vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    279e:	f2 cf       	rjmp	.-28     	; 0x2784 <__vector_25+0x50>

000027a0 <__vector_26>:
__vector_26():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    27a0:	1f 92       	push	r1
    27a2:	0f 92       	push	r0
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	0f 92       	push	r0
    27a8:	11 24       	eor	r1, r1
    27aa:	0b b6       	in	r0, 0x3b	; 59
    27ac:	0f 92       	push	r0
    27ae:	2f 93       	push	r18
    27b0:	3f 93       	push	r19
    27b2:	4f 93       	push	r20
    27b4:	5f 93       	push	r21
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	94 e0       	ldi	r25, 0x04	; 4
    27ca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    27ce:	ff 91       	pop	r31
    27d0:	ef 91       	pop	r30
    27d2:	bf 91       	pop	r27
    27d4:	af 91       	pop	r26
    27d6:	9f 91       	pop	r25
    27d8:	8f 91       	pop	r24
    27da:	7f 91       	pop	r23
    27dc:	6f 91       	pop	r22
    27de:	5f 91       	pop	r21
    27e0:	4f 91       	pop	r20
    27e2:	3f 91       	pop	r19
    27e4:	2f 91       	pop	r18
    27e6:	0f 90       	pop	r0
    27e8:	0b be       	out	0x3b, r0	; 59
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	0f 90       	pop	r0
    27f0:	1f 90       	pop	r1
    27f2:	18 95       	reti

000027f4 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	94 e0       	ldi	r25, 0x04	; 4
    27f8:	0e 94 8d 12 	call	0x251a	; 0x251a <HardwareSerial::available()>
    27fc:	21 e0       	ldi	r18, 0x01	; 1
    27fe:	89 2b       	or	r24, r25
    2800:	09 f4       	brne	.+2      	; 0x2804 <Serial0_available()+0x10>
    2802:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2804:	82 2f       	mov	r24, r18
    2806:	08 95       	ret

00002808 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    2808:	e0 e0       	ldi	r30, 0x00	; 0
    280a:	f4 e0       	ldi	r31, 0x04	; 4
    280c:	13 82       	std	Z+3, r1	; 0x03
    280e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    2810:	88 ee       	ldi	r24, 0xE8	; 232
    2812:	93 e0       	ldi	r25, 0x03	; 3
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	84 83       	std	Z+4, r24	; 0x04
    281a:	95 83       	std	Z+5, r25	; 0x05
    281c:	a6 83       	std	Z+6, r26	; 0x06
    281e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2820:	85 e6       	ldi	r24, 0x65	; 101
    2822:	92 e0       	ldi	r25, 0x02	; 2
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
    2828:	85 ec       	ldi	r24, 0xC5	; 197
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	95 87       	std	Z+13, r25	; 0x0d
    282e:	84 87       	std	Z+12, r24	; 0x0c
    2830:	84 ec       	ldi	r24, 0xC4	; 196
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	97 87       	std	Z+15, r25	; 0x0f
    2836:	86 87       	std	Z+14, r24	; 0x0e
    2838:	80 ec       	ldi	r24, 0xC0	; 192
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	91 8b       	std	Z+17, r25	; 0x11
    283e:	80 8b       	std	Z+16, r24	; 0x10
    2840:	81 ec       	ldi	r24, 0xC1	; 193
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	93 8b       	std	Z+19, r25	; 0x13
    2846:	82 8b       	std	Z+18, r24	; 0x12
    2848:	82 ec       	ldi	r24, 0xC2	; 194
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	95 8b       	std	Z+21, r25	; 0x15
    284e:	84 8b       	std	Z+20, r24	; 0x14
    2850:	86 ec       	ldi	r24, 0xC6	; 198
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	97 8b       	std	Z+23, r25	; 0x17
    2856:	86 8b       	std	Z+22, r24	; 0x16
    2858:	11 8e       	std	Z+25, r1	; 0x19
    285a:	12 8e       	std	Z+26, r1	; 0x1a
    285c:	13 8e       	std	Z+27, r1	; 0x1b
    285e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    2860:	08 95       	ret

00002862 <__vector_36>:
__vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    2862:	1f 92       	push	r1
    2864:	0f 92       	push	r0
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	0f 92       	push	r0
    286a:	11 24       	eor	r1, r1
    286c:	0b b6       	in	r0, 0x3b	; 59
    286e:	0f 92       	push	r0
    2870:	2f 93       	push	r18
    2872:	8f 93       	push	r24
    2874:	9f 93       	push	r25
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    287a:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <Serial1+0x10>
    287e:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <Serial1+0x11>
    2882:	80 81       	ld	r24, Z
    2884:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <Serial1+0x16>
    2888:	f0 91 b4 04 	lds	r31, 0x04B4	; 0x8004b4 <Serial1+0x17>
    288c:	82 fd       	sbrc	r24, 2
    288e:	1d c0       	rjmp	.+58     	; 0x28ca <__vector_36+0x68>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2890:	90 81       	ld	r25, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2892:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <Serial1+0x19>
    2896:	8f 5f       	subi	r24, 0xFF	; 255
    2898:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    289a:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <Serial1+0x1a>
    289e:	82 17       	cp	r24, r18
    28a0:	41 f0       	breq	.+16     	; 0x28b2 <__vector_36+0x50>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    28a2:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <Serial1+0x19>
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	e3 56       	subi	r30, 0x63	; 99
    28aa:	fb 4f       	sbci	r31, 0xFB	; 251
    28ac:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    28ae:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <Serial1+0x19>
__vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    28b2:	ff 91       	pop	r31
    28b4:	ef 91       	pop	r30
    28b6:	9f 91       	pop	r25
    28b8:	8f 91       	pop	r24
    28ba:	2f 91       	pop	r18
    28bc:	0f 90       	pop	r0
    28be:	0b be       	out	0x3b, r0	; 59
    28c0:	0f 90       	pop	r0
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	0f 90       	pop	r0
    28c6:	1f 90       	pop	r1
    28c8:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    28ca:	80 81       	ld	r24, Z
__vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    28cc:	f2 cf       	rjmp	.-28     	; 0x28b2 <__vector_36+0x50>

000028ce <__vector_37>:
__vector_37():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    28ce:	1f 92       	push	r1
    28d0:	0f 92       	push	r0
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	0f 92       	push	r0
    28d6:	11 24       	eor	r1, r1
    28d8:	0b b6       	in	r0, 0x3b	; 59
    28da:	0f 92       	push	r0
    28dc:	2f 93       	push	r18
    28de:	3f 93       	push	r19
    28e0:	4f 93       	push	r20
    28e2:	5f 93       	push	r21
    28e4:	6f 93       	push	r22
    28e6:	7f 93       	push	r23
    28e8:	8f 93       	push	r24
    28ea:	9f 93       	push	r25
    28ec:	af 93       	push	r26
    28ee:	bf 93       	push	r27
    28f0:	ef 93       	push	r30
    28f2:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    28f4:	8d e9       	ldi	r24, 0x9D	; 157
    28f6:	94 e0       	ldi	r25, 0x04	; 4
    28f8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    28fc:	ff 91       	pop	r31
    28fe:	ef 91       	pop	r30
    2900:	bf 91       	pop	r27
    2902:	af 91       	pop	r26
    2904:	9f 91       	pop	r25
    2906:	8f 91       	pop	r24
    2908:	7f 91       	pop	r23
    290a:	6f 91       	pop	r22
    290c:	5f 91       	pop	r21
    290e:	4f 91       	pop	r20
    2910:	3f 91       	pop	r19
    2912:	2f 91       	pop	r18
    2914:	0f 90       	pop	r0
    2916:	0b be       	out	0x3b, r0	; 59
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

00002922 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    2922:	8d e9       	ldi	r24, 0x9D	; 157
    2924:	94 e0       	ldi	r25, 0x04	; 4
    2926:	0e 94 8d 12 	call	0x251a	; 0x251a <HardwareSerial::available()>
    292a:	21 e0       	ldi	r18, 0x01	; 1
    292c:	89 2b       	or	r24, r25
    292e:	09 f4       	brne	.+2      	; 0x2932 <Serial1_available()+0x10>
    2930:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    2932:	82 2f       	mov	r24, r18
    2934:	08 95       	ret

00002936 <_GLOBAL__sub_I___vector_36>:
_ZN5PrintC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    2936:	ed e9       	ldi	r30, 0x9D	; 157
    2938:	f4 e0       	ldi	r31, 0x04	; 4
    293a:	13 82       	std	Z+3, r1	; 0x03
    293c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    293e:	88 ee       	ldi	r24, 0xE8	; 232
    2940:	93 e0       	ldi	r25, 0x03	; 3
    2942:	a0 e0       	ldi	r26, 0x00	; 0
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	84 83       	std	Z+4, r24	; 0x04
    2948:	95 83       	std	Z+5, r25	; 0x05
    294a:	a6 83       	std	Z+6, r26	; 0x06
    294c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    294e:	85 e6       	ldi	r24, 0x65	; 101
    2950:	92 e0       	ldi	r25, 0x02	; 2
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	80 83       	st	Z, r24
    2956:	8d ec       	ldi	r24, 0xCD	; 205
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	95 87       	std	Z+13, r25	; 0x0d
    295c:	84 87       	std	Z+12, r24	; 0x0c
    295e:	8c ec       	ldi	r24, 0xCC	; 204
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	97 87       	std	Z+15, r25	; 0x0f
    2964:	86 87       	std	Z+14, r24	; 0x0e
    2966:	88 ec       	ldi	r24, 0xC8	; 200
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	91 8b       	std	Z+17, r25	; 0x11
    296c:	80 8b       	std	Z+16, r24	; 0x10
    296e:	89 ec       	ldi	r24, 0xC9	; 201
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	93 8b       	std	Z+19, r25	; 0x13
    2974:	82 8b       	std	Z+18, r24	; 0x12
    2976:	8a ec       	ldi	r24, 0xCA	; 202
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	95 8b       	std	Z+21, r25	; 0x15
    297c:	84 8b       	std	Z+20, r24	; 0x14
    297e:	8e ec       	ldi	r24, 0xCE	; 206
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	97 8b       	std	Z+23, r25	; 0x17
    2984:	86 8b       	std	Z+22, r24	; 0x16
    2986:	11 8e       	std	Z+25, r1	; 0x19
    2988:	12 8e       	std	Z+26, r1	; 0x1a
    298a:	13 8e       	std	Z+27, r1	; 0x1b
    298c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_36():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    298e:	08 95       	ret

00002990 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	6c 01       	movw	r12, r24
    29a6:	7b 01       	movw	r14, r22
    29a8:	8b 01       	movw	r16, r22
    29aa:	04 0f       	add	r16, r20
    29ac:	15 1f       	adc	r17, r21
    29ae:	eb 01       	movw	r28, r22
    29b0:	5e 01       	movw	r10, r28
    29b2:	ae 18       	sub	r10, r14
    29b4:	bf 08       	sbc	r11, r15
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    29b6:	c0 17       	cp	r28, r16
    29b8:	d1 07       	cpc	r29, r17
    29ba:	59 f0       	breq	.+22     	; 0x29d2 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    29bc:	69 91       	ld	r22, Y+
    29be:	d6 01       	movw	r26, r12
    29c0:	ed 91       	ld	r30, X+
    29c2:	fc 91       	ld	r31, X
    29c4:	01 90       	ld	r0, Z+
    29c6:	f0 81       	ld	r31, Z
    29c8:	e0 2d       	mov	r30, r0
    29ca:	c6 01       	movw	r24, r12
    29cc:	19 95       	eicall
    29ce:	89 2b       	or	r24, r25
    29d0:	79 f7       	brne	.-34     	; 0x29b0 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    29d2:	c5 01       	movw	r24, r10
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	bf 90       	pop	r11
    29e6:	af 90       	pop	r10
    29e8:	08 95       	ret

000029ea <tone(unsigned char, unsigned int, unsigned long)>:
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:281


// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    29ea:	4f 92       	push	r4
    29ec:	5f 92       	push	r5
    29ee:	6f 92       	push	r6
    29f0:	7f 92       	push	r7
    29f2:	8f 92       	push	r8
    29f4:	9f 92       	push	r9
    29f6:	af 92       	push	r10
    29f8:	bf 92       	push	r11
    29fa:	cf 92       	push	r12
    29fc:	df 92       	push	r13
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <tone(unsigned char, unsigned int, unsigned long)+0x22>
    2a0c:	1f 92       	push	r1
    2a0e:	1f 92       	push	r1
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	8b 01       	movw	r16, r22
    2a16:	49 01       	movw	r8, r18
    2a18:	5a 01       	movw	r10, r20
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:171
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2a1a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <tone_pins>
    2a1e:	89 17       	cp	r24, r25
    2a20:	c9 f0       	breq	.+50     	; 0x2a54 <tone(unsigned char, unsigned int, unsigned long)+0x6a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:178
    }
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    2a22:	9f 3f       	cpi	r25, 0xFF	; 255
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
    2a26:	ea c0       	rjmp	.+468    	; 0x2bfc <tone(unsigned char, unsigned int, unsigned long)+0x212>
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	df 90       	pop	r13
    2a40:	cf 90       	pop	r12
    2a42:	bf 90       	pop	r11
    2a44:	af 90       	pop	r10
    2a46:	9f 90       	pop	r9
    2a48:	8f 90       	pop	r8
    2a4a:	7f 90       	pop	r7
    2a4c:	6f 90       	pop	r6
    2a4e:	5f 90       	pop	r5
    2a50:	4f 90       	pop	r4
    2a52:	08 95       	ret
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:172
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    2a54:	e8 ef       	ldi	r30, 0xF8	; 248
    2a56:	f1 e0       	ldi	r31, 0x01	; 1
    2a58:	24 91       	lpm	r18, Z
    2a5a:	2d 83       	std	Y+5, r18	; 0x05
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    2a5c:	27 fd       	sbrc	r18, 7
    2a5e:	e4 cf       	rjmp	.-56     	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    2a66:	2d 81       	ldd	r18, Y+5	; 0x05
    2a68:	22 23       	and	r18, r18
    2a6a:	21 f0       	breq	.+8      	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295 (discriminator 1)
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	82 30       	cpi	r24, 0x02	; 2
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
    2a72:	e4 c1       	rjmp	.+968    	; 0x2e3c <tone(unsigned char, unsigned int, unsigned long)+0x452>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:297
    {
      ocr = F_CPU / frequency / 2 - 1;
    2a74:	28 01       	movw	r4, r16
    2a76:	71 2c       	mov	r7, r1
    2a78:	61 2c       	mov	r6, r1
    2a7a:	60 e8       	ldi	r22, 0x80	; 128
    2a7c:	74 e8       	ldi	r23, 0x84	; 132
    2a7e:	8e e1       	ldi	r24, 0x1E	; 30
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a3 01       	movw	r20, r6
    2a84:	98 01       	movw	r18, r16
    2a86:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2a8a:	29 83       	std	Y+1, r18	; 0x01
    2a8c:	3a 83       	std	Y+2, r19	; 0x02
    2a8e:	4b 83       	std	Y+3, r20	; 0x03
    2a90:	5c 83       	std	Y+4, r21	; 0x04
    2a92:	69 01       	movw	r12, r18
    2a94:	7a 01       	movw	r14, r20
    2a96:	91 e0       	ldi	r25, 0x01	; 1
    2a98:	c9 1a       	sub	r12, r25
    2a9a:	d1 08       	sbc	r13, r1
    2a9c:	e1 08       	sbc	r14, r1
    2a9e:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:299
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    2aa0:	af ef       	ldi	r26, 0xFF	; 255
    2aa2:	ca 16       	cp	r12, r26
    2aa4:	d1 04       	cpc	r13, r1
    2aa6:	e1 04       	cpc	r14, r1
    2aa8:	f1 04       	cpc	r15, r1
    2aaa:	09 f0       	breq	.+2      	; 0x2aae <tone(unsigned char, unsigned int, unsigned long)+0xc4>
    2aac:	0c f4       	brge	.+2      	; 0x2ab0 <tone(unsigned char, unsigned int, unsigned long)+0xc6>
    2aae:	a7 c1       	rjmp	.+846    	; 0x2dfe <tone(unsigned char, unsigned int, unsigned long)+0x414>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:301
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    2ab0:	60 e9       	ldi	r22, 0x90	; 144
    2ab2:	70 ed       	ldi	r23, 0xD0	; 208
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a3 01       	movw	r20, r6
    2aba:	98 01       	movw	r18, r16
    2abc:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2ac0:	69 01       	movw	r12, r18
    2ac2:	7a 01       	movw	r14, r20
    2ac4:	b1 e0       	ldi	r27, 0x01	; 1
    2ac6:	cb 1a       	sub	r12, r27
    2ac8:	d1 08       	sbc	r13, r1
    2aca:	e1 08       	sbc	r14, r1
    2acc:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2ace:	2d 81       	ldd	r18, Y+5	; 0x05
    2ad0:	22 30       	cpi	r18, 0x02	; 2
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <tone(unsigned char, unsigned int, unsigned long)+0xec>
    2ad4:	93 c2       	rjmp	.+1318   	; 0x2ffc <tone(unsigned char, unsigned int, unsigned long)+0x612>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304 (discriminator 1)
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	c8 16       	cp	r12, r24
    2ada:	d1 04       	cpc	r13, r1
    2adc:	e1 04       	cpc	r14, r1
    2ade:	f1 04       	cpc	r15, r1
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <tone(unsigned char, unsigned int, unsigned long)+0xfa>
    2ae2:	0c f4       	brge	.+2      	; 0x2ae6 <tone(unsigned char, unsigned int, unsigned long)+0xfc>
    2ae4:	d6 c2       	rjmp	.+1452   	; 0x3092 <tone(unsigned char, unsigned int, unsigned long)+0x6a8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:306
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2ae6:	64 e2       	ldi	r22, 0x24	; 36
    2ae8:	74 ef       	ldi	r23, 0xF4	; 244
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a3 01       	movw	r20, r6
    2af0:	98 01       	movw	r18, r16
    2af2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2af6:	69 01       	movw	r12, r18
    2af8:	7a 01       	movw	r14, r20
    2afa:	91 e0       	ldi	r25, 0x01	; 1
    2afc:	c9 1a       	sub	r12, r25
    2afe:	d1 08       	sbc	r13, r1
    2b00:	e1 08       	sbc	r14, r1
    2b02:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:307
          prescalarbits = 0b011;
    2b04:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        }

        if (ocr > 255)
    2b06:	af ef       	ldi	r26, 0xFF	; 255
    2b08:	ca 16       	cp	r12, r26
    2b0a:	d1 04       	cpc	r13, r1
    2b0c:	e1 04       	cpc	r14, r1
    2b0e:	f1 04       	cpc	r15, r1
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <tone(unsigned char, unsigned int, unsigned long)+0x12a>
    2b12:	08 f4       	brcc	.+2      	; 0x2b16 <tone(unsigned char, unsigned int, unsigned long)+0x12c>
    2b14:	57 c0       	rjmp	.+174    	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2b16:	62 e1       	ldi	r22, 0x12	; 18
    2b18:	7a e7       	ldi	r23, 0x7A	; 122
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a3 01       	movw	r20, r6
    2b20:	98 01       	movw	r18, r16
    2b22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2b26:	69 01       	movw	r12, r18
    2b28:	7a 01       	movw	r14, r20
    2b2a:	b1 e0       	ldi	r27, 0x01	; 1
    2b2c:	cb 1a       	sub	r12, r27
    2b2e:	d1 08       	sbc	r13, r1
    2b30:	e1 08       	sbc	r14, r1
    2b32:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:313
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b011 : 0b100;
    2b34:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:315

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2b36:	2f ef       	ldi	r18, 0xFF	; 255
    2b38:	c2 16       	cp	r12, r18
    2b3a:	d1 04       	cpc	r13, r1
    2b3c:	e1 04       	cpc	r14, r1
    2b3e:	f1 04       	cpc	r15, r1
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <tone(unsigned char, unsigned int, unsigned long)+0x15a>
    2b42:	08 f4       	brcc	.+2      	; 0x2b46 <tone(unsigned char, unsigned int, unsigned long)+0x15c>
    2b44:	3f c0       	rjmp	.+126    	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:317
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    2b46:	69 e0       	ldi	r22, 0x09	; 9
    2b48:	7d e3       	ldi	r23, 0x3D	; 61
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a3 01       	movw	r20, r6
    2b50:	98 01       	movw	r18, r16
    2b52:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2b56:	69 01       	movw	r12, r18
    2b58:	7a 01       	movw	r14, r20
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	c8 1a       	sub	r12, r24
    2b5e:	d1 08       	sbc	r13, r1
    2b60:	e1 08       	sbc	r14, r1
    2b62:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:318
            prescalarbits = 0b101;
    2b64:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          }

          if (ocr > 255)
    2b66:	9f ef       	ldi	r25, 0xFF	; 255
    2b68:	c9 16       	cp	r12, r25
    2b6a:	d1 04       	cpc	r13, r1
    2b6c:	e1 04       	cpc	r14, r1
    2b6e:	f1 04       	cpc	r15, r1
    2b70:	49 f1       	breq	.+82     	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
    2b72:	40 f1       	brcs	.+80     	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	ab 81       	ldd	r26, Y+3	; 0x03
    2b7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b7c:	c9 2e       	mov	r12, r25
    2b7e:	da 2e       	mov	r13, r26
    2b80:	eb 2e       	mov	r14, r27
    2b82:	ff 24       	eor	r15, r15
    2b84:	e7 fc       	sbrc	r14, 7
    2b86:	fa 94       	dec	r15
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	c9 1a       	sub	r12, r25
    2b8c:	d1 08       	sbc	r13, r1
    2b8e:	e1 08       	sbc	r14, r1
    2b90:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:324
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
    2b92:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            if (ocr > 255)
    2b94:	af ef       	ldi	r26, 0xFF	; 255
    2b96:	ca 16       	cp	r12, r26
    2b98:	d1 04       	cpc	r13, r1
    2b9a:	e1 04       	cpc	r14, r1
    2b9c:	f1 04       	cpc	r15, r1
    2b9e:	91 f0       	breq	.+36     	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
    2ba0:	88 f0       	brcs	.+34     	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2ba2:	c9 80       	ldd	r12, Y+1	; 0x01
    2ba4:	da 80       	ldd	r13, Y+2	; 0x02
    2ba6:	eb 80       	ldd	r14, Y+3	; 0x03
    2ba8:	fc 80       	ldd	r15, Y+4	; 0x04
    2baa:	8a e0       	ldi	r24, 0x0A	; 10
    2bac:	f5 94       	asr	r15
    2bae:	e7 94       	ror	r14
    2bb0:	d7 94       	ror	r13
    2bb2:	c7 94       	ror	r12
    2bb4:	8a 95       	dec	r24
    2bb6:	d1 f7       	brne	.-12     	; 0x2bac <tone(unsigned char, unsigned int, unsigned long)+0x1c2>
    2bb8:	21 e0       	ldi	r18, 0x01	; 1
    2bba:	c2 1a       	sub	r12, r18
    2bbc:	d1 08       	sbc	r13, r1
    2bbe:	e1 08       	sbc	r14, r1
    2bc0:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    2bc2:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:344
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    2bc4:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2bc8:	98 7f       	andi	r25, 0xF8	; 248
    2bca:	89 2b       	or	r24, r25
    2bcc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2bd0:	2f ef       	ldi	r18, 0xFF	; 255
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2bd6:	81 14       	cp	r8, r1
    2bd8:	91 04       	cpc	r9, r1
    2bda:	a1 04       	cpc	r10, r1
    2bdc:	b1 04       	cpc	r11, r1
    2bde:	09 f0       	breq	.+2      	; 0x2be2 <tone(unsigned char, unsigned int, unsigned long)+0x1f8>
    2be0:	1f c1       	rjmp	.+574    	; 0x2e20 <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2be2:	bd 81       	ldd	r27, Y+5	; 0x05
    2be4:	b2 30       	cpi	r27, 0x02	; 2
    2be6:	09 f4       	brne	.+2      	; 0x2bea <tone(unsigned char, unsigned int, unsigned long)+0x200>
    2be8:	f9 c1       	rjmp	.+1010   	; 0x2fdc <tone(unsigned char, unsigned int, unsigned long)+0x5f2>
    2bea:	0c f0       	brlt	.+2      	; 0x2bee <tone(unsigned char, unsigned int, unsigned long)+0x204>
    2bec:	e0 c1       	rjmp	.+960    	; 0x2fae <tone(unsigned char, unsigned int, unsigned long)+0x5c4>
    2bee:	bb 23       	and	r27, r27
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <tone(unsigned char, unsigned int, unsigned long)+0x20a>
    2bf2:	e5 c1       	rjmp	.+970    	; 0x2fbe <tone(unsigned char, unsigned int, unsigned long)+0x5d4>
    2bf4:	b1 30       	cpi	r27, 0x01	; 1
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <tone(unsigned char, unsigned int, unsigned long)+0x210>
    2bf8:	4a c1       	rjmp	.+660    	; 0x2e8e <tone(unsigned char, unsigned int, unsigned long)+0x4a4>
    2bfa:	16 cf       	rjmp	.-468    	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:179
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    2bfc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <tone_pins>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:180
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2c00:	e8 ef       	ldi	r30, 0xF8	; 248
    2c02:	f1 e0       	ldi	r31, 0x01	; 1
    2c04:	94 91       	lpm	r25, Z
    2c06:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:185
      break;
    }
  }

  if (_timer != -1)
    2c08:	9f 3f       	cpi	r25, 0xFF	; 255
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <tone(unsigned char, unsigned int, unsigned long)+0x224>
    2c0c:	0d cf       	rjmp	.-486    	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    2c0e:	92 30       	cpi	r25, 0x02	; 2
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <tone(unsigned char, unsigned int, unsigned long)+0x22a>
    2c12:	81 c0       	rjmp	.+258    	; 0x2d16 <tone(unsigned char, unsigned int, unsigned long)+0x32c>
    2c14:	60 f4       	brcc	.+24     	; 0x2c2e <tone(unsigned char, unsigned int, unsigned long)+0x244>
    2c16:	99 23       	and	r25, r25
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <tone(unsigned char, unsigned int, unsigned long)+0x232>
    2c1a:	37 c0       	rjmp	.+110    	; 0x2c8a <tone(unsigned char, unsigned int, unsigned long)+0x2a0>
    2c1c:	91 30       	cpi	r25, 0x01	; 1
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <tone(unsigned char, unsigned int, unsigned long)+0x238>
    2c20:	54 c0       	rjmp	.+168    	; 0x2cca <tone(unsigned char, unsigned int, unsigned long)+0x2e0>
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    2c22:	97 fd       	sbrc	r25, 7
    2c24:	01 cf       	rjmp	.-510    	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	0e 94 66 1c 	call	0x38cc	; 0x38cc <pinMode>
    2c2c:	1f cf       	rjmp	.-450    	; 0x2a6c <tone(unsigned char, unsigned int, unsigned long)+0x82>
toneBegin():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    2c2e:	ad 81       	ldd	r26, Y+5	; 0x05
    2c30:	a4 30       	cpi	r26, 0x04	; 4
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <tone(unsigned char, unsigned int, unsigned long)+0x24c>
    2c34:	be c0       	rjmp	.+380    	; 0x2db2 <tone(unsigned char, unsigned int, unsigned long)+0x3c8>
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <tone(unsigned char, unsigned int, unsigned long)+0x250>
    2c38:	94 c0       	rjmp	.+296    	; 0x2d62 <tone(unsigned char, unsigned int, unsigned long)+0x378>
    2c3a:	a5 30       	cpi	r26, 0x05	; 5
    2c3c:	91 f7       	brne	.-28     	; 0x2c22 <tone(unsigned char, unsigned int, unsigned long)+0x238>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:262
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    2c3e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:263
        TCCR5B = 0;
    2c42:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:264
        bitWrite(TCCR5B, WGM52, 1);
    2c46:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2c4a:	98 60       	ori	r25, 0x08	; 8
    2c4c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:265
        bitWrite(TCCR5B, CS50, 1);
    2c50:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2c54:	91 60       	ori	r25, 0x01	; 1
    2c56:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:266
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2c5a:	28 2f       	mov	r18, r24
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	f9 01       	movw	r30, r18
    2c60:	eb 55       	subi	r30, 0x5B	; 91
    2c62:	fd 4f       	sbci	r31, 0xFD	; 253
    2c64:	e4 91       	lpm	r30, Z
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	ee 0f       	add	r30, r30
    2c6a:	ff 1f       	adc	r31, r31
    2c6c:	eb 5e       	subi	r30, 0xEB	; 235
    2c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c70:	45 91       	lpm	r20, Z+
    2c72:	54 91       	lpm	r21, Z
    2c74:	50 93 3c 05 	sts	0x053C, r21	; 0x80053c <timer5_pin_port+0x1>
    2c78:	40 93 3b 05 	sts	0x053B, r20	; 0x80053b <timer5_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:267
        timer5_pin_mask = digitalPinToBitMask(_pin);
    2c7c:	f9 01       	movw	r30, r18
    2c7e:	e1 5b       	subi	r30, 0xB1	; 177
    2c80:	fd 4f       	sbci	r31, 0xFD	; 253
    2c82:	e4 91       	lpm	r30, Z
    2c84:	e0 93 3a 05 	sts	0x053A, r30	; 0x80053a <timer5_pin_mask>
    2c88:	eb ce       	rjmp	.-554    	; 0x2a60 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:196
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    2c8a:	14 bc       	out	0x24, r1	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:197
        TCCR0B = 0;
    2c8c:	15 bc       	out	0x25, r1	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:198
        bitWrite(TCCR0A, WGM01, 1);
    2c8e:	94 b5       	in	r25, 0x24	; 36
    2c90:	92 60       	ori	r25, 0x02	; 2
    2c92:	94 bd       	out	0x24, r25	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:199
        bitWrite(TCCR0B, CS00, 1);
    2c94:	95 b5       	in	r25, 0x25	; 37
    2c96:	91 60       	ori	r25, 0x01	; 1
    2c98:	95 bd       	out	0x25, r25	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:200
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	eb 55       	subi	r30, 0x5B	; 91
    2ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ca4:	e4 91       	lpm	r30, Z
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	eb 5e       	subi	r30, 0xEB	; 235
    2cae:	fc 4f       	sbci	r31, 0xFC	; 252
    2cb0:	45 91       	lpm	r20, Z+
    2cb2:	54 91       	lpm	r21, Z
    2cb4:	50 93 5f 05 	sts	0x055F, r21	; 0x80055f <timer0_pin_port+0x1>
    2cb8:	40 93 5e 05 	sts	0x055E, r20	; 0x80055e <timer0_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:201
        timer0_pin_mask = digitalPinToBitMask(_pin);
    2cbc:	f9 01       	movw	r30, r18
    2cbe:	e1 5b       	subi	r30, 0xB1	; 177
    2cc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc2:	e4 91       	lpm	r30, Z
    2cc4:	e0 93 5d 05 	sts	0x055D, r30	; 0x80055d <timer0_pin_mask>
    2cc8:	cb ce       	rjmp	.-618    	; 0x2a60 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:208
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    2cca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:209
        TCCR1B = 0;
    2cce:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:210
        bitWrite(TCCR1B, WGM12, 1);
    2cd2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2cd6:	98 60       	ori	r25, 0x08	; 8
    2cd8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:211
        bitWrite(TCCR1B, CS10, 1);
    2cdc:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2ce0:	91 60       	ori	r25, 0x01	; 1
    2ce2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:212
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	f9 01       	movw	r30, r18
    2cec:	eb 55       	subi	r30, 0x5B	; 91
    2cee:	fd 4f       	sbci	r31, 0xFD	; 253
    2cf0:	e4 91       	lpm	r30, Z
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	ee 0f       	add	r30, r30
    2cf6:	ff 1f       	adc	r31, r31
    2cf8:	eb 5e       	subi	r30, 0xEB	; 235
    2cfa:	fc 4f       	sbci	r31, 0xFC	; 252
    2cfc:	45 91       	lpm	r20, Z+
    2cfe:	54 91       	lpm	r21, Z
    2d00:	50 93 58 05 	sts	0x0558, r21	; 0x800558 <timer1_pin_port+0x1>
    2d04:	40 93 57 05 	sts	0x0557, r20	; 0x800557 <timer1_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:213
        timer1_pin_mask = digitalPinToBitMask(_pin);
    2d08:	f9 01       	movw	r30, r18
    2d0a:	e1 5b       	subi	r30, 0xB1	; 177
    2d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d0e:	e4 91       	lpm	r30, Z
    2d10:	e0 93 56 05 	sts	0x0556, r30	; 0x800556 <timer1_pin_mask>
    2d14:	a5 ce       	rjmp	.-694    	; 0x2a60 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:220
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    2d16:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:221
        TCCR2B = 0;
    2d1a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:222
        bitWrite(TCCR2A, WGM21, 1);
    2d1e:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2d22:	92 60       	ori	r25, 0x02	; 2
    2d24:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:223
        bitWrite(TCCR2B, CS20, 1);
    2d28:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2d2c:	91 60       	ori	r25, 0x01	; 1
    2d2e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:224
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	f9 01       	movw	r30, r18
    2d38:	eb 55       	subi	r30, 0x5B	; 91
    2d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3c:	e4 91       	lpm	r30, Z
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	eb 5e       	subi	r30, 0xEB	; 235
    2d46:	fc 4f       	sbci	r31, 0xFC	; 252
    2d48:	45 91       	lpm	r20, Z+
    2d4a:	54 91       	lpm	r21, Z
    2d4c:	50 93 51 05 	sts	0x0551, r21	; 0x800551 <timer2_pin_port+0x1>
    2d50:	40 93 50 05 	sts	0x0550, r20	; 0x800550 <timer2_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:225
        timer2_pin_mask = digitalPinToBitMask(_pin);
    2d54:	f9 01       	movw	r30, r18
    2d56:	e1 5b       	subi	r30, 0xB1	; 177
    2d58:	fd 4f       	sbci	r31, 0xFD	; 253
    2d5a:	e4 91       	lpm	r30, Z
    2d5c:	e0 93 4f 05 	sts	0x054F, r30	; 0x80054f <timer2_pin_mask>
    2d60:	7f ce       	rjmp	.-770    	; 0x2a60 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:232
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    2d62:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:233
        TCCR3B = 0;
    2d66:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:234
        bitWrite(TCCR3B, WGM32, 1);
    2d6a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2d6e:	98 60       	ori	r25, 0x08	; 8
    2d70:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:235
        bitWrite(TCCR3B, CS30, 1);
    2d74:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2d78:	91 60       	ori	r25, 0x01	; 1
    2d7a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:236
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	f9 01       	movw	r30, r18
    2d84:	eb 55       	subi	r30, 0x5B	; 91
    2d86:	fd 4f       	sbci	r31, 0xFD	; 253
    2d88:	e4 91       	lpm	r30, Z
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	ee 0f       	add	r30, r30
    2d8e:	ff 1f       	adc	r31, r31
    2d90:	eb 5e       	subi	r30, 0xEB	; 235
    2d92:	fc 4f       	sbci	r31, 0xFC	; 252
    2d94:	45 91       	lpm	r20, Z+
    2d96:	54 91       	lpm	r21, Z
    2d98:	50 93 4a 05 	sts	0x054A, r21	; 0x80054a <timer3_pin_port+0x1>
    2d9c:	40 93 49 05 	sts	0x0549, r20	; 0x800549 <timer3_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:237
        timer3_pin_mask = digitalPinToBitMask(_pin);
    2da0:	f9 01       	movw	r30, r18
    2da2:	e1 5b       	subi	r30, 0xB1	; 177
    2da4:	fd 4f       	sbci	r31, 0xFD	; 253
    2da6:	e4 91       	lpm	r30, Z
    2da8:	e0 93 48 05 	sts	0x0548, r30	; 0x800548 <timer3_pin_mask>
    2dac:	b3 e0       	ldi	r27, 0x03	; 3
    2dae:	bd 83       	std	Y+5, r27	; 0x05
    2db0:	57 ce       	rjmp	.-850    	; 0x2a60 <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:244
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    2db2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:245
        TCCR4B = 0;
    2db6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:247
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    2dba:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2dbe:	98 60       	ori	r25, 0x08	; 8
    2dc0:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:253
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    2dc4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2dc8:	91 60       	ori	r25, 0x01	; 1
    2dca:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:254
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	f9 01       	movw	r30, r18
    2dd4:	eb 55       	subi	r30, 0x5B	; 91
    2dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2dd8:	e4 91       	lpm	r30, Z
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	ee 0f       	add	r30, r30
    2dde:	ff 1f       	adc	r31, r31
    2de0:	eb 5e       	subi	r30, 0xEB	; 235
    2de2:	fc 4f       	sbci	r31, 0xFC	; 252
    2de4:	45 91       	lpm	r20, Z+
    2de6:	54 91       	lpm	r21, Z
    2de8:	50 93 43 05 	sts	0x0543, r21	; 0x800543 <timer4_pin_port+0x1>
    2dec:	40 93 42 05 	sts	0x0542, r20	; 0x800542 <timer4_pin_port>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:255
        timer4_pin_mask = digitalPinToBitMask(_pin);
    2df0:	f9 01       	movw	r30, r18
    2df2:	e1 5b       	subi	r30, 0xB1	; 177
    2df4:	fd 4f       	sbci	r31, 0xFD	; 253
    2df6:	e4 91       	lpm	r30, Z
    2df8:	e0 93 41 05 	sts	0x0541, r30	; 0x800541 <timer4_pin_mask>
    2dfc:	31 ce       	rjmp	.-926    	; 0x2a60 <tone(unsigned char, unsigned int, unsigned long)+0x76>
_Z4tonehjm():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:298

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:336
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2e00:	bd 81       	ldd	r27, Y+5	; 0x05
    2e02:	b1 11       	cpse	r27, r1
    2e04:	df ce       	rjmp	.-578    	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:338
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
    2e06:	95 b5       	in	r25, 0x25	; 37
    2e08:	98 7f       	andi	r25, 0xF8	; 248
    2e0a:	89 2b       	or	r24, r25
    2e0c:	85 bd       	out	0x25, r24	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2e0e:	2f ef       	ldi	r18, 0xFF	; 255
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2e14:	81 14       	cp	r8, r1
    2e16:	91 04       	cpc	r9, r1
    2e18:	a1 04       	cpc	r10, r1
    2e1a:	b1 04       	cpc	r11, r1
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <tone(unsigned char, unsigned int, unsigned long)+0x436>
    2e1e:	cf c0       	rjmp	.+414    	; 0x2fbe <tone(unsigned char, unsigned int, unsigned long)+0x5d4>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:389
    {
      toggle_count = 2 * frequency * duration / 1000;
    2e20:	d8 01       	movw	r26, r16
    2e22:	aa 0f       	add	r26, r26
    2e24:	bb 1f       	adc	r27, r27
    2e26:	a5 01       	movw	r20, r10
    2e28:	94 01       	movw	r18, r8
    2e2a:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__muluhisi3>
    2e2e:	28 ee       	ldi	r18, 0xE8	; 232
    2e30:	33 e0       	ldi	r19, 0x03	; 3
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__udivmodsi4>
    2e3a:	d3 ce       	rjmp	.-602    	; 0x2be2 <tone(unsigned char, unsigned int, unsigned long)+0x1f8>
    2e3c:	71 2c       	mov	r7, r1
    2e3e:	61 2c       	mov	r6, r1
    2e40:	60 e8       	ldi	r22, 0x80	; 128
    2e42:	74 e8       	ldi	r23, 0x84	; 132
    2e44:	8e e1       	ldi	r24, 0x1E	; 30
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a3 01       	movw	r20, r6
    2e4a:	98 01       	movw	r18, r16
    2e4c:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2e50:	69 01       	movw	r12, r18
    2e52:	7a 01       	movw	r14, r20
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	c8 1a       	sub	r12, r24
    2e58:	d1 08       	sbc	r13, r1
    2e5a:	e1 08       	sbc	r14, r1
    2e5c:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:358
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    2e5e:	c1 14       	cp	r12, r1
    2e60:	d1 04       	cpc	r13, r1
    2e62:	91 e0       	ldi	r25, 0x01	; 1
    2e64:	e9 06       	cpc	r14, r25
    2e66:	f1 04       	cpc	r15, r1
    2e68:	24 f5       	brge	.+72     	; 0x2eb2 <tone(unsigned char, unsigned int, unsigned long)+0x4c8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:357
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:364
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    2e6c:	bd 81       	ldd	r27, Y+5	; 0x05
    2e6e:	b1 30       	cpi	r27, 0x01	; 1
    2e70:	89 f5       	brne	.+98     	; 0x2ed4 <tone(unsigned char, unsigned int, unsigned long)+0x4ea>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:367
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    2e72:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2e76:	88 7f       	andi	r24, 0xF8	; 248
    2e78:	89 2b       	or	r24, r25
    2e7a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2e7e:	2f ef       	ldi	r18, 0xFF	; 255
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2e84:	81 14       	cp	r8, r1
    2e86:	91 04       	cpc	r9, r1
    2e88:	a1 04       	cpc	r10, r1
    2e8a:	b1 04       	cpc	r11, r1
    2e8c:	49 f6       	brne	.-110    	; 0x2e20 <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:412
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    2e8e:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    2e92:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:413
        timer1_toggle_count = toggle_count;
    2e96:	20 93 59 05 	sts	0x0559, r18	; 0x800559 <timer1_toggle_count>
    2e9a:	30 93 5a 05 	sts	0x055A, r19	; 0x80055a <timer1_toggle_count+0x1>
    2e9e:	40 93 5b 05 	sts	0x055B, r20	; 0x80055b <timer1_toggle_count+0x2>
    2ea2:	50 93 5c 05 	sts	0x055C, r21	; 0x80055c <timer1_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:414
        bitWrite(TIMSK1, OCIE1A, 1);
    2ea6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    2eaa:	82 60       	ori	r24, 0x02	; 2
    2eac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:421
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    2eb0:	bb cd       	rjmp	.-1162   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:360
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    2eb2:	62 e1       	ldi	r22, 0x12	; 18
    2eb4:	7a e7       	ldi	r23, 0x7A	; 122
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a3 01       	movw	r20, r6
    2ebc:	98 01       	movw	r18, r16
    2ebe:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    2ec2:	69 01       	movw	r12, r18
    2ec4:	7a 01       	movw	r14, r20
    2ec6:	a1 e0       	ldi	r26, 0x01	; 1
    2ec8:	ca 1a       	sub	r12, r26
    2eca:	d1 08       	sbc	r13, r1
    2ecc:	e1 08       	sbc	r14, r1
    2ece:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:361
        prescalarbits = 0b011;
    2ed0:	93 e0       	ldi	r25, 0x03	; 3
    2ed2:	cc cf       	rjmp	.-104    	; 0x2e6c <tone(unsigned char, unsigned int, unsigned long)+0x482>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:371
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    2ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed6:	23 30       	cpi	r18, 0x03	; 3
    2ed8:	09 f5       	brne	.+66     	; 0x2f1c <tone(unsigned char, unsigned int, unsigned long)+0x532>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:372
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    2eda:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2ede:	88 7f       	andi	r24, 0xF8	; 248
    2ee0:	89 2b       	or	r24, r25
    2ee2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2ee6:	2f ef       	ldi	r18, 0xFF	; 255
    2ee8:	3f ef       	ldi	r19, 0xFF	; 255
    2eea:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2eec:	81 14       	cp	r8, r1
    2eee:	91 04       	cpc	r9, r1
    2ef0:	a1 04       	cpc	r10, r1
    2ef2:	b1 04       	cpc	r11, r1
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <tone(unsigned char, unsigned int, unsigned long)+0x50e>
    2ef6:	94 cf       	rjmp	.-216    	; 0x2e20 <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:433
        break;
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    2ef8:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2efc:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:434
        timer3_toggle_count = toggle_count;
    2f00:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <timer3_toggle_count>
    2f04:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <timer3_toggle_count+0x1>
    2f08:	40 93 4d 05 	sts	0x054D, r20	; 0x80054d <timer3_toggle_count+0x2>
    2f0c:	50 93 4e 05 	sts	0x054E, r21	; 0x80054e <timer3_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:435
        bitWrite(TIMSK3, OCIE3A, 1);
    2f10:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2f14:	82 60       	ori	r24, 0x02	; 2
    2f16:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:436
        break;
    2f1a:	86 cd       	rjmp	.-1268   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:375
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    2f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1e:	84 30       	cpi	r24, 0x04	; 4
    2f20:	09 f5       	brne	.+66     	; 0x2f64 <tone(unsigned char, unsigned int, unsigned long)+0x57a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:376
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
    2f22:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2f26:	88 7f       	andi	r24, 0xF8	; 248
    2f28:	89 2b       	or	r24, r25
    2f2a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2f2e:	2f ef       	ldi	r18, 0xFF	; 255
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2f34:	81 14       	cp	r8, r1
    2f36:	91 04       	cpc	r9, r1
    2f38:	a1 04       	cpc	r10, r1
    2f3a:	b1 04       	cpc	r11, r1
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <tone(unsigned char, unsigned int, unsigned long)+0x556>
    2f3e:	70 cf       	rjmp	.-288    	; 0x2e20 <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:441
        break;
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    2f40:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2f44:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:442
        timer4_toggle_count = toggle_count;
    2f48:	20 93 44 05 	sts	0x0544, r18	; 0x800544 <timer4_toggle_count>
    2f4c:	30 93 45 05 	sts	0x0545, r19	; 0x800545 <timer4_toggle_count+0x1>
    2f50:	40 93 46 05 	sts	0x0546, r20	; 0x800546 <timer4_toggle_count+0x2>
    2f54:	50 93 47 05 	sts	0x0547, r21	; 0x800547 <timer4_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:443
        bitWrite(TIMSK4, OCIE4A, 1);
    2f58:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2f5c:	82 60       	ori	r24, 0x02	; 2
    2f5e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:444
        break;
    2f62:	62 cd       	rjmp	.-1340   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:379
#if defined(TCCR4B)
      else if (_timer == 4)
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    2f64:	ad 81       	ldd	r26, Y+5	; 0x05
    2f66:	a5 30       	cpi	r26, 0x05	; 5
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <tone(unsigned char, unsigned int, unsigned long)+0x582>
    2f6a:	32 ce       	rjmp	.-924    	; 0x2bd0 <tone(unsigned char, unsigned int, unsigned long)+0x1e6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:380
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
    2f6c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2f70:	88 7f       	andi	r24, 0xF8	; 248
    2f72:	89 2b       	or	r24, r25
    2f74:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	a9 01       	movw	r20, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2f7e:	81 14       	cp	r8, r1
    2f80:	91 04       	cpc	r9, r1
    2f82:	a1 04       	cpc	r10, r1
    2f84:	b1 04       	cpc	r11, r1
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <tone(unsigned char, unsigned int, unsigned long)+0x5a0>
    2f88:	4b cf       	rjmp	.-362    	; 0x2e20 <tone(unsigned char, unsigned int, unsigned long)+0x436>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:449
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    2f8a:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2f8e:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:450
        timer5_toggle_count = toggle_count;
    2f92:	20 93 3d 05 	sts	0x053D, r18	; 0x80053d <timer5_toggle_count>
    2f96:	30 93 3e 05 	sts	0x053E, r19	; 0x80053e <timer5_toggle_count+0x1>
    2f9a:	40 93 3f 05 	sts	0x053F, r20	; 0x80053f <timer5_toggle_count+0x2>
    2f9e:	50 93 40 05 	sts	0x0540, r21	; 0x800540 <timer5_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:451
        bitWrite(TIMSK5, OCIE5A, 1);
    2fa2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2fa6:	82 60       	ori	r24, 0x02	; 2
    2fa8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    2fac:	3d cd       	rjmp	.-1414   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	84 30       	cpi	r24, 0x04	; 4
    2fb2:	31 f2       	breq	.-116    	; 0x2f40 <tone(unsigned char, unsigned int, unsigned long)+0x556>
    2fb4:	0c f4       	brge	.+2      	; 0x2fb8 <tone(unsigned char, unsigned int, unsigned long)+0x5ce>
    2fb6:	a0 cf       	rjmp	.-192    	; 0x2ef8 <tone(unsigned char, unsigned int, unsigned long)+0x50e>
    2fb8:	85 30       	cpi	r24, 0x05	; 5
    2fba:	39 f3       	breq	.-50     	; 0x2f8a <tone(unsigned char, unsigned int, unsigned long)+0x5a0>
    2fbc:	35 cd       	rjmp	.-1430   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:404
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    2fbe:	c7 bc       	out	0x27, r12	; 39
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:405
        timer0_toggle_count = toggle_count;
    2fc0:	20 93 60 05 	sts	0x0560, r18	; 0x800560 <timer0_toggle_count>
    2fc4:	30 93 61 05 	sts	0x0561, r19	; 0x800561 <timer0_toggle_count+0x1>
    2fc8:	40 93 62 05 	sts	0x0562, r20	; 0x800562 <timer0_toggle_count+0x2>
    2fcc:	50 93 63 05 	sts	0x0563, r21	; 0x800563 <timer0_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:406
        bitWrite(TIMSK0, OCIE0A, 1);
    2fd0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    2fd4:	82 60       	ori	r24, 0x02	; 2
    2fd6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:407
        break;
    2fda:	26 cd       	rjmp	.-1460   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:425
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    2fdc:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:426
        timer2_toggle_count = toggle_count;
    2fe0:	20 93 52 05 	sts	0x0552, r18	; 0x800552 <timer2_toggle_count>
    2fe4:	30 93 53 05 	sts	0x0553, r19	; 0x800553 <timer2_toggle_count+0x1>
    2fe8:	40 93 54 05 	sts	0x0554, r20	; 0x800554 <timer2_toggle_count+0x2>
    2fec:	50 93 55 05 	sts	0x0555, r21	; 0x800555 <timer2_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:427
        bitWrite(TIMSK2, OCIE2A, 1);
    2ff0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2ff4:	82 60       	ori	r24, 0x02	; 2
    2ff6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:428
        break;
    2ffa:	16 cd       	rjmp	.-1492   	; 0x2a28 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2ffe:	bf ef       	ldi	r27, 0xFF	; 255
    3000:	cb 16       	cp	r12, r27
    3002:	d1 04       	cpc	r13, r1
    3004:	e1 04       	cpc	r14, r1
    3006:	f1 04       	cpc	r15, r1
    3008:	09 f0       	breq	.+2      	; 0x300c <tone(unsigned char, unsigned int, unsigned long)+0x622>
    300a:	0c f4       	brge	.+2      	; 0x300e <tone(unsigned char, unsigned int, unsigned long)+0x624>
    300c:	f9 ce       	rjmp	.-526    	; 0x2e00 <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    300e:	62 e1       	ldi	r22, 0x12	; 18
    3010:	7a e7       	ldi	r23, 0x7A	; 122
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	a3 01       	movw	r20, r6
    3018:	92 01       	movw	r18, r4
    301a:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__divmodsi4>
    301e:	69 01       	movw	r12, r18
    3020:	7a 01       	movw	r14, r20
    3022:	91 e0       	ldi	r25, 0x01	; 1
    3024:	c9 1a       	sub	r12, r25
    3026:	d1 08       	sbc	r13, r1
    3028:	e1 08       	sbc	r14, r1
    302a:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    302c:	83 e0       	ldi	r24, 0x03	; 3
    302e:	af ef       	ldi	r26, 0xFF	; 255
    3030:	ca 16       	cp	r12, r26
    3032:	d1 04       	cpc	r13, r1
    3034:	e1 04       	cpc	r14, r1
    3036:	f1 04       	cpc	r15, r1
    3038:	09 f0       	breq	.+2      	; 0x303c <tone(unsigned char, unsigned int, unsigned long)+0x652>
    303a:	08 f4       	brcc	.+2      	; 0x303e <tone(unsigned char, unsigned int, unsigned long)+0x654>
    303c:	e1 ce       	rjmp	.-574    	; 0x2e00 <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	9a 81       	ldd	r25, Y+2	; 0x02
    3042:	ab 81       	ldd	r26, Y+3	; 0x03
    3044:	bc 81       	ldd	r27, Y+4	; 0x04
    3046:	c9 2e       	mov	r12, r25
    3048:	da 2e       	mov	r13, r26
    304a:	eb 2e       	mov	r14, r27
    304c:	ff 24       	eor	r15, r15
    304e:	e7 fc       	sbrc	r14, 7
    3050:	fa 94       	dec	r15
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	c9 1a       	sub	r12, r25
    3056:	d1 08       	sbc	r13, r1
    3058:	e1 08       	sbc	r14, r1
    305a:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    305c:	84 e0       	ldi	r24, 0x04	; 4
    305e:	af ef       	ldi	r26, 0xFF	; 255
    3060:	ca 16       	cp	r12, r26
    3062:	d1 04       	cpc	r13, r1
    3064:	e1 04       	cpc	r14, r1
    3066:	f1 04       	cpc	r15, r1
    3068:	09 f0       	breq	.+2      	; 0x306c <tone(unsigned char, unsigned int, unsigned long)+0x682>
    306a:	08 f4       	brcc	.+2      	; 0x306e <tone(unsigned char, unsigned int, unsigned long)+0x684>
    306c:	c9 ce       	rjmp	.-622    	; 0x2e00 <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    306e:	c9 80       	ldd	r12, Y+1	; 0x01
    3070:	da 80       	ldd	r13, Y+2	; 0x02
    3072:	eb 80       	ldd	r14, Y+3	; 0x03
    3074:	fc 80       	ldd	r15, Y+4	; 0x04
    3076:	9a e0       	ldi	r25, 0x0A	; 10
    3078:	f5 94       	asr	r15
    307a:	e7 94       	ror	r14
    307c:	d7 94       	ror	r13
    307e:	c7 94       	ror	r12
    3080:	9a 95       	dec	r25
    3082:	d1 f7       	brne	.-12     	; 0x3078 <tone(unsigned char, unsigned int, unsigned long)+0x68e>
    3084:	b1 e0       	ldi	r27, 0x01	; 1
    3086:	cb 1a       	sub	r12, r27
    3088:	d1 08       	sbc	r13, r1
    308a:	e1 08       	sbc	r14, r1
    308c:	f1 08       	sbc	r15, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    308e:	85 e0       	ldi	r24, 0x05	; 5
    3090:	b7 ce       	rjmp	.-658    	; 0x2e00 <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    3092:	82 e0       	ldi	r24, 0x02	; 2
    3094:	97 cd       	rjmp	.-1234   	; 0x2bc4 <tone(unsigned char, unsigned int, unsigned long)+0x1da>

00003096 <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    3096:	82 30       	cpi	r24, 0x02	; 2
    3098:	a9 f0       	breq	.+42     	; 0x30c4 <disableTimer(unsigned char)+0x2e>
    309a:	28 f4       	brcc	.+10     	; 0x30a6 <disableTimer(unsigned char)+0x10>
    309c:	88 23       	and	r24, r24
    309e:	49 f0       	breq	.+18     	; 0x30b2 <disableTimer(unsigned char)+0x1c>
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	51 f0       	breq	.+20     	; 0x30b8 <disableTimer(unsigned char)+0x22>
    30a4:	08 95       	ret
    30a6:	84 30       	cpi	r24, 0x04	; 4
    30a8:	21 f1       	breq	.+72     	; 0x30f2 <disableTimer(unsigned char)+0x5c>
    30aa:	e8 f0       	brcs	.+58     	; 0x30e6 <disableTimer(unsigned char)+0x50>
    30ac:	85 30       	cpi	r24, 0x05	; 5
    30ae:	39 f1       	breq	.+78     	; 0x30fe <disableTimer(unsigned char)+0x68>
    30b0:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:469
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    30b2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:473
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    30b6:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:477

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    30b8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    30bc:	8d 7f       	andi	r24, 0xFD	; 253
    30be:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:478
      break;
    30c2:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:483
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    30c4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    30c8:	8d 7f       	andi	r24, 0xFD	; 253
    30ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    30d4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    30d8:	88 7f       	andi	r24, 0xF8	; 248
    30da:	84 60       	ori	r24, 0x04	; 4
    30dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    30e0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    30e4:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:498
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    30e6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    30ea:	8d 7f       	andi	r24, 0xFD	; 253
    30ec:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:499
      break;
    30f0:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:504
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    30f2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    30f6:	8d 7f       	andi	r24, 0xFD	; 253
    30f8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:505
      break;
    30fc:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:510
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    30fe:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3102:	8d 7f       	andi	r24, 0xFD	; 253
    3104:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:514
      break;
#endif
  }
}
    3108:	08 95       	ret

0000310a <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:518


void noTone(uint8_t _pin)
{
    310a:	cf 93       	push	r28
    310c:	c8 2f       	mov	r28, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:522
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    310e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tone_pins>
    3112:	c8 13       	cpse	r28, r24
    3114:	0d c0       	rjmp	.+26     	; 0x3130 <noTone(unsigned char)+0x26>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    3116:	e8 ef       	ldi	r30, 0xF8	; 248
    3118:	f1 e0       	ldi	r31, 0x01	; 1
    311a:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
    311c:	9f ef       	ldi	r25, 0xFF	; 255
    311e:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <tone_pins>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:529
      break;
    }
  }

  disableTimer(_timer);
    3122:	0e 94 4b 18 	call	0x3096	; 0x3096 <disableTimer(unsigned char)>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531

  digitalWrite(_pin, 0);
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	8c 2f       	mov	r24, r28
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:532
}
    312a:	cf 91       	pop	r28
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
    312c:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <digitalWrite>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:519
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    3130:	8f ef       	ldi	r24, 0xFF	; 255
    3132:	f7 cf       	rjmp	.-18     	; 0x3122 <noTone(unsigned char)+0x18>

00003134 <__vector_13>:
__vector_13():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    3134:	1f 92       	push	r1
    3136:	0f 92       	push	r0
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	0f 92       	push	r0
    313c:	11 24       	eor	r1, r1
    313e:	0b b6       	in	r0, 0x3b	; 59
    3140:	0f 92       	push	r0
    3142:	2f 93       	push	r18
    3144:	3f 93       	push	r19
    3146:	4f 93       	push	r20
    3148:	5f 93       	push	r21
    314a:	6f 93       	push	r22
    314c:	7f 93       	push	r23
    314e:	8f 93       	push	r24
    3150:	9f 93       	push	r25
    3152:	af 93       	push	r26
    3154:	bf 93       	push	r27
    3156:	ef 93       	push	r30
    3158:	ff 93       	push	r31
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    315a:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <timer2_toggle_count>
    315e:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <timer2_toggle_count+0x1>
    3162:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <timer2_toggle_count+0x2>
    3166:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <timer2_toggle_count+0x3>
    316a:	89 2b       	or	r24, r25
    316c:	8a 2b       	or	r24, r26
    316e:	8b 2b       	or	r24, r27
    3170:	e1 f1       	breq	.+120    	; 0x31ea <__vector_13+0xb6>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    3172:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <timer2_pin_mask>
    3176:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <timer2_pin_port>
    317a:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <timer2_pin_port+0x1>
    317e:	80 81       	ld	r24, Z
    3180:	89 27       	eor	r24, r25
    3182:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    3184:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <timer2_toggle_count>
    3188:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <timer2_toggle_count+0x1>
    318c:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <timer2_toggle_count+0x2>
    3190:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <timer2_toggle_count+0x3>
    3194:	18 16       	cp	r1, r24
    3196:	19 06       	cpc	r1, r25
    3198:	1a 06       	cpc	r1, r26
    319a:	1b 06       	cpc	r1, r27
    319c:	9c f4       	brge	.+38     	; 0x31c4 <__vector_13+0x90>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    319e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <timer2_toggle_count>
    31a2:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <timer2_toggle_count+0x1>
    31a6:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <timer2_toggle_count+0x2>
    31aa:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <timer2_toggle_count+0x3>
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	a1 09       	sbc	r26, r1
    31b2:	b1 09       	sbc	r27, r1
    31b4:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <timer2_toggle_count>
    31b8:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <timer2_toggle_count+0x1>
    31bc:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <timer2_toggle_count+0x2>
    31c0:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <timer2_toggle_count+0x3>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    31c4:	ff 91       	pop	r31
    31c6:	ef 91       	pop	r30
    31c8:	bf 91       	pop	r27
    31ca:	af 91       	pop	r26
    31cc:	9f 91       	pop	r25
    31ce:	8f 91       	pop	r24
    31d0:	7f 91       	pop	r23
    31d2:	6f 91       	pop	r22
    31d4:	5f 91       	pop	r21
    31d6:	4f 91       	pop	r20
    31d8:	3f 91       	pop	r19
    31da:	2f 91       	pop	r18
    31dc:	0f 90       	pop	r0
    31de:	0b be       	out	0x3b, r0	; 59
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	0f 90       	pop	r0
    31e6:	1f 90       	pop	r1
    31e8:	18 95       	reti
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    31ea:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tone_pins>
    31ee:	0e 94 85 18 	call	0x310a	; 0x310a <noTone(unsigned char)>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    31f2:	e8 cf       	rjmp	.-48     	; 0x31c4 <__vector_13+0x90>

000031f4 <nothing>:
nothing():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:323
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
          break;
    31f4:	08 95       	ret

000031f6 <attachInterrupt>:
attachInterrupt():
    31f6:	88 30       	cpi	r24, 0x08	; 8
    31f8:	08 f0       	brcs	.+2      	; 0x31fc <attachInterrupt+0x6>
    31fa:	76 c0       	rjmp	.+236    	; 0x32e8 <attachInterrupt+0xf2>
    31fc:	e8 2f       	mov	r30, r24
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	eb 5f       	subi	r30, 0xFB	; 251
    3206:	fd 4f       	sbci	r31, 0xFD	; 253
    3208:	71 83       	std	Z+1, r23	; 0x01
    320a:	60 83       	st	Z, r22
    320c:	81 50       	subi	r24, 0x01	; 1
    320e:	87 30       	cpi	r24, 0x07	; 7
    3210:	08 f0       	brcs	.+2      	; 0x3214 <attachInterrupt+0x1e>
    3212:	3d c0       	rjmp	.+122    	; 0x328e <attachInterrupt+0x98>
    3214:	e8 2f       	mov	r30, r24
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	88 27       	eor	r24, r24
    321a:	ee 5e       	subi	r30, 0xEE	; 238
    321c:	f6 4e       	sbci	r31, 0xE6	; 230
    321e:	8f 4f       	sbci	r24, 0xFF	; 255
    3220:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__tablejump2__>
    3224:	4f 19       	sub	r20, r15
    3226:	19 19       	sub	r17, r9
    3228:	21 19       	sub	r18, r1
    322a:	2d 19       	sub	r18, r13
    322c:	3a 19       	sub	r19, r10
    322e:	5b 19       	sub	r21, r11
    3230:	68 19       	sub	r22, r8
    3232:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    3236:	8c 7f       	andi	r24, 0xFC	; 252
    3238:	48 2b       	or	r20, r24
    323a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    323e:	e8 9a       	sbi	0x1d, 0	; 29
    3240:	08 95       	ret
    3242:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    3246:	83 7f       	andi	r24, 0xF3	; 243
    3248:	44 0f       	add	r20, r20
    324a:	55 1f       	adc	r21, r21
    324c:	44 0f       	add	r20, r20
    324e:	55 1f       	adc	r21, r21
    3250:	48 2b       	or	r20, r24
    3252:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    3256:	e9 9a       	sbi	0x1d, 1	; 29
    3258:	08 95       	ret
    325a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    325e:	8f 7c       	andi	r24, 0xCF	; 207
    3260:	74 e0       	ldi	r23, 0x04	; 4
    3262:	44 0f       	add	r20, r20
    3264:	55 1f       	adc	r21, r21
    3266:	7a 95       	dec	r23
    3268:	e1 f7       	brne	.-8      	; 0x3262 <attachInterrupt+0x6c>
    326a:	48 2b       	or	r20, r24
    326c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    3270:	ea 9a       	sbi	0x1d, 2	; 29
    3272:	08 95       	ret
    3274:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    3278:	8f 73       	andi	r24, 0x3F	; 63
    327a:	66 e0       	ldi	r22, 0x06	; 6
    327c:	44 0f       	add	r20, r20
    327e:	55 1f       	adc	r21, r21
    3280:	6a 95       	dec	r22
    3282:	e1 f7       	brne	.-8      	; 0x327c <attachInterrupt+0x86>
    3284:	48 2b       	or	r20, r24
    3286:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
    328a:	eb 9a       	sbi	0x1d, 3	; 29
    328c:	08 95       	ret
    328e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    3292:	8c 7f       	andi	r24, 0xFC	; 252
    3294:	48 2b       	or	r20, r24
    3296:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    329a:	ec 9a       	sbi	0x1d, 4	; 29
    329c:	08 95       	ret
    329e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    32a2:	83 7f       	andi	r24, 0xF3	; 243
    32a4:	44 0f       	add	r20, r20
    32a6:	55 1f       	adc	r21, r21
    32a8:	44 0f       	add	r20, r20
    32aa:	55 1f       	adc	r21, r21
    32ac:	48 2b       	or	r20, r24
    32ae:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    32b2:	ed 9a       	sbi	0x1d, 5	; 29
    32b4:	08 95       	ret
    32b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    32ba:	8f 7c       	andi	r24, 0xCF	; 207
    32bc:	24 e0       	ldi	r18, 0x04	; 4
    32be:	44 0f       	add	r20, r20
    32c0:	55 1f       	adc	r21, r21
    32c2:	2a 95       	dec	r18
    32c4:	e1 f7       	brne	.-8      	; 0x32be <attachInterrupt+0xc8>
    32c6:	48 2b       	or	r20, r24
    32c8:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    32cc:	ee 9a       	sbi	0x1d, 6	; 29
    32ce:	08 95       	ret
    32d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    32d4:	8f 73       	andi	r24, 0x3F	; 63
    32d6:	96 e0       	ldi	r25, 0x06	; 6
    32d8:	44 0f       	add	r20, r20
    32da:	55 1f       	adc	r21, r21
    32dc:	9a 95       	dec	r25
    32de:	e1 f7       	brne	.-8      	; 0x32d8 <attachInterrupt+0xe2>
    32e0:	48 2b       	or	r20, r24
    32e2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
    32e6:	ef 9a       	sbi	0x1d, 7	; 29
    32e8:	08 95       	ret

000032ea <__vector_1>:
__vector_1():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:438
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

// ATmega640, ATmega1280, ATmega2560 - Arduino MEGA compatible pinout
#elif defined(MEGACORE_100_PIN_MEGA_PINOUT) && (defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__))
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
    32ea:	1f 92       	push	r1
    32ec:	0f 92       	push	r0
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	0f 92       	push	r0
    32f2:	11 24       	eor	r1, r1
    32f4:	0b b6       	in	r0, 0x3b	; 59
    32f6:	0f 92       	push	r0
    32f8:	2f 93       	push	r18
    32fa:	3f 93       	push	r19
    32fc:	4f 93       	push	r20
    32fe:	5f 93       	push	r21
    3300:	6f 93       	push	r22
    3302:	7f 93       	push	r23
    3304:	8f 93       	push	r24
    3306:	9f 93       	push	r25
    3308:	af 93       	push	r26
    330a:	bf 93       	push	r27
    330c:	ef 93       	push	r30
    330e:	ff 93       	push	r31
    3310:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <intFunc+0x4>
    3314:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <intFunc+0x5>
    3318:	19 95       	eicall
    331a:	ff 91       	pop	r31
    331c:	ef 91       	pop	r30
    331e:	bf 91       	pop	r27
    3320:	af 91       	pop	r26
    3322:	9f 91       	pop	r25
    3324:	8f 91       	pop	r24
    3326:	7f 91       	pop	r23
    3328:	6f 91       	pop	r22
    332a:	5f 91       	pop	r21
    332c:	4f 91       	pop	r20
    332e:	3f 91       	pop	r19
    3330:	2f 91       	pop	r18
    3332:	0f 90       	pop	r0
    3334:	0b be       	out	0x3b, r0	; 59
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	0f 90       	pop	r0
    333c:	1f 90       	pop	r1
    333e:	18 95       	reti

00003340 <__vector_2>:
__vector_2():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:439
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
    3340:	1f 92       	push	r1
    3342:	0f 92       	push	r0
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	0f 92       	push	r0
    3348:	11 24       	eor	r1, r1
    334a:	0b b6       	in	r0, 0x3b	; 59
    334c:	0f 92       	push	r0
    334e:	2f 93       	push	r18
    3350:	3f 93       	push	r19
    3352:	4f 93       	push	r20
    3354:	5f 93       	push	r21
    3356:	6f 93       	push	r22
    3358:	7f 93       	push	r23
    335a:	8f 93       	push	r24
    335c:	9f 93       	push	r25
    335e:	af 93       	push	r26
    3360:	bf 93       	push	r27
    3362:	ef 93       	push	r30
    3364:	ff 93       	push	r31
    3366:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <intFunc+0x6>
    336a:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <intFunc+0x7>
    336e:	19 95       	eicall
    3370:	ff 91       	pop	r31
    3372:	ef 91       	pop	r30
    3374:	bf 91       	pop	r27
    3376:	af 91       	pop	r26
    3378:	9f 91       	pop	r25
    337a:	8f 91       	pop	r24
    337c:	7f 91       	pop	r23
    337e:	6f 91       	pop	r22
    3380:	5f 91       	pop	r21
    3382:	4f 91       	pop	r20
    3384:	3f 91       	pop	r19
    3386:	2f 91       	pop	r18
    3388:	0f 90       	pop	r0
    338a:	0b be       	out	0x3b, r0	; 59
    338c:	0f 90       	pop	r0
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	0f 90       	pop	r0
    3392:	1f 90       	pop	r1
    3394:	18 95       	reti

00003396 <__vector_3>:
__vector_3():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:440
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
    3396:	1f 92       	push	r1
    3398:	0f 92       	push	r0
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	0f 92       	push	r0
    339e:	11 24       	eor	r1, r1
    33a0:	0b b6       	in	r0, 0x3b	; 59
    33a2:	0f 92       	push	r0
    33a4:	2f 93       	push	r18
    33a6:	3f 93       	push	r19
    33a8:	4f 93       	push	r20
    33aa:	5f 93       	push	r21
    33ac:	6f 93       	push	r22
    33ae:	7f 93       	push	r23
    33b0:	8f 93       	push	r24
    33b2:	9f 93       	push	r25
    33b4:	af 93       	push	r26
    33b6:	bf 93       	push	r27
    33b8:	ef 93       	push	r30
    33ba:	ff 93       	push	r31
    33bc:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <intFunc+0x8>
    33c0:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <intFunc+0x9>
    33c4:	19 95       	eicall
    33c6:	ff 91       	pop	r31
    33c8:	ef 91       	pop	r30
    33ca:	bf 91       	pop	r27
    33cc:	af 91       	pop	r26
    33ce:	9f 91       	pop	r25
    33d0:	8f 91       	pop	r24
    33d2:	7f 91       	pop	r23
    33d4:	6f 91       	pop	r22
    33d6:	5f 91       	pop	r21
    33d8:	4f 91       	pop	r20
    33da:	3f 91       	pop	r19
    33dc:	2f 91       	pop	r18
    33de:	0f 90       	pop	r0
    33e0:	0b be       	out	0x3b, r0	; 59
    33e2:	0f 90       	pop	r0
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	0f 90       	pop	r0
    33e8:	1f 90       	pop	r1
    33ea:	18 95       	reti

000033ec <__vector_4>:
__vector_4():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:441
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    33ec:	1f 92       	push	r1
    33ee:	0f 92       	push	r0
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	0f 92       	push	r0
    33f4:	11 24       	eor	r1, r1
    33f6:	0b b6       	in	r0, 0x3b	; 59
    33f8:	0f 92       	push	r0
    33fa:	2f 93       	push	r18
    33fc:	3f 93       	push	r19
    33fe:	4f 93       	push	r20
    3400:	5f 93       	push	r21
    3402:	6f 93       	push	r22
    3404:	7f 93       	push	r23
    3406:	8f 93       	push	r24
    3408:	9f 93       	push	r25
    340a:	af 93       	push	r26
    340c:	bf 93       	push	r27
    340e:	ef 93       	push	r30
    3410:	ff 93       	push	r31
    3412:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <intFunc+0xa>
    3416:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <intFunc+0xb>
    341a:	19 95       	eicall
    341c:	ff 91       	pop	r31
    341e:	ef 91       	pop	r30
    3420:	bf 91       	pop	r27
    3422:	af 91       	pop	r26
    3424:	9f 91       	pop	r25
    3426:	8f 91       	pop	r24
    3428:	7f 91       	pop	r23
    342a:	6f 91       	pop	r22
    342c:	5f 91       	pop	r21
    342e:	4f 91       	pop	r20
    3430:	3f 91       	pop	r19
    3432:	2f 91       	pop	r18
    3434:	0f 90       	pop	r0
    3436:	0b be       	out	0x3b, r0	; 59
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	0f 90       	pop	r0
    343e:	1f 90       	pop	r1
    3440:	18 95       	reti

00003442 <__vector_5>:
__vector_5():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:442
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    3442:	1f 92       	push	r1
    3444:	0f 92       	push	r0
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	0f 92       	push	r0
    344a:	11 24       	eor	r1, r1
    344c:	0b b6       	in	r0, 0x3b	; 59
    344e:	0f 92       	push	r0
    3450:	2f 93       	push	r18
    3452:	3f 93       	push	r19
    3454:	4f 93       	push	r20
    3456:	5f 93       	push	r21
    3458:	6f 93       	push	r22
    345a:	7f 93       	push	r23
    345c:	8f 93       	push	r24
    345e:	9f 93       	push	r25
    3460:	af 93       	push	r26
    3462:	bf 93       	push	r27
    3464:	ef 93       	push	r30
    3466:	ff 93       	push	r31
    3468:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <intFunc>
    346c:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <intFunc+0x1>
    3470:	19 95       	eicall
    3472:	ff 91       	pop	r31
    3474:	ef 91       	pop	r30
    3476:	bf 91       	pop	r27
    3478:	af 91       	pop	r26
    347a:	9f 91       	pop	r25
    347c:	8f 91       	pop	r24
    347e:	7f 91       	pop	r23
    3480:	6f 91       	pop	r22
    3482:	5f 91       	pop	r21
    3484:	4f 91       	pop	r20
    3486:	3f 91       	pop	r19
    3488:	2f 91       	pop	r18
    348a:	0f 90       	pop	r0
    348c:	0b be       	out	0x3b, r0	; 59
    348e:	0f 90       	pop	r0
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	0f 90       	pop	r0
    3494:	1f 90       	pop	r1
    3496:	18 95       	reti

00003498 <__vector_6>:
__vector_6():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:443
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    3498:	1f 92       	push	r1
    349a:	0f 92       	push	r0
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	0f 92       	push	r0
    34a0:	11 24       	eor	r1, r1
    34a2:	0b b6       	in	r0, 0x3b	; 59
    34a4:	0f 92       	push	r0
    34a6:	2f 93       	push	r18
    34a8:	3f 93       	push	r19
    34aa:	4f 93       	push	r20
    34ac:	5f 93       	push	r21
    34ae:	6f 93       	push	r22
    34b0:	7f 93       	push	r23
    34b2:	8f 93       	push	r24
    34b4:	9f 93       	push	r25
    34b6:	af 93       	push	r26
    34b8:	bf 93       	push	r27
    34ba:	ef 93       	push	r30
    34bc:	ff 93       	push	r31
    34be:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <intFunc+0x2>
    34c2:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <intFunc+0x3>
    34c6:	19 95       	eicall
    34c8:	ff 91       	pop	r31
    34ca:	ef 91       	pop	r30
    34cc:	bf 91       	pop	r27
    34ce:	af 91       	pop	r26
    34d0:	9f 91       	pop	r25
    34d2:	8f 91       	pop	r24
    34d4:	7f 91       	pop	r23
    34d6:	6f 91       	pop	r22
    34d8:	5f 91       	pop	r21
    34da:	4f 91       	pop	r20
    34dc:	3f 91       	pop	r19
    34de:	2f 91       	pop	r18
    34e0:	0f 90       	pop	r0
    34e2:	0b be       	out	0x3b, r0	; 59
    34e4:	0f 90       	pop	r0
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	0f 90       	pop	r0
    34ea:	1f 90       	pop	r1
    34ec:	18 95       	reti

000034ee <__vector_7>:
__vector_7():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:444
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    34ee:	1f 92       	push	r1
    34f0:	0f 92       	push	r0
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	0f 92       	push	r0
    34f6:	11 24       	eor	r1, r1
    34f8:	0b b6       	in	r0, 0x3b	; 59
    34fa:	0f 92       	push	r0
    34fc:	2f 93       	push	r18
    34fe:	3f 93       	push	r19
    3500:	4f 93       	push	r20
    3502:	5f 93       	push	r21
    3504:	6f 93       	push	r22
    3506:	7f 93       	push	r23
    3508:	8f 93       	push	r24
    350a:	9f 93       	push	r25
    350c:	af 93       	push	r26
    350e:	bf 93       	push	r27
    3510:	ef 93       	push	r30
    3512:	ff 93       	push	r31
    3514:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <intFunc+0xc>
    3518:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <intFunc+0xd>
    351c:	19 95       	eicall
    351e:	ff 91       	pop	r31
    3520:	ef 91       	pop	r30
    3522:	bf 91       	pop	r27
    3524:	af 91       	pop	r26
    3526:	9f 91       	pop	r25
    3528:	8f 91       	pop	r24
    352a:	7f 91       	pop	r23
    352c:	6f 91       	pop	r22
    352e:	5f 91       	pop	r21
    3530:	4f 91       	pop	r20
    3532:	3f 91       	pop	r19
    3534:	2f 91       	pop	r18
    3536:	0f 90       	pop	r0
    3538:	0b be       	out	0x3b, r0	; 59
    353a:	0f 90       	pop	r0
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	0f 90       	pop	r0
    3540:	1f 90       	pop	r1
    3542:	18 95       	reti

00003544 <__vector_8>:
__vector_8():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:445
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    3544:	1f 92       	push	r1
    3546:	0f 92       	push	r0
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	0f 92       	push	r0
    354c:	11 24       	eor	r1, r1
    354e:	0b b6       	in	r0, 0x3b	; 59
    3550:	0f 92       	push	r0
    3552:	2f 93       	push	r18
    3554:	3f 93       	push	r19
    3556:	4f 93       	push	r20
    3558:	5f 93       	push	r21
    355a:	6f 93       	push	r22
    355c:	7f 93       	push	r23
    355e:	8f 93       	push	r24
    3560:	9f 93       	push	r25
    3562:	af 93       	push	r26
    3564:	bf 93       	push	r27
    3566:	ef 93       	push	r30
    3568:	ff 93       	push	r31
    356a:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <intFunc+0xe>
    356e:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <intFunc+0xf>
    3572:	19 95       	eicall
    3574:	ff 91       	pop	r31
    3576:	ef 91       	pop	r30
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	0f 90       	pop	r0
    358e:	0b be       	out	0x3b, r0	; 59
    3590:	0f 90       	pop	r0
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	0f 90       	pop	r0
    3596:	1f 90       	pop	r1
    3598:	18 95       	reti

0000359a <initVariant>:
initVariant():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    359a:	08 95       	ret

0000359c <main>:
main():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    359c:	0e 94 91 1b 	call	0x3722	; 0x3722 <init>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    35a0:	0e 94 cd 1a 	call	0x359a	; 0x359a <initVariant>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    35a4:	0e 94 b6 09 	call	0x136c	; 0x136c <setup>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    35a8:	ca ec       	ldi	r28, 0xCA	; 202
    35aa:	d2 e1       	ldi	r29, 0x12	; 18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    35ac:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <loop>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    35b0:	20 97       	sbiw	r28, 0x00	; 0
    35b2:	e1 f3       	breq	.-8      	; 0x35ac <main+0x10>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    35b4:	0e 94 ca 12 	call	0x2594	; 0x2594 <serialEventRun()>
    35b8:	f9 cf       	rjmp	.-14     	; 0x35ac <main+0x10>

000035ba <__vector_23>:
__vector_23():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    35ba:	1f 92       	push	r1
    35bc:	0f 92       	push	r0
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	0f 92       	push	r0
    35c2:	11 24       	eor	r1, r1
    35c4:	2f 93       	push	r18
    35c6:	3f 93       	push	r19
    35c8:	8f 93       	push	r24
    35ca:	9f 93       	push	r25
    35cc:	af 93       	push	r26
    35ce:	bf 93       	push	r27
    35d0:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <timer0_millis>
    35d4:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <timer0_millis+0x1>
    35d8:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <timer0_millis+0x2>
    35dc:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <timer0_millis+0x3>
    35e0:	30 91 68 05 	lds	r19, 0x0568	; 0x800568 <timer0_fract>
    35e4:	2c e0       	ldi	r18, 0x0C	; 12
    35e6:	23 0f       	add	r18, r19
    35e8:	2d 37       	cpi	r18, 0x7D	; 125
    35ea:	68 f1       	brcs	.+90     	; 0x3646 <__vector_23+0x8c>
    35ec:	2f e8       	ldi	r18, 0x8F	; 143
    35ee:	23 0f       	add	r18, r19
    35f0:	05 96       	adiw	r24, 0x05	; 5
    35f2:	a1 1d       	adc	r26, r1
    35f4:	b1 1d       	adc	r27, r1
    35f6:	20 93 68 05 	sts	0x0568, r18	; 0x800568 <timer0_fract>
    35fa:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <timer0_millis>
    35fe:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <timer0_millis+0x1>
    3602:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <timer0_millis+0x2>
    3606:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <timer0_millis+0x3>
    360a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <timer0_overflow_count>
    360e:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <timer0_overflow_count+0x1>
    3612:	a0 91 66 05 	lds	r26, 0x0566	; 0x800566 <timer0_overflow_count+0x2>
    3616:	b0 91 67 05 	lds	r27, 0x0567	; 0x800567 <timer0_overflow_count+0x3>
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	a1 1d       	adc	r26, r1
    361e:	b1 1d       	adc	r27, r1
    3620:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <timer0_overflow_count>
    3624:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <timer0_overflow_count+0x1>
    3628:	a0 93 66 05 	sts	0x0566, r26	; 0x800566 <timer0_overflow_count+0x2>
    362c:	b0 93 67 05 	sts	0x0567, r27	; 0x800567 <timer0_overflow_count+0x3>
    3630:	bf 91       	pop	r27
    3632:	af 91       	pop	r26
    3634:	9f 91       	pop	r25
    3636:	8f 91       	pop	r24
    3638:	3f 91       	pop	r19
    363a:	2f 91       	pop	r18
    363c:	0f 90       	pop	r0
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	0f 90       	pop	r0
    3642:	1f 90       	pop	r1
    3644:	18 95       	reti
    3646:	04 96       	adiw	r24, 0x04	; 4
    3648:	a1 1d       	adc	r26, r1
    364a:	b1 1d       	adc	r27, r1
    364c:	d4 cf       	rjmp	.-88     	; 0x35f6 <__vector_23+0x3c>

0000364e <millis>:
millis():
    364e:	2f b7       	in	r18, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	60 91 69 05 	lds	r22, 0x0569	; 0x800569 <timer0_millis>
    3656:	70 91 6a 05 	lds	r23, 0x056A	; 0x80056a <timer0_millis+0x1>
    365a:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <timer0_millis+0x2>
    365e:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <timer0_millis+0x3>
    3662:	2f bf       	out	0x3f, r18	; 63
    3664:	08 95       	ret

00003666 <micros>:
micros():
    3666:	3f b7       	in	r19, 0x3f	; 63
    3668:	f8 94       	cli
    366a:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <timer0_overflow_count>
    366e:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <timer0_overflow_count+0x1>
    3672:	a0 91 66 05 	lds	r26, 0x0566	; 0x800566 <timer0_overflow_count+0x2>
    3676:	b0 91 67 05 	lds	r27, 0x0567	; 0x800567 <timer0_overflow_count+0x3>
    367a:	26 b5       	in	r18, 0x26	; 38
    367c:	a8 9b       	sbis	0x15, 0	; 21
    367e:	05 c0       	rjmp	.+10     	; 0x368a <micros+0x24>
    3680:	2f 3f       	cpi	r18, 0xFF	; 255
    3682:	19 f0       	breq	.+6      	; 0x368a <micros+0x24>
    3684:	01 96       	adiw	r24, 0x01	; 1
    3686:	a1 1d       	adc	r26, r1
    3688:	b1 1d       	adc	r27, r1
    368a:	3f bf       	out	0x3f, r19	; 63
    368c:	ba 2f       	mov	r27, r26
    368e:	a9 2f       	mov	r26, r25
    3690:	98 2f       	mov	r25, r24
    3692:	88 27       	eor	r24, r24
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	62 0f       	add	r22, r18
    369a:	71 1d       	adc	r23, r1
    369c:	81 1d       	adc	r24, r1
    369e:	91 1d       	adc	r25, r1
    36a0:	44 e0       	ldi	r20, 0x04	; 4
    36a2:	66 0f       	add	r22, r22
    36a4:	77 1f       	adc	r23, r23
    36a6:	88 1f       	adc	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	4a 95       	dec	r20
    36ac:	d1 f7       	brne	.-12     	; 0x36a2 <micros+0x3c>
    36ae:	08 95       	ret

000036b0 <delay>:
delay():
    36b0:	8f 92       	push	r8
    36b2:	9f 92       	push	r9
    36b4:	af 92       	push	r10
    36b6:	bf 92       	push	r11
    36b8:	cf 92       	push	r12
    36ba:	df 92       	push	r13
    36bc:	ef 92       	push	r14
    36be:	ff 92       	push	r15
    36c0:	6b 01       	movw	r12, r22
    36c2:	7c 01       	movw	r14, r24
    36c4:	0e 94 33 1b 	call	0x3666	; 0x3666 <micros>
    36c8:	4b 01       	movw	r8, r22
    36ca:	5c 01       	movw	r10, r24
    36cc:	c1 14       	cp	r12, r1
    36ce:	d1 04       	cpc	r13, r1
    36d0:	e1 04       	cpc	r14, r1
    36d2:	f1 04       	cpc	r15, r1
    36d4:	e9 f0       	breq	.+58     	; 0x3710 <delay+0x60>
    36d6:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <yield>
    36da:	0e 94 33 1b 	call	0x3666	; 0x3666 <micros>
    36de:	68 19       	sub	r22, r8
    36e0:	79 09       	sbc	r23, r9
    36e2:	8a 09       	sbc	r24, r10
    36e4:	9b 09       	sbc	r25, r11
    36e6:	68 3e       	cpi	r22, 0xE8	; 232
    36e8:	73 40       	sbci	r23, 0x03	; 3
    36ea:	81 05       	cpc	r24, r1
    36ec:	91 05       	cpc	r25, r1
    36ee:	70 f3       	brcs	.-36     	; 0x36cc <delay+0x1c>
    36f0:	21 e0       	ldi	r18, 0x01	; 1
    36f2:	c2 1a       	sub	r12, r18
    36f4:	d1 08       	sbc	r13, r1
    36f6:	e1 08       	sbc	r14, r1
    36f8:	f1 08       	sbc	r15, r1
    36fa:	88 ee       	ldi	r24, 0xE8	; 232
    36fc:	88 0e       	add	r8, r24
    36fe:	83 e0       	ldi	r24, 0x03	; 3
    3700:	98 1e       	adc	r9, r24
    3702:	a1 1c       	adc	r10, r1
    3704:	b1 1c       	adc	r11, r1
    3706:	c1 14       	cp	r12, r1
    3708:	d1 04       	cpc	r13, r1
    370a:	e1 04       	cpc	r14, r1
    370c:	f1 04       	cpc	r15, r1
    370e:	29 f7       	brne	.-54     	; 0x36da <delay+0x2a>
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	df 90       	pop	r13
    3716:	cf 90       	pop	r12
    3718:	bf 90       	pop	r11
    371a:	af 90       	pop	r10
    371c:	9f 90       	pop	r9
    371e:	8f 90       	pop	r8
    3720:	08 95       	ret

00003722 <init>:
init():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3722:	78 94       	sei
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:949

  // Set internal oscillator prescaler if defined (in boards.txt)
#if defined(CLKPR) && defined(OSC_PRESCALER)
  CLKPR = 0x80;          // Enable prescaler
    3724:	e1 e6       	ldi	r30, 0x61	; 97
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 e8       	ldi	r24, 0x80	; 128
    372a:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:950
  CLKPR = OSC_PRESCALER; // Set prescaler
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3730:	84 b5       	in	r24, 0x24	; 36
    3732:	83 60       	ori	r24, 0x03	; 3
    3734:	84 bd       	out	0x24, r24	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3736:	85 b5       	in	r24, 0x25	; 37
    3738:	83 60       	ori	r24, 0x03	; 3
    373a:	85 bd       	out	0x25, r24	; 37
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    373c:	ee e6       	ldi	r30, 0x6E	; 110
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	81 60       	ori	r24, 0x01	; 1
    3744:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3746:	82 e0       	ldi	r24, 0x02	; 2
    3748:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    374c:	e0 e8       	ldi	r30, 0x80	; 128
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	81 60       	ori	r24, 0x01	; 1
    3754:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    3756:	e1 eb       	ldi	r30, 0xB1	; 177
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	80 81       	ld	r24, Z
    375c:	84 60       	ori	r24, 0x04	; 4
    375e:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    3760:	e0 eb       	ldi	r30, 0xB0	; 176
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	81 60       	ori	r24, 0x01	; 1
    3768:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    376a:	e1 e9       	ldi	r30, 0x91	; 145
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	83 60       	ori	r24, 0x03	; 3
    3772:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    3774:	e0 e9       	ldi	r30, 0x90	; 144
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	81 60       	ori	r24, 0x01	; 1
    377c:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    377e:	e1 ea       	ldi	r30, 0xA1	; 161
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
    3784:	83 60       	ori	r24, 0x03	; 3
    3786:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    3788:	e0 ea       	ldi	r30, 0xA0	; 160
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	81 60       	ori	r24, 0x01	; 1
    3790:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    3792:	e1 e2       	ldi	r30, 0x21	; 33
    3794:	f1 e0       	ldi	r31, 0x01	; 1
    3796:	80 81       	ld	r24, Z
    3798:	83 60       	ori	r24, 0x03	; 3
    379a:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    379c:	e0 e2       	ldi	r30, 0x20	; 32
    379e:	f1 e0       	ldi	r31, 0x01	; 1
    37a0:	80 81       	ld	r24, Z
    37a2:	81 60       	ori	r24, 0x01	; 1
    37a4:	80 83       	st	Z, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1054
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
  #elif F_CPU >= 4000000 // 4 MHz / 32 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS0) | _BV(ADEN);
    37a6:	85 e8       	ldi	r24, 0x85	; 133
    37a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    37ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    37b0:	08 95       	ret

000037b2 <analogRead>:
analogRead():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    37b2:	80 31       	cpi	r24, 0x10	; 16
    37b4:	20 f0       	brcs	.+8      	; 0x37be <analogRead+0xc>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    37b6:	85 33       	cpi	r24, 0x35	; 53
    37b8:	08 f4       	brcc	.+2      	; 0x37bc <analogRead+0xa>
    37ba:	85 e3       	ldi	r24, 0x35	; 53
    37bc:	86 53       	subi	r24, 0x36	; 54
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:62 (discriminator 4)
#endif

#if defined(ADCSRB) && defined(MUX5)
  // the MUX5 bit of ADCSRB selects whether we're reading from channels
  // 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
  ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    37be:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    37c2:	98 2f       	mov	r25, r24
    37c4:	98 70       	andi	r25, 0x08	; 8
    37c6:	27 7f       	andi	r18, 0xF7	; 247
    37c8:	92 2b       	or	r25, r18
    37ca:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    37ce:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <analog_reference>
    37d2:	90 e4       	ldi	r25, 0x40	; 64
    37d4:	29 9f       	mul	r18, r25
    37d6:	90 01       	movw	r18, r0
    37d8:	11 24       	eor	r1, r1
    37da:	87 70       	andi	r24, 0x07	; 7
    37dc:	82 2b       	or	r24, r18
    37de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    37e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    37e6:	80 64       	ori	r24, 0x40	; 64
    37e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    37ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    37f0:	86 fd       	sbrc	r24, 6
    37f2:	fc cf       	rjmp	.-8      	; 0x37ec <analogRead+0x3a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    37f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    37f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    37fc:	08 95       	ret

000037fe <turnOffPWM>:
turnOffPWM():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    37fe:	82 50       	subi	r24, 0x02	; 2
    3800:	82 31       	cpi	r24, 0x12	; 18
    3802:	08 f0       	brcs	.+2      	; 0x3806 <turnOffPWM+0x8>
    3804:	5f c0       	rjmp	.+190    	; 0x38c4 <turnOffPWM+0xc6>
    3806:	e8 2f       	mov	r30, r24
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	88 27       	eor	r24, r24
    380c:	e5 5f       	subi	r30, 0xF5	; 245
    380e:	f3 4e       	sbci	r31, 0xE3	; 227
    3810:	8f 4f       	sbci	r24, 0xFF	; 255
    3812:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__tablejump2__>
    3816:	5f 1c       	adc	r5, r15
    3818:	63 1c       	adc	r6, r3
    381a:	1d 1c       	adc	r1, r13
    381c:	23 1c       	adc	r2, r3
    381e:	27 1c       	adc	r2, r7
    3820:	62 1c       	adc	r6, r2
    3822:	2b 1c       	adc	r2, r11
    3824:	31 1c       	adc	r3, r1
    3826:	35 1c       	adc	r3, r5
    3828:	3b 1c       	adc	r3, r11
    382a:	3f 1c       	adc	r3, r15
    382c:	43 1c       	adc	r4, r3
    382e:	49 1c       	adc	r4, r9
    3830:	4d 1c       	adc	r4, r13
    3832:	62 1c       	adc	r6, r2
    3834:	51 1c       	adc	r5, r1
    3836:	57 1c       	adc	r5, r7
    3838:	5b 1c       	adc	r5, r11
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    383a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    383e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    3840:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    3844:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    3846:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    384a:	8f 7d       	andi	r24, 0xDF	; 223
    384c:	f9 cf       	rjmp	.-14     	; 0x3840 <turnOffPWM+0x42>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    384e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3852:	87 7f       	andi	r24, 0xF7	; 247
    3854:	f5 cf       	rjmp	.-22     	; 0x3840 <turnOffPWM+0x42>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    3856:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    385a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    385c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    3860:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    3862:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3866:	8f 7d       	andi	r24, 0xDF	; 223
    3868:	f9 cf       	rjmp	.-14     	; 0x385c <turnOffPWM+0x5e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    386a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    386e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    3870:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    3874:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    3876:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    387a:	8f 7d       	andi	r24, 0xDF	; 223
    387c:	f9 cf       	rjmp	.-14     	; 0x3870 <turnOffPWM+0x72>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    387e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3882:	87 7f       	andi	r24, 0xF7	; 247
    3884:	f5 cf       	rjmp	.-22     	; 0x3870 <turnOffPWM+0x72>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    3886:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    388a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    388c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    3890:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    3892:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3896:	8f 7d       	andi	r24, 0xDF	; 223
    3898:	f9 cf       	rjmp	.-14     	; 0x388c <turnOffPWM+0x8e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    389a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    389e:	87 7f       	andi	r24, 0xF7	; 247
    38a0:	f5 cf       	rjmp	.-22     	; 0x388c <turnOffPWM+0x8e>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    38a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    38a6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    38a8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    38ac:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    38ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    38b2:	8f 7d       	andi	r24, 0xDF	; 223
    38b4:	f9 cf       	rjmp	.-14     	; 0x38a8 <turnOffPWM+0xaa>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    38b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    38ba:	87 7f       	andi	r24, 0xF7	; 247
    38bc:	f5 cf       	rjmp	.-22     	; 0x38a8 <turnOffPWM+0xaa>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    38be:	84 b5       	in	r24, 0x24	; 36
    38c0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    38c2:	84 bd       	out	0x24, r24	; 36
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    38c4:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    38c6:	84 b5       	in	r24, 0x24	; 36
    38c8:	8f 7d       	andi	r24, 0xDF	; 223
    38ca:	fb cf       	rjmp	.-10     	; 0x38c2 <turnOffPWM+0xc4>

000038cc <pinMode>:
pinMode():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	fc 01       	movw	r30, r24
    38d4:	e1 5b       	subi	r30, 0xB1	; 177
    38d6:	fd 4f       	sbci	r31, 0xFD	; 253
    38d8:	24 91       	lpm	r18, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    38da:	8b 55       	subi	r24, 0x5B	; 91
    38dc:	9d 4f       	sbci	r25, 0xFD	; 253
    38de:	fc 01       	movw	r30, r24
    38e0:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    38e2:	88 23       	and	r24, r24
    38e4:	c9 f0       	breq	.+50     	; 0x3918 <pinMode+0x4c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	fc 01       	movw	r30, r24
    38ee:	e1 5d       	subi	r30, 0xD1	; 209
    38f0:	fc 4f       	sbci	r31, 0xFC	; 252
    38f2:	a5 91       	lpm	r26, Z+
    38f4:	b4 91       	lpm	r27, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    38f6:	fc 01       	movw	r30, r24
    38f8:	eb 5e       	subi	r30, 0xEB	; 235
    38fa:	fc 4f       	sbci	r31, 0xFC	; 252
    38fc:	c5 91       	lpm	r28, Z+
    38fe:	d4 91       	lpm	r29, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    3900:	61 11       	cpse	r22, r1
    3902:	0d c0       	rjmp	.+26     	; 0x391e <pinMode+0x52>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    3904:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    3906:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    3908:	8c 91       	ld	r24, X
    390a:	20 95       	com	r18
    390c:	82 23       	and	r24, r18
    390e:	8c 93       	st	X, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    3910:	88 81       	ld	r24, Y
    3912:	28 23       	and	r18, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    3914:	28 83       	st	Y, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    3916:	9f bf       	out	0x3f, r25	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    391e:	62 30       	cpi	r22, 0x02	; 2
    3920:	51 f4       	brne	.+20     	; 0x3936 <pinMode+0x6a>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    3922:	9f b7       	in	r25, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    3924:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    3926:	3c 91       	ld	r19, X
    3928:	82 2f       	mov	r24, r18
    392a:	80 95       	com	r24
    392c:	83 23       	and	r24, r19
    392e:	8c 93       	st	X, r24
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    3930:	e8 81       	ld	r30, Y
    3932:	2e 2b       	or	r18, r30
    3934:	ef cf       	rjmp	.-34     	; 0x3914 <pinMode+0x48>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    3936:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    3938:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    393a:	ec 91       	ld	r30, X
    393c:	2e 2b       	or	r18, r30
    393e:	2c 93       	st	X, r18
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    3940:	8f bf       	out	0x3f, r24	; 63
    3942:	ea cf       	rjmp	.-44     	; 0x3918 <pinMode+0x4c>

00003944 <digitalWrite>:
digitalWrite():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	f9 01       	movw	r30, r18
    3950:	e7 50       	subi	r30, 0x07	; 7
    3952:	fe 4f       	sbci	r31, 0xFE	; 254
    3954:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    3956:	f9 01       	movw	r30, r18
    3958:	e1 5b       	subi	r30, 0xB1	; 177
    395a:	fd 4f       	sbci	r31, 0xFD	; 253
    395c:	d4 91       	lpm	r29, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    395e:	f9 01       	movw	r30, r18
    3960:	eb 55       	subi	r30, 0x5B	; 91
    3962:	fd 4f       	sbci	r31, 0xFD	; 253
    3964:	c4 91       	lpm	r28, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    3966:	cc 23       	and	r28, r28
    3968:	a9 f0       	breq	.+42     	; 0x3994 <digitalWrite+0x50>
    396a:	16 2f       	mov	r17, r22
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    396c:	81 11       	cpse	r24, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    396e:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <turnOffPWM>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    3972:	ec 2f       	mov	r30, r28
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	ee 0f       	add	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	eb 5e       	subi	r30, 0xEB	; 235
    397c:	fc 4f       	sbci	r31, 0xFC	; 252
    397e:	a5 91       	lpm	r26, Z+
    3980:	b4 91       	lpm	r27, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    3982:	8f b7       	in	r24, 0x3f	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    3984:	f8 94       	cli
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    3986:	ec 91       	ld	r30, X
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    3988:	11 11       	cpse	r17, r1
    398a:	08 c0       	rjmp	.+16     	; 0x399c <digitalWrite+0x58>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    398c:	d0 95       	com	r29
    398e:	de 23       	and	r29, r30
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    3990:	dc 93       	st	X, r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    3992:	8f bf       	out	0x3f, r24	; 63
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	1f 91       	pop	r17
    399a:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    399c:	de 2b       	or	r29, r30
    399e:	f8 cf       	rjmp	.-16     	; 0x3990 <digitalWrite+0x4c>

000039a0 <digitalRead>:
digitalRead():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    39a4:	28 2f       	mov	r18, r24
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	f9 01       	movw	r30, r18
    39aa:	e7 50       	subi	r30, 0x07	; 7
    39ac:	fe 4f       	sbci	r31, 0xFE	; 254
    39ae:	84 91       	lpm	r24, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    39b0:	f9 01       	movw	r30, r18
    39b2:	e1 5b       	subi	r30, 0xB1	; 177
    39b4:	fd 4f       	sbci	r31, 0xFD	; 253
    39b6:	d4 91       	lpm	r29, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    39b8:	f9 01       	movw	r30, r18
    39ba:	eb 55       	subi	r30, 0x5B	; 91
    39bc:	fd 4f       	sbci	r31, 0xFD	; 253
    39be:	c4 91       	lpm	r28, Z
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    39c0:	cc 23       	and	r28, r28
    39c2:	a1 f0       	breq	.+40     	; 0x39ec <digitalRead+0x4c>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    39c4:	81 11       	cpse	r24, r1
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    39c6:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <turnOffPWM>
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    39ca:	ec 2f       	mov	r30, r28
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	ee 0f       	add	r30, r30
    39d0:	ff 1f       	adc	r31, r31
    39d2:	e5 50       	subi	r30, 0x05	; 5
    39d4:	fd 4f       	sbci	r31, 0xFD	; 253
    39d6:	a5 91       	lpm	r26, Z+
    39d8:	b4 91       	lpm	r27, Z
    39da:	ec 91       	ld	r30, X
    39dc:	ed 23       	and	r30, r29
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <digitalRead+0x46>
    39e4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	08 95       	ret
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	fa cf       	rjmp	.-12     	; 0x39e6 <digitalRead+0x46>

000039f2 <yield>:
__empty():
C:\Users\DH\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    39f2:	08 95       	ret

000039f4 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    39f4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    39f6:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    39f8:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    39fa:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    39fc:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    39fe:	0d c0       	rjmp	.+26     	; 0x3a1a <__udivmodsi4_ep>

00003a00 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3a00:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3a02:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3a04:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3a06:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3a08:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3a0a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3a0c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3a0e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3a10:	20 f0       	brcs	.+8      	; 0x3a1a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3a12:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3a14:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3a16:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3a18:	f5 0b       	sbc	r31, r21

00003a1a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3a1a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3a1c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3a1e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3a20:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3a22:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3a24:	69 f7       	brne	.-38     	; 0x3a00 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3a26:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3a28:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3a2a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3a2c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3a2e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3a30:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3a32:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3a34:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3a36:	08 95       	ret

00003a38 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3a38:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3a3a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    3a3c:	1e f4       	brtc	.+6      	; 0x3a44 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    3a3e:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    3a40:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3a44:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3a46:	07 d0       	rcall	.+14     	; 0x3a56 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3a48:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    3a4c:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    3a4e:	03 d0       	rcall	.+6      	; 0x3a56 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    3a50:	4e f4       	brtc	.+18     	; 0x3a64 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3a52:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__negsi2>

00003a56 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3a56:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3a58:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3a5a:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3a5c:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3a60:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3a62:	5f 4f       	sbci	r21, 0xFF	; 255

00003a64 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3a64:	08 95       	ret

00003a66 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3a66:	90 95       	com	r25
    3a68:	80 95       	com	r24
    3a6a:	70 95       	com	r23
    3a6c:	61 95       	neg	r22
    3a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a70:	8f 4f       	sbci	r24, 0xFF	; 255
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3a74:	08 95       	ret

00003a76 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3a76:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3a78:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    3a7a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    3a7c:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3a7e:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3a80:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    3a82:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    3a84:	19 94       	eijmp

00003a86 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3a86:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3a8a:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3a8c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3a8e:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3a90:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3a92:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3a94:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3a96:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3a98:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3a9a:	08 95       	ret

00003a9c <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3a9c:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3a9e:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3aa0:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3aa2:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3aa4:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3aa6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3aa8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3aaa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3aac:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3aae:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3ab0:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3ab2:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3ab4:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3ab6:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3ab8:	08 95       	ret

00003aba <eeprom_write_byte>:
eeprom_write_byte():
    3aba:	26 2f       	mov	r18, r22

00003abc <eeprom_write_r18>:
    3abc:	f9 99       	sbic	0x1f, 1	; 31
    3abe:	fe cf       	rjmp	.-4      	; 0x3abc <eeprom_write_r18>
    3ac0:	1f ba       	out	0x1f, r1	; 31
    3ac2:	92 bd       	out	0x22, r25	; 34
    3ac4:	81 bd       	out	0x21, r24	; 33
    3ac6:	20 bd       	out	0x20, r18	; 32
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	fa 9a       	sbi	0x1f, 2	; 31
    3ace:	f9 9a       	sbi	0x1f, 1	; 31
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	01 96       	adiw	r24, 0x01	; 1
    3ad4:	08 95       	ret

00003ad6 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    3ad6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    3ad8:	c9 ea       	ldi	r28, 0xA9	; 169
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    3ada:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2500
    3adc:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    3ade:	06 c0       	rjmp	.+12     	; 0x3aec <__do_global_dtors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2505
    3ae0:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    3ae2:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    3ae4:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    3ae8:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2512
    3aea:	01 1d       	adc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    3aec:	ca 3a       	cpi	r28, 0xAA	; 170
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    3aee:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2518
    3af0:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2519
    3af2:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    3af4:	a9 f7       	brne	.-22     	; 0x3ae0 <__do_global_dtors+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3af6:	f8 94       	cli

00003af8 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3af8:	ff cf       	rjmp	.-2      	; 0x3af8 <__stop_program>
